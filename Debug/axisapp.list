
axisapp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ef4  08008760  08008760  00018760  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f654  0800f654  000207d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f654  0800f654  0001f654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f65c  0800f65c  000207d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f65c  0800f65c  0001f65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f660  0800f660  0001f660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d0  20000000  0800f664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000207d0  2**0
                  CONTENTS
 10 .bss          00000568  200007d0  200007d0  000207d0  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20000d38  20000d38  000207d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000207d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102bb  00000000  00000000  00020800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002268  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00032d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008f0  00000000  00000000  000336e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002291e  00000000  00000000  00033fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1cb  00000000  00000000  000568ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfac9  00000000  00000000  00062ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ce  00000000  00000000  00132582  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003610  00000000  00000000  00132650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00135c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00135d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007d0 	.word	0x200007d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800872c 	.word	0x0800872c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007d4 	.word	0x200007d4
 80001cc:	0800872c 	.word	0x0800872c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b96e 	b.w	8000ce0 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468c      	mov	ip, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8083 	bne.w	8000b32 <__udivmoddi4+0x116>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	4617      	mov	r7, r2
 8000a30:	d947      	bls.n	8000ac2 <__udivmoddi4+0xa6>
 8000a32:	fab2 f282 	clz	r2, r2
 8000a36:	b142      	cbz	r2, 8000a4a <__udivmoddi4+0x2e>
 8000a38:	f1c2 0020 	rsb	r0, r2, #32
 8000a3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a40:	4091      	lsls	r1, r2
 8000a42:	4097      	lsls	r7, r2
 8000a44:	ea40 0c01 	orr.w	ip, r0, r1
 8000a48:	4094      	lsls	r4, r2
 8000a4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a4e:	0c23      	lsrs	r3, r4, #16
 8000a50:	fbbc f6f8 	udiv	r6, ip, r8
 8000a54:	fa1f fe87 	uxth.w	lr, r7
 8000a58:	fb08 c116 	mls	r1, r8, r6, ip
 8000a5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a60:	fb06 f10e 	mul.w	r1, r6, lr
 8000a64:	4299      	cmp	r1, r3
 8000a66:	d909      	bls.n	8000a7c <__udivmoddi4+0x60>
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6e:	f080 8119 	bcs.w	8000ca4 <__udivmoddi4+0x288>
 8000a72:	4299      	cmp	r1, r3
 8000a74:	f240 8116 	bls.w	8000ca4 <__udivmoddi4+0x288>
 8000a78:	3e02      	subs	r6, #2
 8000a7a:	443b      	add	r3, r7
 8000a7c:	1a5b      	subs	r3, r3, r1
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a84:	fb08 3310 	mls	r3, r8, r0, r3
 8000a88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x8c>
 8000a94:	193c      	adds	r4, r7, r4
 8000a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a9a:	f080 8105 	bcs.w	8000ca8 <__udivmoddi4+0x28c>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	f240 8102 	bls.w	8000ca8 <__udivmoddi4+0x28c>
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	443c      	add	r4, r7
 8000aa8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aac:	eba4 040e 	sub.w	r4, r4, lr
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	b11d      	cbz	r5, 8000abc <__udivmoddi4+0xa0>
 8000ab4:	40d4      	lsrs	r4, r2
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e9c5 4300 	strd	r4, r3, [r5]
 8000abc:	4631      	mov	r1, r6
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	b902      	cbnz	r2, 8000ac6 <__udivmoddi4+0xaa>
 8000ac4:	deff      	udf	#255	; 0xff
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d150      	bne.n	8000b70 <__udivmoddi4+0x154>
 8000ace:	1bcb      	subs	r3, r1, r7
 8000ad0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad4:	fa1f f887 	uxth.w	r8, r7
 8000ad8:	2601      	movs	r6, #1
 8000ada:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ade:	0c21      	lsrs	r1, r4, #16
 8000ae0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aec:	428b      	cmp	r3, r1
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0xe4>
 8000af0:	1879      	adds	r1, r7, r1
 8000af2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0xe2>
 8000af8:	428b      	cmp	r3, r1
 8000afa:	f200 80e9 	bhi.w	8000cd0 <__udivmoddi4+0x2b4>
 8000afe:	4684      	mov	ip, r0
 8000b00:	1ac9      	subs	r1, r1, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b10:	fb08 f800 	mul.w	r8, r8, r0
 8000b14:	45a0      	cmp	r8, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x10c>
 8000b18:	193c      	adds	r4, r7, r4
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x10a>
 8000b20:	45a0      	cmp	r8, r4
 8000b22:	f200 80d9 	bhi.w	8000cd8 <__udivmoddi4+0x2bc>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 0408 	sub.w	r4, r4, r8
 8000b2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b30:	e7bf      	b.n	8000ab2 <__udivmoddi4+0x96>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0x12e>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	f000 80b1 	beq.w	8000c9e <__udivmoddi4+0x282>
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b42:	4630      	mov	r0, r6
 8000b44:	4631      	mov	r1, r6
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f683 	clz	r6, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d14a      	bne.n	8000be8 <__udivmoddi4+0x1cc>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0x140>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80b8 	bhi.w	8000ccc <__udivmoddi4+0x2b0>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	468c      	mov	ip, r1
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d0a8      	beq.n	8000abc <__udivmoddi4+0xa0>
 8000b6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0xa0>
 8000b70:	f1c2 0320 	rsb	r3, r2, #32
 8000b74:	fa20 f603 	lsr.w	r6, r0, r3
 8000b78:	4097      	lsls	r7, r2
 8000b7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b82:	40d9      	lsrs	r1, r3
 8000b84:	4330      	orrs	r0, r6
 8000b86:	0c03      	lsrs	r3, r0, #16
 8000b88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b8c:	fa1f f887 	uxth.w	r8, r7
 8000b90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb06 f108 	mul.w	r1, r6, r8
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x19c>
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000baa:	f080 808d 	bcs.w	8000cc8 <__udivmoddi4+0x2ac>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 808a 	bls.w	8000cc8 <__udivmoddi4+0x2ac>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	443b      	add	r3, r7
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b281      	uxth	r1, r0
 8000bbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc8:	fb00 f308 	mul.w	r3, r0, r8
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x1c4>
 8000bd0:	1879      	adds	r1, r7, r1
 8000bd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bd6:	d273      	bcs.n	8000cc0 <__udivmoddi4+0x2a4>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d971      	bls.n	8000cc0 <__udivmoddi4+0x2a4>
 8000bdc:	3802      	subs	r0, #2
 8000bde:	4439      	add	r1, r7
 8000be0:	1acb      	subs	r3, r1, r3
 8000be2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000be6:	e778      	b.n	8000ada <__udivmoddi4+0xbe>
 8000be8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bec:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bf4:	431c      	orrs	r4, r3
 8000bf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c06:	431f      	orrs	r7, r3
 8000c08:	0c3b      	lsrs	r3, r7, #16
 8000c0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c0e:	fa1f f884 	uxth.w	r8, r4
 8000c12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c1e:	458a      	cmp	sl, r1
 8000c20:	fa02 f206 	lsl.w	r2, r2, r6
 8000c24:	fa00 f306 	lsl.w	r3, r0, r6
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x220>
 8000c2a:	1861      	adds	r1, r4, r1
 8000c2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c30:	d248      	bcs.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c32:	458a      	cmp	sl, r1
 8000c34:	d946      	bls.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4421      	add	r1, r4
 8000c3c:	eba1 010a 	sub.w	r1, r1, sl
 8000c40:	b2bf      	uxth	r7, r7
 8000c42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c4e:	fb00 f808 	mul.w	r8, r0, r8
 8000c52:	45b8      	cmp	r8, r7
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0x24a>
 8000c56:	19e7      	adds	r7, r4, r7
 8000c58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5c:	d22e      	bcs.n	8000cbc <__udivmoddi4+0x2a0>
 8000c5e:	45b8      	cmp	r8, r7
 8000c60:	d92c      	bls.n	8000cbc <__udivmoddi4+0x2a0>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4427      	add	r7, r4
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	eba7 0708 	sub.w	r7, r7, r8
 8000c6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c72:	454f      	cmp	r7, r9
 8000c74:	46c6      	mov	lr, r8
 8000c76:	4649      	mov	r1, r9
 8000c78:	d31a      	bcc.n	8000cb0 <__udivmoddi4+0x294>
 8000c7a:	d017      	beq.n	8000cac <__udivmoddi4+0x290>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x27a>
 8000c7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c82:	eb67 0701 	sbc.w	r7, r7, r1
 8000c86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c8a:	40f2      	lsrs	r2, r6
 8000c8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c90:	40f7      	lsrs	r7, r6
 8000c92:	e9c5 2700 	strd	r2, r7, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	462e      	mov	r6, r5
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	e70b      	b.n	8000abc <__udivmoddi4+0xa0>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	e6e9      	b.n	8000a7c <__udivmoddi4+0x60>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	e6fd      	b.n	8000aa8 <__udivmoddi4+0x8c>
 8000cac:	4543      	cmp	r3, r8
 8000cae:	d2e5      	bcs.n	8000c7c <__udivmoddi4+0x260>
 8000cb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e7df      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e7d2      	b.n	8000c66 <__udivmoddi4+0x24a>
 8000cc0:	4660      	mov	r0, ip
 8000cc2:	e78d      	b.n	8000be0 <__udivmoddi4+0x1c4>
 8000cc4:	4681      	mov	r9, r0
 8000cc6:	e7b9      	b.n	8000c3c <__udivmoddi4+0x220>
 8000cc8:	4666      	mov	r6, ip
 8000cca:	e775      	b.n	8000bb8 <__udivmoddi4+0x19c>
 8000ccc:	4630      	mov	r0, r6
 8000cce:	e74a      	b.n	8000b66 <__udivmoddi4+0x14a>
 8000cd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd4:	4439      	add	r1, r7
 8000cd6:	e713      	b.n	8000b00 <__udivmoddi4+0xe4>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	e724      	b.n	8000b28 <__udivmoddi4+0x10c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <LIS3DSH_WriteIO+0x4c>)
 8000cfe:	f001 fd21 	bl	8002744 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000d02:	f107 010f 	add.w	r1, r7, #15
 8000d06:	230a      	movs	r3, #10
 8000d08:	2201      	movs	r2, #1
 8000d0a:	480a      	ldr	r0, [pc, #40]	; (8000d34 <LIS3DSH_WriteIO+0x50>)
 8000d0c:	f002 fa49 	bl	80031a2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	230a      	movs	r3, #10
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <LIS3DSH_WriteIO+0x50>)
 8000d1a:	f002 fa42 	bl	80031a2 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2108      	movs	r1, #8
 8000d22:	4803      	ldr	r0, [pc, #12]	; (8000d30 <LIS3DSH_WriteIO+0x4c>)
 8000d24:	f001 fd0e 	bl	8002744 <HAL_GPIO_WritePin>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	200007ec 	.word	0x200007ec

08000d38 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000d52:	2200      	movs	r2, #0
 8000d54:	2108      	movs	r1, #8
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <LIS3DSH_ReadIO+0x84>)
 8000d58:	f001 fcf4 	bl	8002744 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000d5c:	f107 0108 	add.w	r1, r7, #8
 8000d60:	230a      	movs	r3, #10
 8000d62:	2201      	movs	r2, #1
 8000d64:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <LIS3DSH_ReadIO+0x88>)
 8000d66:	f002 fa1c 	bl	80031a2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f107 0108 	add.w	r1, r7, #8
 8000d72:	230a      	movs	r3, #10
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <LIS3DSH_ReadIO+0x88>)
 8000d76:	f002 fb50 	bl	800341a <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <LIS3DSH_ReadIO+0x84>)
 8000d80:	f001 fce0 	bl	8002744 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e00c      	b.n	8000da4 <LIS3DSH_ReadIO+0x6c>
	{
		dataR[i] = spiBuf[i];
 8000d8a:	7bfa      	ldrb	r2, [r7, #15]
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	440b      	add	r3, r1
 8000d92:	f107 0110 	add.w	r1, r7, #16
 8000d96:	440a      	add	r2, r1
 8000d98:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000d9c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3301      	adds	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbec      	blt.n	8000d8a <LIS3DSH_ReadIO+0x52>
	}
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	200007ec 	.word	0x200007ec

08000dc4 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000dd2:	2258      	movs	r2, #88	; 0x58
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	485b      	ldr	r0, [pc, #364]	; (8000f44 <LIS3DSH_Init+0x180>)
 8000dd8:	f006 f8b6 	bl	8006f48 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	78db      	ldrb	r3, [r3, #3]
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	b25a      	sxtb	r2, r3
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	f023 030f 	bic.w	r3, r3, #15
 8000dfe:	b25a      	sxtb	r2, r3
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000e0c:	f107 030f 	add.w	r3, r7, #15
 8000e10:	2201      	movs	r2, #1
 8000e12:	4619      	mov	r1, r3
 8000e14:	2020      	movs	r0, #32
 8000e16:	f7ff ff65 	bl	8000ce4 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	789b      	ldrb	r3, [r3, #2]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e28:	b25a      	sxtb	r2, r3
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e40:	b25a      	sxtb	r2, r3
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000e4e:	f107 030f 	add.w	r3, r7, #15
 8000e52:	2201      	movs	r2, #1
 8000e54:	4619      	mov	r1, r3
 8000e56:	2024      	movs	r0, #36	; 0x24
 8000e58:	f7ff ff44 	bl	8000ce4 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d008      	beq.n	8000e76 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000e64:	2388      	movs	r3, #136	; 0x88
 8000e66:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000e68:	f107 030f 	add.w	r3, r7, #15
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2023      	movs	r0, #35	; 0x23
 8000e72:	f7ff ff37 	bl	8000ce4 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2b20      	cmp	r3, #32
 8000e7c:	d858      	bhi.n	8000f30 <LIS3DSH_Init+0x16c>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <LIS3DSH_Init+0xc0>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000f09 	.word	0x08000f09
 8000e88:	08000f31 	.word	0x08000f31
 8000e8c:	08000f31 	.word	0x08000f31
 8000e90:	08000f31 	.word	0x08000f31
 8000e94:	08000f31 	.word	0x08000f31
 8000e98:	08000f31 	.word	0x08000f31
 8000e9c:	08000f31 	.word	0x08000f31
 8000ea0:	08000f31 	.word	0x08000f31
 8000ea4:	08000f11 	.word	0x08000f11
 8000ea8:	08000f31 	.word	0x08000f31
 8000eac:	08000f31 	.word	0x08000f31
 8000eb0:	08000f31 	.word	0x08000f31
 8000eb4:	08000f31 	.word	0x08000f31
 8000eb8:	08000f31 	.word	0x08000f31
 8000ebc:	08000f31 	.word	0x08000f31
 8000ec0:	08000f31 	.word	0x08000f31
 8000ec4:	08000f19 	.word	0x08000f19
 8000ec8:	08000f31 	.word	0x08000f31
 8000ecc:	08000f31 	.word	0x08000f31
 8000ed0:	08000f31 	.word	0x08000f31
 8000ed4:	08000f31 	.word	0x08000f31
 8000ed8:	08000f31 	.word	0x08000f31
 8000edc:	08000f31 	.word	0x08000f31
 8000ee0:	08000f31 	.word	0x08000f31
 8000ee4:	08000f21 	.word	0x08000f21
 8000ee8:	08000f31 	.word	0x08000f31
 8000eec:	08000f31 	.word	0x08000f31
 8000ef0:	08000f31 	.word	0x08000f31
 8000ef4:	08000f31 	.word	0x08000f31
 8000ef8:	08000f31 	.word	0x08000f31
 8000efc:	08000f31 	.word	0x08000f31
 8000f00:	08000f31 	.word	0x08000f31
 8000f04:	08000f29 	.word	0x08000f29
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <LIS3DSH_Init+0x184>)
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <LIS3DSH_Init+0x188>)
 8000f0c:	601a      	str	r2, [r3, #0]
			break;
 8000f0e:	e00f      	b.n	8000f30 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <LIS3DSH_Init+0x184>)
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <LIS3DSH_Init+0x18c>)
 8000f14:	601a      	str	r2, [r3, #0]
			break;
 8000f16:	e00b      	b.n	8000f30 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <LIS3DSH_Init+0x184>)
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <LIS3DSH_Init+0x190>)
 8000f1c:	601a      	str	r2, [r3, #0]
			break;
 8000f1e:	e007      	b.n	8000f30 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <LIS3DSH_Init+0x184>)
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <LIS3DSH_Init+0x194>)
 8000f24:	601a      	str	r2, [r3, #0]
			break;
 8000f26:	e003      	b.n	8000f30 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <LIS3DSH_Init+0x184>)
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <LIS3DSH_Init+0x198>)
 8000f2c:	601a      	str	r2, [r3, #0]
			break;
 8000f2e:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8000f30:	2201      	movs	r2, #1
 8000f32:	2108      	movs	r1, #8
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <LIS3DSH_Init+0x19c>)
 8000f36:	f001 fc05 	bl	8002744 <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200007ec 	.word	0x200007ec
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	3d75c28f 	.word	0x3d75c28f
 8000f50:	3df5c28f 	.word	0x3df5c28f
 8000f54:	3e3851ec 	.word	0x3e3851ec
 8000f58:	3e75c28f 	.word	0x3e75c28f
 8000f5c:	3f3ae148 	.word	0x3f3ae148
 8000f60:	40021000 	.word	0x40021000

08000f64 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2202      	movs	r2, #2
 8000f72:	4619      	mov	r1, r3
 8000f74:	2028      	movs	r0, #40	; 0x28
 8000f76:	f7ff fedf 	bl	8000d38 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8000f7a:	7d7b      	ldrb	r3, [r7, #21]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	7d3b      	ldrb	r3, [r7, #20]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2202      	movs	r2, #2
 8000f94:	4619      	mov	r1, r3
 8000f96:	202a      	movs	r0, #42	; 0x2a
 8000f98:	f7ff fece 	bl	8000d38 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000f9c:	7d7b      	ldrb	r3, [r7, #21]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	7d3b      	ldrb	r3, [r7, #20]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	202c      	movs	r0, #44	; 0x2c
 8000fba:	f7ff febd 	bl	8000d38 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8000fbe:	7d7b      	ldrb	r3, [r7, #21]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	7d3b      	ldrb	r3, [r7, #20]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	6010      	str	r0, [r2, #0]
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	8093      	strh	r3, [r2, #4]
	
}
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffb4 	bl	8000f64 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8000ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <LIS3DSH_GetDataScaled+0xe4>)
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <LIS3DSH_GetDataScaled+0xe8>)
 8001014:	edd3 7a00 	vldr	s15, [r3]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80010d8 <LIS3DSH_GetDataScaled+0xec>
 8001020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <LIS3DSH_GetDataScaled+0xf0>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102e:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001032:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <LIS3DSH_GetDataScaled+0xe4>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <LIS3DSH_GetDataScaled+0xf4>)
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80010d8 <LIS3DSH_GetDataScaled+0xec>
 8001056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <LIS3DSH_GetDataScaled+0xf8>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001064:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8001068:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <LIS3DSH_GetDataScaled+0xe4>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <LIS3DSH_GetDataScaled+0xfc>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001088:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80010d8 <LIS3DSH_GetDataScaled+0xec>
 800108c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <LIS3DSH_GetDataScaled+0x100>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109a:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	f107 0210 	add.w	r2, r7, #16
 80010a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b2:	ee06 1a90 	vmov	s13, r1
 80010b6:	ee07 2a10 	vmov	s14, r2
 80010ba:	ee07 3a90 	vmov	s15, r3
}
 80010be:	eeb0 0a66 	vmov.f32	s0, s13
 80010c2:	eef0 0a47 	vmov.f32	s1, s14
 80010c6:	eeb0 1a67 	vmov.f32	s2, s15
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004
 80010d8:	00000000 	.word	0x00000000
 80010dc:	20000844 	.word	0x20000844
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000848 	.word	0x20000848
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	2000084c 	.word	0x2000084c

080010f0 <LIS3DSH_X_calibrate>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010fa:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80010fe:	ed97 7a00 	vldr	s14, [r7]
 8001102:	edd7 7a01 	vldr	s15, [r7, #4]
 8001106:	ee37 7a27 	vadd.f32	s14, s14, s15
 800110a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <LIS3DSH_X_calibrate+0x50>)
 8001114:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 8001118:	ed97 7a00 	vldr	s14, [r7]
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001124:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001144 <LIS3DSH_X_calibrate+0x54>
 8001128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <LIS3DSH_X_calibrate+0x58>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000844 	.word	0x20000844
 8001144:	44fa0000 	.word	0x44fa0000
 8001148:	20000004 	.word	0x20000004

0800114c <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	ed87 0a01 	vstr	s0, [r7, #4]
 8001156:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 800115a:	ed97 7a00 	vldr	s14, [r7]
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001166:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800116a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LIS3DSH_Y_calibrate+0x50>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001174:	ed97 7a00 	vldr	s14, [r7]
 8001178:	edd7 7a01 	vldr	s15, [r7, #4]
 800117c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001180:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011a0 <LIS3DSH_Y_calibrate+0x54>
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <LIS3DSH_Y_calibrate+0x58>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000848 	.word	0x20000848
 80011a0:	44fa0000 	.word	0x44fa0000
 80011a4:	20000008 	.word	0x20000008

080011a8 <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80011b2:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 80011b6:	ed97 7a00 	vldr	s14, [r7]
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <LIS3DSH_Z_calibrate+0x50>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 80011d0:	ed97 7a00 	vldr	s14, [r7]
 80011d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011fc <LIS3DSH_Z_calibrate+0x54>
 80011e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LIS3DSH_Z_calibrate+0x58>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2000084c 	.word	0x2000084c
 80011fc:	44fa0000 	.word	0x44fa0000
 8001200:	2000000c 	.word	0x2000000c

08001204 <KalmanFilter_X>:
/* mea - data read from sensor
 * err_est, err_mea, proc_noise is set by user, mN/s^2 */


float KalmanFilter_X(float mea_x)
{
 8001204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	ed87 0a01 	vstr	s0, [r7, #4]
	kalman_gain_x = err_est_x/(err_est_x + err_mea_x) ;
 8001210:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <KalmanFilter_X+0x104>)
 8001212:	edd3 6a00 	vldr	s13, [r3]
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <KalmanFilter_X+0x104>)
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <KalmanFilter_X+0x108>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122a:	4b39      	ldr	r3, [pc, #228]	; (8001310 <KalmanFilter_X+0x10c>)
 800122c:	edc3 7a00 	vstr	s15, [r3]
	current_estimate_x = last_estimate_x + kalman_gain_x*(mea_x-last_estimate_x);
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <KalmanFilter_X+0x110>)
 8001232:	edd3 7a00 	vldr	s15, [r3]
 8001236:	ed97 7a01 	vldr	s14, [r7, #4]
 800123a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800123e:	4b34      	ldr	r3, [pc, #208]	; (8001310 <KalmanFilter_X+0x10c>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <KalmanFilter_X+0x110>)
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <KalmanFilter_X+0x114>)
 8001254:	edc3 7a00 	vstr	s15, [r3]
	err_est_x = (1.0-kalman_gain_x)*err_est_x + fabs(last_estimate_x-current_estimate_x)*proc_noise_x;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <KalmanFilter_X+0x10c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fa95 	bl	800078c <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	f04f 0000 	mov.w	r0, #0
 800126a:	492c      	ldr	r1, [pc, #176]	; (800131c <KalmanFilter_X+0x118>)
 800126c:	f7ff f92e 	bl	80004cc <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4614      	mov	r4, r2
 8001276:	461d      	mov	r5, r3
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <KalmanFilter_X+0x104>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fa85 	bl	800078c <__aeabi_f2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7fe fff1 	bl	8000270 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4690      	mov	r8, r2
 8001294:	4699      	mov	r9, r3
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <KalmanFilter_X+0x110>)
 8001298:	ed93 7a00 	vldr	s14, [r3]
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <KalmanFilter_X+0x114>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	eef0 7ae7 	vabs.f32	s15, s15
 80012aa:	ee17 0a90 	vmov	r0, s15
 80012ae:	f7ff fa6d 	bl	800078c <__aeabi_f2d>
 80012b2:	4604      	mov	r4, r0
 80012b4:	460d      	mov	r5, r1
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <KalmanFilter_X+0x11c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa66 	bl	800078c <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	f7fe ffd2 	bl	8000270 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4640      	mov	r0, r8
 80012d2:	4649      	mov	r1, r9
 80012d4:	f7ff f8fc 	bl	80004d0 <__adddf3>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fb34 	bl	800094c <__aeabi_d2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <KalmanFilter_X+0x104>)
 80012e8:	6013      	str	r3, [r2, #0]
	last_estimate_x = current_estimate_x;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <KalmanFilter_X+0x114>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <KalmanFilter_X+0x110>)
 80012f0:	6013      	str	r3, [r2, #0]
	return current_estimate_x;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <KalmanFilter_X+0x114>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	ee07 3a90 	vmov	s15, r3
}
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001306:	bf00      	nop
 8001308:	20000010 	.word	0x20000010
 800130c:	20000014 	.word	0x20000014
 8001310:	200008f8 	.word	0x200008f8
 8001314:	20000950 	.word	0x20000950
 8001318:	20000af8 	.word	0x20000af8
 800131c:	3ff00000 	.word	0x3ff00000
 8001320:	20000018 	.word	0x20000018

08001324 <KalmanFilter_Y>:

float kalman_gain_y,err_est_y,err_mea_y, current_estimate_y,last_estimate_y, proc_noise_y;
float err_est_y = KAL_ERROR_ESTIMATED; float err_mea_y = KAL_ERROR_MEASUREMENT; float proc_noise_y = KAL_NOISE_PROCESS;

float KalmanFilter_Y(float mea_y)
{
 8001324:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	ed87 0a01 	vstr	s0, [r7, #4]
	kalman_gain_y = err_est_y/(err_est_y + err_mea_y) ;
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <KalmanFilter_Y+0x104>)
 8001332:	edd3 6a00 	vldr	s13, [r3]
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <KalmanFilter_Y+0x104>)
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	4b3b      	ldr	r3, [pc, #236]	; (800142c <KalmanFilter_Y+0x108>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <KalmanFilter_Y+0x10c>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	current_estimate_y = last_estimate_y + kalman_gain_y*(mea_y-last_estimate_y);
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <KalmanFilter_Y+0x110>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	ed97 7a01 	vldr	s14, [r7, #4]
 800135a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <KalmanFilter_Y+0x10c>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <KalmanFilter_Y+0x110>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <KalmanFilter_Y+0x114>)
 8001374:	edc3 7a00 	vstr	s15, [r3]
	err_est_y = (1.0-kalman_gain_y)*err_est_y + fabs(last_estimate_y-current_estimate_y)*proc_noise_y;
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <KalmanFilter_Y+0x10c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fa05 	bl	800078c <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	f04f 0000 	mov.w	r0, #0
 800138a:	492c      	ldr	r1, [pc, #176]	; (800143c <KalmanFilter_Y+0x118>)
 800138c:	f7ff f89e 	bl	80004cc <__aeabi_dsub>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4614      	mov	r4, r2
 8001396:	461d      	mov	r5, r3
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <KalmanFilter_Y+0x104>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f9f5 	bl	800078c <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7fe ff61 	bl	8000270 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4690      	mov	r8, r2
 80013b4:	4699      	mov	r9, r3
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <KalmanFilter_Y+0x110>)
 80013b8:	ed93 7a00 	vldr	s14, [r3]
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <KalmanFilter_Y+0x114>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c6:	eef0 7ae7 	vabs.f32	s15, s15
 80013ca:	ee17 0a90 	vmov	r0, s15
 80013ce:	f7ff f9dd 	bl	800078c <__aeabi_f2d>
 80013d2:	4604      	mov	r4, r0
 80013d4:	460d      	mov	r5, r1
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <KalmanFilter_Y+0x11c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f9d6 	bl	800078c <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7fe ff42 	bl	8000270 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4640      	mov	r0, r8
 80013f2:	4649      	mov	r1, r9
 80013f4:	f7ff f86c 	bl	80004d0 <__adddf3>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff faa4 	bl	800094c <__aeabi_d2f>
 8001404:	4603      	mov	r3, r0
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <KalmanFilter_Y+0x104>)
 8001408:	6013      	str	r3, [r2, #0]
	last_estimate_y = current_estimate_y;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <KalmanFilter_Y+0x114>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <KalmanFilter_Y+0x110>)
 8001410:	6013      	str	r3, [r2, #0]
	return current_estimate_y;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <KalmanFilter_Y+0x114>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	ee07 3a90 	vmov	s15, r3
}
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001426:	bf00      	nop
 8001428:	2000001c 	.word	0x2000001c
 800142c:	20000020 	.word	0x20000020
 8001430:	20000af0 	.word	0x20000af0
 8001434:	20000af4 	.word	0x20000af4
 8001438:	20000b08 	.word	0x20000b08
 800143c:	3ff00000 	.word	0x3ff00000
 8001440:	20000024 	.word	0x20000024

08001444 <KalmanFilter_Z>:

float kalman_gain_z,err_est_z,err_mea_z, current_estimate_z,last_estimate_z, proc_noise_z;
float err_est_z = KAL_ERROR_ESTIMATED; float err_mea_z = KAL_ERROR_MEASUREMENT; float proc_noise_z = KAL_NOISE_PROCESS;

float KalmanFilter_Z(float mea_z)
{
 8001444:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	ed87 0a01 	vstr	s0, [r7, #4]
	kalman_gain_z = err_est_z/(err_est_z + err_mea_z) ;
 8001450:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <KalmanFilter_Z+0x104>)
 8001452:	edd3 6a00 	vldr	s13, [r3]
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <KalmanFilter_Z+0x104>)
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <KalmanFilter_Z+0x108>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <KalmanFilter_Z+0x10c>)
 800146c:	edc3 7a00 	vstr	s15, [r3]
	current_estimate_z = last_estimate_z + kalman_gain_z*(mea_z-last_estimate_z);
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <KalmanFilter_Z+0x110>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	ed97 7a01 	vldr	s14, [r7, #4]
 800147a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <KalmanFilter_Z+0x10c>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	4b32      	ldr	r3, [pc, #200]	; (8001554 <KalmanFilter_Z+0x110>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <KalmanFilter_Z+0x114>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
	err_est_z = (1.0-kalman_gain_z)*err_est_z + fabs(last_estimate_z-current_estimate_z)*proc_noise_z;
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <KalmanFilter_Z+0x10c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f975 	bl	800078c <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	f04f 0000 	mov.w	r0, #0
 80014aa:	492c      	ldr	r1, [pc, #176]	; (800155c <KalmanFilter_Z+0x118>)
 80014ac:	f7ff f80e 	bl	80004cc <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4614      	mov	r4, r2
 80014b6:	461d      	mov	r5, r3
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <KalmanFilter_Z+0x104>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f965 	bl	800078c <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7fe fed1 	bl	8000270 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4690      	mov	r8, r2
 80014d4:	4699      	mov	r9, r3
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <KalmanFilter_Z+0x110>)
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <KalmanFilter_Z+0x114>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ea:	ee17 0a90 	vmov	r0, s15
 80014ee:	f7ff f94d 	bl	800078c <__aeabi_f2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <KalmanFilter_Z+0x11c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f946 	bl	800078c <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7fe feb2 	bl	8000270 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4640      	mov	r0, r8
 8001512:	4649      	mov	r1, r9
 8001514:	f7fe ffdc 	bl	80004d0 <__adddf3>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fa14 	bl	800094c <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <KalmanFilter_Z+0x104>)
 8001528:	6013      	str	r3, [r2, #0]
	last_estimate_z = current_estimate_z;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <KalmanFilter_Z+0x114>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <KalmanFilter_Z+0x110>)
 8001530:	6013      	str	r3, [r2, #0]
	return current_estimate_z;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <KalmanFilter_Z+0x114>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	ee07 3a90 	vmov	s15, r3
}
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001546:	bf00      	nop
 8001548:	20000028 	.word	0x20000028
 800154c:	2000002c 	.word	0x2000002c
 8001550:	20000adc 	.word	0x20000adc
 8001554:	20000d20 	.word	0x20000d20
 8001558:	20000970 	.word	0x20000970
 800155c:	3ff00000 	.word	0x3ff00000
 8001560:	20000030 	.word	0x20000030
 8001564:	00000000 	.word	0x00000000

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800156c:	b08e      	sub	sp, #56	; 0x38
 800156e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f000 fdac 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 faae 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 fb8a 	bl	8001c90 <MX_GPIO_Init>
  MX_SPI1_Init();
 800157c:	f000 fb28 	bl	8001bd0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001580:	f000 fb5c 	bl	8001c3c <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001584:	f000 fb10 	bl	8001ba8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	733b      	strb	r3, [r7, #12]
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 800158c:	2308      	movs	r3, #8
 800158e:	737b      	strb	r3, [r7, #13]
	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	73bb      	strb	r3, [r7, #14]
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001594:	2307      	movs	r3, #7
 8001596:	73fb      	strb	r3, [r7, #15]
	myAccConfigDef.interruptEnable = true;
 8001598:	2301      	movs	r3, #1
 800159a:	743b      	strb	r3, [r7, #16]
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	48b5      	ldr	r0, [pc, #724]	; (8001878 <main+0x310>)
 80015a4:	f7ff fc0e 	bl	8000dc4 <LIS3DSH_Init>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 80015a8:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800187c <main+0x314>
 80015ac:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8001880 <main+0x318>
 80015b0:	f7ff fd9e 	bl	80010f0 <LIS3DSH_X_calibrate>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 80015b4:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8001884 <main+0x31c>
 80015b8:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8001888 <main+0x320>
 80015bc:	f7ff fdc6 	bl	800114c <LIS3DSH_Y_calibrate>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 80015c0:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8001884 <main+0x31c>
 80015c4:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 800188c <main+0x324>
 80015c8:	f7ff fdee 	bl	80011a8 <LIS3DSH_Z_calibrate>
	//Yapay Sinir Ağı



	  /** @brief Initialize network */
	    const ai_handle acts[] = { activations };
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <main+0x328>)
 80015ce:	60bb      	str	r3, [r7, #8]
	    err = ai_gesture_create_and_init(&network, acts, NULL);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	48ae      	ldr	r0, [pc, #696]	; (8001894 <main+0x32c>)
 80015da:	f002 ff7b 	bl	80044d4 <ai_gesture_create_and_init>
 80015de:	4603      	mov	r3, r0
 80015e0:	4aad      	ldr	r2, [pc, #692]	; (8001898 <main+0x330>)
 80015e2:	6013      	str	r3, [r2, #0]
	    if (err.type != AI_ERROR_NONE) {
 80015e4:	4bac      	ldr	r3, [pc, #688]	; (8001898 <main+0x330>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <main+0x90>
	        printf("ai init_and_create error\n");
 80015ec:	48ab      	ldr	r0, [pc, #684]	; (800189c <main+0x334>)
 80015ee:	f005 fdf1 	bl	80071d4 <puts>
	        return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e245      	b.n	8001a84 <main+0x51c>
	    }

	    /** @brief {optional} for debug/log purpose */
	    if (ai_gesture_get_report(network, &report) != true) {
 80015f8:	4ba6      	ldr	r3, [pc, #664]	; (8001894 <main+0x32c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	49a8      	ldr	r1, [pc, #672]	; (80018a0 <main+0x338>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fee0 	bl	80043c4 <ai_gesture_get_report>
 8001604:	4603      	mov	r3, r0
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <main+0xb4>
	        printf("ai get report error\n");
 8001610:	48a4      	ldr	r0, [pc, #656]	; (80018a4 <main+0x33c>)
 8001612:	f005 fddf 	bl	80071d4 <puts>
	        return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e233      	b.n	8001a84 <main+0x51c>
	    }

	    printf("Model name      : %s\n", report.model_name);
 800161c:	4ba0      	ldr	r3, [pc, #640]	; (80018a0 <main+0x338>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	48a1      	ldr	r0, [pc, #644]	; (80018a8 <main+0x340>)
 8001624:	f005 fd50 	bl	80070c8 <iprintf>
	    printf("Model signature : %s\n", report.model_signature);
 8001628:	4b9d      	ldr	r3, [pc, #628]	; (80018a0 <main+0x338>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4619      	mov	r1, r3
 800162e:	489f      	ldr	r0, [pc, #636]	; (80018ac <main+0x344>)
 8001630:	f005 fd4a 	bl	80070c8 <iprintf>

	    ai_input = &report.inputs[0];
 8001634:	4b9a      	ldr	r3, [pc, #616]	; (80018a0 <main+0x338>)
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	4a9d      	ldr	r2, [pc, #628]	; (80018b0 <main+0x348>)
 800163a:	6013      	str	r3, [r2, #0]
	    ai_output = &report.outputs[0];
 800163c:	4b98      	ldr	r3, [pc, #608]	; (80018a0 <main+0x338>)
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	4a9c      	ldr	r2, [pc, #624]	; (80018b4 <main+0x34c>)
 8001642:	6013      	str	r3, [r2, #0]
	    printf("input[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 8001644:	4b9a      	ldr	r3, [pc, #616]	; (80018b0 <main+0x348>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	330c      	adds	r3, #12
 800164c:	6819      	ldr	r1, [r3, #0]
	                                        AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_WIDTH),
 800164e:	4b98      	ldr	r3, [pc, #608]	; (80018b0 <main+0x348>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	3308      	adds	r3, #8
	    printf("input[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 8001656:	681a      	ldr	r2, [r3, #0]
	                                        AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_CHANNEL));
 8001658:	4b95      	ldr	r3, [pc, #596]	; (80018b0 <main+0x348>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	3304      	adds	r3, #4
	    printf("input[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_input, AI_SHAPE_HEIGHT),
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4895      	ldr	r0, [pc, #596]	; (80018b8 <main+0x350>)
 8001664:	f005 fd30 	bl	80070c8 <iprintf>
	    printf("output[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 8001668:	4b92      	ldr	r3, [pc, #584]	; (80018b4 <main+0x34c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	330c      	adds	r3, #12
 8001670:	6819      	ldr	r1, [r3, #0]
	                                         AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_WIDTH),
 8001672:	4b90      	ldr	r3, [pc, #576]	; (80018b4 <main+0x34c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	3308      	adds	r3, #8
	    printf("output[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 800167a:	681a      	ldr	r2, [r3, #0]
	                                         AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_CHANNEL));
 800167c:	4b8d      	ldr	r3, [pc, #564]	; (80018b4 <main+0x34c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	3304      	adds	r3, #4
	    printf("output[0] : (%d, %d, %d)\n", AI_BUFFER_SHAPE_ELEM(ai_output, AI_SHAPE_HEIGHT),
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	488d      	ldr	r0, [pc, #564]	; (80018bc <main+0x354>)
 8001688:	f005 fd1e 	bl	80070c8 <iprintf>

	    /** @brief Fill input buffer with random values */
	    srand(1);
 800168c:	2001      	movs	r0, #1
 800168e:	f005 fda9 	bl	80071e4 <srand>
	    for (int i = 0; i < AI_GESTURE_IN_1_SIZE; i++) {
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	e01a      	b.n	80016ce <main+0x166>
	        in_data[i] = rand() % 0xFFFF;
 8001698:	f005 fdd2 	bl	8007240 <rand>
 800169c:	4602      	mov	r2, r0
 800169e:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <main+0x358>)
 80016a0:	fb83 1302 	smull	r1, r3, r3, r2
 80016a4:	4413      	add	r3, r2
 80016a6:	13d9      	asrs	r1, r3, #15
 80016a8:	17d3      	asrs	r3, r2, #31
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	460b      	mov	r3, r1
 80016ae:	041b      	lsls	r3, r3, #16
 80016b0:	1a5b      	subs	r3, r3, r1
 80016b2:	1ad1      	subs	r1, r2, r3
 80016b4:	ee07 1a90 	vmov	s15, r1
 80016b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016bc:	4a81      	ldr	r2, [pc, #516]	; (80018c4 <main+0x35c>)
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < AI_GESTURE_IN_1_SIZE; i++) {
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	2b4a      	cmp	r3, #74	; 0x4a
 80016d2:	dde1      	ble.n	8001698 <main+0x130>
	    /** @brief Create the AI buffer IO handlers
	     *  @note  ai_inuput/ai_output are already initilaized after the
	     *         ai_network_get_report() call. This is just here to illustrate
	     *         the case where get_report() is not called.
	     */
	    ai_input = ai_gesture_inputs_get(network, NULL);
 80016d4:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <main+0x32c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 ff6e 	bl	80045bc <ai_gesture_inputs_get>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a73      	ldr	r2, [pc, #460]	; (80018b0 <main+0x348>)
 80016e4:	6013      	str	r3, [r2, #0]
	    ai_output = ai_gesture_outputs_get(network, NULL);
 80016e6:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <main+0x32c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 ff7f 	bl	80045f0 <ai_gesture_outputs_get>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a6f      	ldr	r2, [pc, #444]	; (80018b4 <main+0x34c>)
 80016f6:	6013      	str	r3, [r2, #0]

	    /** @brief Set input/output buffer addresses */
	    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80016f8:	4b6d      	ldr	r3, [pc, #436]	; (80018b0 <main+0x348>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a71      	ldr	r2, [pc, #452]	; (80018c4 <main+0x35c>)
 80016fe:	605a      	str	r2, [r3, #4]
	    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001700:	4b6c      	ldr	r3, [pc, #432]	; (80018b4 <main+0x34c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a70      	ldr	r2, [pc, #448]	; (80018c8 <main+0x360>)
 8001706:	605a      	str	r2, [r3, #4]
int firstInData = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(drdyFlag == 1)
 800170c:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <main+0x364>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	f040 8168 	bne.w	80019e6 <main+0x47e>
		{
			drdyFlag = 0;
 8001716:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <main+0x364>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			myData = LIS3DSH_GetDataScaled();
 800171c:	f7ff fc66 	bl	8000fec <LIS3DSH_GetDataScaled>
 8001720:	eef0 6a40 	vmov.f32	s13, s0
 8001724:	eeb0 7a60 	vmov.f32	s14, s1
 8001728:	eef0 7a41 	vmov.f32	s15, s2
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <main+0x368>)
 800172e:	edc3 6a00 	vstr	s13, [r3]
 8001732:	ed83 7a01 	vstr	s14, [r3, #4]
 8001736:	edc3 7a02 	vstr	s15, [r3, #8]
			myDataRaw = LIS3DSH_GetDataRaw();
 800173a:	4c66      	ldr	r4, [pc, #408]	; (80018d4 <main+0x36c>)
 800173c:	463b      	mov	r3, r7
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc10 	bl	8000f64 <LIS3DSH_GetDataRaw>
 8001744:	4622      	mov	r2, r4
 8001746:	463b      	mov	r3, r7
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	6011      	str	r1, [r2, #0]
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	8093      	strh	r3, [r2, #4]
	  			sendData[5] = 5;
	  			sendData[6] = 5;
	  			sendData[7] = 5;

			 */
			kal_a_x=KalmanFilter_X(myDataRaw.x);
 8001750:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <main+0x36c>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	f7ff fd4f 	bl	8001204 <KalmanFilter_X>
 8001766:	eef0 7a40 	vmov.f32	s15, s0
 800176a:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <main+0x370>)
 800176c:	edc3 7a00 	vstr	s15, [r3]
			kal_a_y=KalmanFilter_Y(myDataRaw.y);
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <main+0x36c>)
 8001772:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	f7ff fdcf 	bl	8001324 <KalmanFilter_Y>
 8001786:	eef0 7a40 	vmov.f32	s15, s0
 800178a:	4b54      	ldr	r3, [pc, #336]	; (80018dc <main+0x374>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
			kal_a_z=KalmanFilter_Z(myDataRaw.z);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <main+0x36c>)
 8001792:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	f7ff fe4f 	bl	8001444 <KalmanFilter_Z>
 80017a6:	eef0 7a40 	vmov.f32	s15, s0
 80017aa:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <main+0x378>)
 80017ac:	edc3 7a00 	vstr	s15, [r3]
			//kalmansız veriler
			//sprintf(text,"x%06dy%06dz%06d\r\n",myDataRaw.x,myDataRaw.y,myDataRaw.z);
			//kalman filtreli veri
			sprintf(text,"x%06dy%06dz%06d\r\n",kal_a_x,kal_a_y,kal_a_z);
 80017b0:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <main+0x370>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe ffe9 	bl	800078c <__aeabi_f2d>
 80017ba:	4680      	mov	r8, r0
 80017bc:	4689      	mov	r9, r1
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <main+0x374>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe ffe2 	bl	800078c <__aeabi_f2d>
 80017c8:	4604      	mov	r4, r0
 80017ca:	460d      	mov	r5, r1
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <main+0x378>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ffdb 	bl	800078c <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017de:	e9cd 4500 	strd	r4, r5, [sp]
 80017e2:	4642      	mov	r2, r8
 80017e4:	464b      	mov	r3, r9
 80017e6:	493f      	ldr	r1, [pc, #252]	; (80018e4 <main+0x37c>)
 80017e8:	483f      	ldr	r0, [pc, #252]	; (80018e8 <main+0x380>)
 80017ea:	f005 fd79 	bl	80072e0 <siprintf>
			HAL_UART_Transmit(&huart3,text, 23, 10);
 80017ee:	230a      	movs	r3, #10
 80017f0:	2217      	movs	r2, #23
 80017f2:	493d      	ldr	r1, [pc, #244]	; (80018e8 <main+0x380>)
 80017f4:	483d      	ldr	r0, [pc, #244]	; (80018ec <main+0x384>)
 80017f6:	f002 fa40 	bl	8003c7a <HAL_UART_Transmit>


			if(firstInData< AI_GESTURE_IN_1_SIZE)
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	2b4a      	cmp	r3, #74	; 0x4a
 80017fe:	dc38      	bgt.n	8001872 <main+0x30a>
			{
				in_data[firstInData] = (kal_a_x+10000)/20000;
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <main+0x370>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80018f0 <main+0x388>
 800180a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800180e:	eddf 6a39 	vldr	s13, [pc, #228]	; 80018f4 <main+0x38c>
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <main+0x35c>)
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	edc3 7a00 	vstr	s15, [r3]
				in_data[firstInData+1] = (kal_a_y+10000)/20000;
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <main+0x374>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80018f0 <main+0x388>
 800182c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	3301      	adds	r3, #1
 8001834:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80018f4 <main+0x38c>
 8001838:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <main+0x35c>)
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	edc3 7a00 	vstr	s15, [r3]
				in_data[firstInData+2] = (kal_a_z+10000)/20000;
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <main+0x378>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80018f0 <main+0x388>
 8001850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	3302      	adds	r3, #2
 8001858:	eddf 6a26 	vldr	s13, [pc, #152]	; 80018f4 <main+0x38c>
 800185c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <main+0x35c>)
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	edc3 7a00 	vstr	s15, [r3]
				firstInData = firstInData+3;
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	3303      	adds	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	e0b9      	b.n	80019e6 <main+0x47e>
			}

			else{

				for(int i=0; i<AI_GESTURE_IN_1_SIZE-3;i++)
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e04d      	b.n	8001914 <main+0x3ac>
 8001878:	20000c38 	.word	0x20000c38
 800187c:	44750000 	.word	0x44750000
 8001880:	c47a0000 	.word	0xc47a0000
 8001884:	44820000 	.word	0x44820000
 8001888:	c47f0000 	.word	0xc47f0000
 800188c:	c4660000 	.word	0xc4660000
 8001890:	20000974 	.word	0x20000974
 8001894:	20000854 	.word	0x20000854
 8001898:	20000aec 	.word	0x20000aec
 800189c:	08008760 	.word	0x08008760
 80018a0:	20000c90 	.word	0x20000c90
 80018a4:	0800877c 	.word	0x0800877c
 80018a8:	08008790 	.word	0x08008790
 80018ac:	080087a8 	.word	0x080087a8
 80018b0:	200008f0 	.word	0x200008f0
 80018b4:	200008f4 	.word	0x200008f4
 80018b8:	080087c0 	.word	0x080087c0
 80018bc:	080087dc 	.word	0x080087dc
 80018c0:	80008001 	.word	0x80008001
 80018c4:	20000b0c 	.word	0x20000b0c
 80018c8:	20000d14 	.word	0x20000d14
 80018cc:	20000850 	.word	0x20000850
 80018d0:	20000ae0 	.word	0x20000ae0
 80018d4:	20000d0c 	.word	0x20000d0c
 80018d8:	2000094c 	.word	0x2000094c
 80018dc:	20000948 	.word	0x20000948
 80018e0:	20000954 	.word	0x20000954
 80018e4:	080087f8 	.word	0x080087f8
 80018e8:	20000958 	.word	0x20000958
 80018ec:	200008fc 	.word	0x200008fc
 80018f0:	461c4000 	.word	0x461c4000
 80018f4:	469c4000 	.word	0x469c4000
				{

					in_data[i] = in_data[i+3];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3303      	adds	r3, #3
 80018fc:	4a66      	ldr	r2, [pc, #408]	; (8001a98 <main+0x530>)
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4964      	ldr	r1, [pc, #400]	; (8001a98 <main+0x530>)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	601a      	str	r2, [r3, #0]
				for(int i=0; i<AI_GESTURE_IN_1_SIZE-3;i++)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3301      	adds	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	2b47      	cmp	r3, #71	; 0x47
 8001918:	ddee      	ble.n	80018f8 <main+0x390>

				}

			in_data[AI_GESTURE_IN_1_SIZE-3] = (kal_a_x+10000)/20000;
 800191a:	4b60      	ldr	r3, [pc, #384]	; (8001a9c <main+0x534>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001aa0 <main+0x538>
 8001924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001928:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001aa4 <main+0x53c>
 800192c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001930:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <main+0x530>)
 8001932:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
			in_data[AI_GESTURE_IN_1_SIZE-2] = (kal_a_y+10000)/20000;
 8001936:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <main+0x540>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001aa0 <main+0x538>
 8001940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001944:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001aa4 <main+0x53c>
 8001948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194c:	4b52      	ldr	r3, [pc, #328]	; (8001a98 <main+0x530>)
 800194e:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
			in_data[AI_GESTURE_IN_1_SIZE-1] = (kal_a_z+10000)/20000;
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <main+0x544>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001aa0 <main+0x538>
 800195c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001960:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001aa4 <main+0x53c>
 8001964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001968:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <main+0x530>)
 800196a:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128



		    /** @brief Perform the inference */

		    n_batch = ai_gesture_run(network, &ai_input[0], &ai_output[0]);
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <main+0x548>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <main+0x54c>)
 8001974:	6811      	ldr	r1, [r2, #0]
 8001976:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <main+0x550>)
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fe8e 	bl	800469c <ai_gesture_run>
 8001980:	6178      	str	r0, [r7, #20]
		    if (n_batch != 1) {
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d015      	beq.n	80019b4 <main+0x44c>
		        err = ai_gesture_get_error(network);
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <main+0x548>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fd7f 	bl	8004490 <ai_gesture_get_error>
 8001992:	4603      	mov	r3, r0
 8001994:	4a49      	ldr	r2, [pc, #292]	; (8001abc <main+0x554>)
 8001996:	6013      	str	r3, [r2, #0]
		        printf("ai run error %d, %d\n", err.type, err.code);
 8001998:	4b48      	ldr	r3, [pc, #288]	; (8001abc <main+0x554>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <main+0x554>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80019a6:	461a      	mov	r2, r3
 80019a8:	4845      	ldr	r0, [pc, #276]	; (8001ac0 <main+0x558>)
 80019aa:	f005 fb8d 	bl	80070c8 <iprintf>
		      return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e067      	b.n	8001a84 <main+0x51c>
		    }


		    /** @brief Post-process the output results/predictions */
		    printf("Inference output..\n");
 80019b4:	4843      	ldr	r0, [pc, #268]	; (8001ac4 <main+0x55c>)
 80019b6:	f005 fc0d 	bl	80071d4 <puts>
		    for (int i = 0; i < AI_GESTURE_OUT_1_SIZE; i++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	e00f      	b.n	80019e0 <main+0x478>
		        printf("%d,", out_data[i]);
 80019c0:	4a41      	ldr	r2, [pc, #260]	; (8001ac8 <main+0x560>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fede 	bl	800078c <__aeabi_f2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	483d      	ldr	r0, [pc, #244]	; (8001acc <main+0x564>)
 80019d6:	f005 fb77 	bl	80070c8 <iprintf>
		    for (int i = 0; i < AI_GESTURE_OUT_1_SIZE; i++) {
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	3301      	adds	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	ddec      	ble.n	80019c0 <main+0x458>
			}


		}

if(out_data[0]>0.9)
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <main+0x560>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fece 	bl	800078c <__aeabi_f2d>
 80019f0:	a327      	add	r3, pc, #156	; (adr r3, 8001a90 <main+0x528>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe ff9f 	bl	8000938 <__aeabi_dcmpgt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <main+0x4a6>
{
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a06:	4832      	ldr	r0, [pc, #200]	; (8001ad0 <main+0x568>)
 8001a08:	f000 fe9c 	bl	8002744 <HAL_GPIO_WritePin>
 8001a0c:	e005      	b.n	8001a1a <main+0x4b2>
}
else
{
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a14:	482e      	ldr	r0, [pc, #184]	; (8001ad0 <main+0x568>)
 8001a16:	f000 fe95 	bl	8002744 <HAL_GPIO_WritePin>
}
if(out_data[1]>0.9)
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <main+0x560>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe feb4 	bl	800078c <__aeabi_f2d>
 8001a24:	a31a      	add	r3, pc, #104	; (adr r3, 8001a90 <main+0x528>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe ff85 	bl	8000938 <__aeabi_dcmpgt>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <main+0x4da>
{
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3a:	4825      	ldr	r0, [pc, #148]	; (8001ad0 <main+0x568>)
 8001a3c:	f000 fe82 	bl	8002744 <HAL_GPIO_WritePin>
 8001a40:	e005      	b.n	8001a4e <main+0x4e6>
}
else
{
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a48:	4821      	ldr	r0, [pc, #132]	; (8001ad0 <main+0x568>)
 8001a4a:	f000 fe7b 	bl	8002744 <HAL_GPIO_WritePin>
}
if(out_data[2]>0.9)
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <main+0x560>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fe9a 	bl	800078c <__aeabi_f2d>
 8001a58:	a30d      	add	r3, pc, #52	; (adr r3, 8001a90 <main+0x528>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe ff6b 	bl	8000938 <__aeabi_dcmpgt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <main+0x50e>
{
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6e:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <main+0x568>)
 8001a70:	f000 fe68 	bl	8002744 <HAL_GPIO_WritePin>
 8001a74:	e64a      	b.n	800170c <main+0x1a4>
}
else
{
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7c:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <main+0x568>)
 8001a7e:	f000 fe61 	bl	8002744 <HAL_GPIO_WritePin>
		if(drdyFlag == 1)
 8001a82:	e643      	b.n	800170c <main+0x1a4>
		//HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_SET);


	}
  /* USER CODE END 3 */
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3728      	adds	r7, #40	; 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a8e:	bf00      	nop
 8001a90:	cccccccd 	.word	0xcccccccd
 8001a94:	3feccccc 	.word	0x3feccccc
 8001a98:	20000b0c 	.word	0x20000b0c
 8001a9c:	2000094c 	.word	0x2000094c
 8001aa0:	461c4000 	.word	0x461c4000
 8001aa4:	469c4000 	.word	0x469c4000
 8001aa8:	20000948 	.word	0x20000948
 8001aac:	20000954 	.word	0x20000954
 8001ab0:	20000854 	.word	0x20000854
 8001ab4:	200008f0 	.word	0x200008f0
 8001ab8:	200008f4 	.word	0x200008f4
 8001abc:	20000aec 	.word	0x20000aec
 8001ac0:	0800880c 	.word	0x0800880c
 8001ac4:	08008824 	.word	0x08008824
 8001ac8:	20000d14 	.word	0x20000d14
 8001acc:	08008838 	.word	0x08008838
 8001ad0:	40020c00 	.word	0x40020c00

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b094      	sub	sp, #80	; 0x50
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	2230      	movs	r2, #48	; 0x30
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f005 fa3e 	bl	8006f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b44:	2304      	movs	r3, #4
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b48:	23a8      	movs	r3, #168	; 0xa8
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b50:	2307      	movs	r3, #7
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0320 	add.w	r3, r7, #32
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fe25 	bl	80027a8 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b64:	f000 f92e 	bl	8001dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
 8001b6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2105      	movs	r1, #5
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 f886 	bl	8002c98 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b92:	f000 f917 	bl	8001dc4 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3750      	adds	r7, #80	; 0x50
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_CRC_Init+0x20>)
 8001bae:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <MX_CRC_Init+0x24>)
 8001bb0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_CRC_Init+0x20>)
 8001bb4:	f000 fc0d 	bl	80023d2 <HAL_CRC_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001bbe:	f000 f901 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000940 	.word	0x20000940
 8001bcc:	40023000 	.word	0x40023000

08001bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bd6:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c04:	2210      	movs	r2, #16
 8001c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c1c:	220a      	movs	r2, #10
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c22:	f001 fa35 	bl	8003090 <HAL_SPI_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c2c:	f000 f8ca 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000c38 	.word	0x20000c38
 8001c38:	40013000 	.word	0x40013000

08001c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <MX_USART3_UART_Init+0x50>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c74:	f001 ffb4 	bl	8003be0 <HAL_UART_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c7e:	f000 f8a1 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200008fc 	.word	0x200008fc
 8001c8c:	40004800 	.word	0x40004800

08001c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <MX_GPIO_Init+0x108>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2108      	movs	r1, #8
 8001d1a:	4820      	ldr	r0, [pc, #128]	; (8001d9c <MX_GPIO_Init+0x10c>)
 8001d1c:	f000 fd12 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001d26:	481e      	ldr	r0, [pc, #120]	; (8001da0 <MX_GPIO_Init+0x110>)
 8001d28:	f000 fd0c 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4816      	ldr	r0, [pc, #88]	; (8001d9c <MX_GPIO_Init+0x10c>)
 8001d44:	f000 fb62 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d48:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480f      	ldr	r0, [pc, #60]	; (8001da0 <MX_GPIO_Init+0x110>)
 8001d62:	f000 fb53 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d66:	2301      	movs	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4808      	ldr	r0, [pc, #32]	; (8001d9c <MX_GPIO_Init+0x10c>)
 8001d7c:	f000 fb46 	bl	800240c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2006      	movs	r0, #6
 8001d86:	f000 faee 	bl	8002366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d8a:	2006      	movs	r0, #6
 8001d8c:	f000 fb07 	bl	800239e <HAL_NVIC_EnableIRQ>

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40020c00 	.word	0x40020c00

08001da4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */

	drdyFlag = 1;
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	20000850 	.word	0x20000850

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e0e:	2007      	movs	r0, #7
 8001e10:	f000 fa9e 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_CRC_MspInit+0x3c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10d      	bne.n	8001e4e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_CRC_MspInit+0x40>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_CRC_MspInit+0x40>)
 8001e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_CRC_MspInit+0x40>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023000 	.word	0x40023000
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_SPI_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12b      	bne.n	8001ede <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_SPI_MspInit+0x88>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_SPI_MspInit+0x88>)
 8001e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_SPI_MspInit+0x88>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_SPI_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_SPI_MspInit+0x88>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_SPI_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ebe:	23e0      	movs	r3, #224	; 0xe0
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_SPI_MspInit+0x8c>)
 8001eda:	f000 fa97 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40013000 	.word	0x40013000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x84>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12c      	bne.n	8001f70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_UART_MspInit+0x88>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_UART_MspInit+0x88>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_UART_MspInit+0x88>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_UART_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_UART_MspInit+0x88>)
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_UART_MspInit+0x88>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f60:	2307      	movs	r3, #7
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_UART_MspInit+0x8c>)
 8001f6c:	f000 fa4e 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40004800 	.word	0x40004800
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020c00 	.word	0x40020c00

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <NMI_Handler+0x4>

08001f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <MemManage_Handler+0x4>

08001f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd0:	f000 f8ce 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f000 fbcb 	bl	8002778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <_sbrk+0x5c>)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <_sbrk+0x60>)
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <_sbrk+0x64>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <_sbrk+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d207      	bcs.n	8002028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002018:	f004 ff64 	bl	8006ee4 <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	220c      	movs	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e009      	b.n	800203c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <_sbrk+0x64>)
 8002038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	2001c000 	.word	0x2001c000
 8002048:	00000800 	.word	0x00000800
 800204c:	20000858 	.word	0x20000858
 8002050:	20000d38 	.word	0x20000d38

08002054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800207e:	490e      	ldr	r1, [pc, #56]	; (80020b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002094:	4c0b      	ldr	r4, [pc, #44]	; (80020c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020a2:	f7ff ffd7 	bl	8002054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a6:	f004 ff23 	bl	8006ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020aa:	f7ff fa5d 	bl	8001568 <main>
  bx  lr    
 80020ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020b0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	200007d0 	.word	0x200007d0
  ldr r2, =_sidata
 80020bc:	0800f664 	.word	0x0800f664
  ldr r2, =_sbss
 80020c0:	200007d0 	.word	0x200007d0
  ldr r4, =_ebss
 80020c4:	20000d38 	.word	0x20000d38

080020c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_Init+0x40>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_Init+0x40>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_Init+0x40>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 f92b 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fe66 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023c00 	.word	0x40023c00

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f943 	bl	80023ba <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 f90b 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000034 	.word	0x20000034
 8002168:	2000003c 	.word	0x2000003c
 800216c:	20000038 	.word	0x20000038

08002170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	2000003c 	.word	0x2000003c
 8002194:	20000d24 	.word	0x20000d24

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000d24 	.word	0x20000d24

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <__NVIC_EnableIRQ+0x38>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f7ff ff8e 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	; (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff29 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff3e 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff8e 	bl	80022a4 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5d 	bl	8002250 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff31 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e00e      	b.n	8002402 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	795b      	ldrb	r3, [r3, #5]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fd13 	bl	8001e20 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e16b      	b.n	8002700 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	f040 815a 	bne.w	80026fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d005      	beq.n	800245e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245a:	2b02      	cmp	r3, #2
 800245c:	d130      	bne.n	80024c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0201 	and.w	r2, r3, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d017      	beq.n	80024fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d123      	bne.n	8002550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80b4 	beq.w	80026fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b60      	ldr	r3, [pc, #384]	; (8002718 <HAL_GPIO_Init+0x30c>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a5f      	ldr	r2, [pc, #380]	; (8002718 <HAL_GPIO_Init+0x30c>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_GPIO_Init+0x30c>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ae:	4a5b      	ldr	r2, [pc, #364]	; (800271c <HAL_GPIO_Init+0x310>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_GPIO_Init+0x314>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d02b      	beq.n	8002632 <HAL_GPIO_Init+0x226>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a51      	ldr	r2, [pc, #324]	; (8002724 <HAL_GPIO_Init+0x318>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d025      	beq.n	800262e <HAL_GPIO_Init+0x222>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a50      	ldr	r2, [pc, #320]	; (8002728 <HAL_GPIO_Init+0x31c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01f      	beq.n	800262a <HAL_GPIO_Init+0x21e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	; (800272c <HAL_GPIO_Init+0x320>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x21a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4e      	ldr	r2, [pc, #312]	; (8002730 <HAL_GPIO_Init+0x324>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x216>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4d      	ldr	r2, [pc, #308]	; (8002734 <HAL_GPIO_Init+0x328>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x212>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4c      	ldr	r2, [pc, #304]	; (8002738 <HAL_GPIO_Init+0x32c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x20e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <HAL_GPIO_Init+0x330>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x20a>
 8002612:	2307      	movs	r3, #7
 8002614:	e00e      	b.n	8002634 <HAL_GPIO_Init+0x228>
 8002616:	2308      	movs	r3, #8
 8002618:	e00c      	b.n	8002634 <HAL_GPIO_Init+0x228>
 800261a:	2306      	movs	r3, #6
 800261c:	e00a      	b.n	8002634 <HAL_GPIO_Init+0x228>
 800261e:	2305      	movs	r3, #5
 8002620:	e008      	b.n	8002634 <HAL_GPIO_Init+0x228>
 8002622:	2304      	movs	r3, #4
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x228>
 8002626:	2303      	movs	r3, #3
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x228>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x228>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x228>
 8002632:	2300      	movs	r3, #0
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f002 0203 	and.w	r2, r2, #3
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4093      	lsls	r3, r2
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002644:	4935      	ldr	r1, [pc, #212]	; (800271c <HAL_GPIO_Init+0x310>)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_GPIO_Init+0x334>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002676:	4a32      	ldr	r2, [pc, #200]	; (8002740 <HAL_GPIO_Init+0x334>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_GPIO_Init+0x334>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <HAL_GPIO_Init+0x334>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_GPIO_Init+0x334>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_GPIO_Init+0x334>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_GPIO_Init+0x334>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f4:	4a12      	ldr	r2, [pc, #72]	; (8002740 <HAL_GPIO_Init+0x334>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b0f      	cmp	r3, #15
 8002704:	f67f ae90 	bls.w	8002428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40013800 	.word	0x40013800
 8002720:	40020000 	.word	0x40020000
 8002724:	40020400 	.word	0x40020400
 8002728:	40020800 	.word	0x40020800
 800272c:	40020c00 	.word	0x40020c00
 8002730:	40021000 	.word	0x40021000
 8002734:	40021400 	.word	0x40021400
 8002738:	40021800 	.word	0x40021800
 800273c:	40021c00 	.word	0x40021c00
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fb04 	bl	8001da4 <HAL_GPIO_EXTI_Callback>
  }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e264      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d075      	beq.n	80028b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c6:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d00c      	beq.n	80027ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4ba0      	ldr	r3, [pc, #640]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b9d      	ldr	r3, [pc, #628]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b99      	ldr	r3, [pc, #612]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x108>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d157      	bne.n	80028b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e23f      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x74>
 800280e:	4b91      	ldr	r3, [pc, #580]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a90      	ldr	r2, [pc, #576]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002826:	4b8b      	ldr	r3, [pc, #556]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a8a      	ldr	r2, [pc, #552]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a87      	ldr	r2, [pc, #540]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 8002840:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a83      	ldr	r2, [pc, #524]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fc9a 	bl	8002198 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff fc96 	bl	8002198 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e204      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xc0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff fc86 	bl	8002198 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff fc82 	bl	8002198 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1f0      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0xe8>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b5f      	ldr	r3, [pc, #380]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c4      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4952      	ldr	r1, [pc, #328]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCC_OscConfig+0x2b0>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7ff fc3b 	bl	8002198 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fc37 	bl	8002198 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a5      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4940      	ldr	r1, [pc, #256]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <HAL_RCC_OscConfig+0x2b0>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff fc1a 	bl	8002198 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002968:	f7ff fc16 	bl	8002198 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e184      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d030      	beq.n	80029f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_RCC_OscConfig+0x2b4>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7ff fbfa 	bl	8002198 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7ff fbf6 	bl	8002198 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e164      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x200>
 80029c6:	e015      	b.n	80029f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_OscConfig+0x2b4>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7ff fbe3 	bl	8002198 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d6:	f7ff fbdf 	bl	8002198 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e14d      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a0 	beq.w	8002b42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_OscConfig+0x2b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d121      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_OscConfig+0x2b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_RCC_OscConfig+0x2b8>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7ff fba5 	bl	8002198 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	e011      	b.n	8002a76 <HAL_RCC_OscConfig+0x2ce>
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
 8002a60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7ff fb98 	bl	8002198 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e106      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <HAL_RCC_OscConfig+0x4e4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2f0>
 8002a8a:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a80      	ldr	r2, [pc, #512]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	e01c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x32a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x312>
 8002aa0:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a77      	ldr	r2, [pc, #476]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	e00b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x32a>
 8002aba:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a74      	ldr	r2, [pc, #464]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a71      	ldr	r2, [pc, #452]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7ff fb5d 	bl	8002198 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7ff fb59 	bl	8002198 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0c5      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ee      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x33a>
 8002b04:	e014      	b.n	8002b30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7ff fb47 	bl	8002198 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7ff fb43 	bl	8002198 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0af      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	4b5a      	ldr	r3, [pc, #360]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 809b 	beq.w	8002c82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d05c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d141      	bne.n	8002be4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7ff fb17 	bl	8002198 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7ff fb13 	bl	8002198 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e081      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	019b      	lsls	r3, r3, #6
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	061b      	lsls	r3, r3, #24
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7ff faec 	bl	8002198 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7ff fae8 	bl	8002198 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e056      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x41c>
 8002be2:	e04e      	b.n	8002c82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7ff fad5 	bl	8002198 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7ff fad1 	bl	8002198 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e03f      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x44a>
 8002c10:	e037      	b.n	8002c82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e032      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d028      	beq.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d121      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d11a      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c4e:	4013      	ands	r3, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	3b01      	subs	r3, #1
 8002c68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470060 	.word	0x42470060

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cc      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d044      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4934      	ldr	r1, [pc, #208]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7ff fa06 	bl	8002198 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7ff fa02 	bl	8002198 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20c      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490a      	ldr	r1, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f966 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	080088e4 	.word	0x080088e4
 8002e5c:	20000034 	.word	0x20000034
 8002e60:	20000038 	.word	0x20000038

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7c:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	f200 80bd 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e96:	e0b7      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e9a:	60bb      	str	r3, [r7, #8]
       break;
 8002e9c:	e0b7      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ea0:	60bb      	str	r3, [r7, #8]
      break;
 8002ea2:	e0b4      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea4:	4b5d      	ldr	r3, [pc, #372]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eae:	4b5b      	ldr	r3, [pc, #364]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04d      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	ea02 0800 	and.w	r8, r2, r0
 8002ed2:	ea03 0901 	and.w	r9, r3, r1
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	4649      	mov	r1, r9
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	014b      	lsls	r3, r1, #5
 8002ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ee8:	0142      	lsls	r2, r0, #5
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	ebb0 0008 	subs.w	r0, r0, r8
 8002ef2:	eb61 0109 	sbc.w	r1, r1, r9
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f04:	0182      	lsls	r2, r0, #6
 8002f06:	1a12      	subs	r2, r2, r0
 8002f08:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	00d9      	lsls	r1, r3, #3
 8002f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f1a:	00d0      	lsls	r0, r2, #3
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	eb12 0208 	adds.w	r2, r2, r8
 8002f24:	eb43 0309 	adc.w	r3, r3, r9
 8002f28:	f04f 0000 	mov.w	r0, #0
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	0259      	lsls	r1, r3, #9
 8002f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f36:	0250      	lsls	r0, r2, #9
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f7fd fd50 	bl	80009ec <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e04a      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	ea02 0400 	and.w	r4, r2, r0
 8002f6e:	ea03 0501 	and.w	r5, r3, r1
 8002f72:	4620      	mov	r0, r4
 8002f74:	4629      	mov	r1, r5
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	014b      	lsls	r3, r1, #5
 8002f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f84:	0142      	lsls	r2, r0, #5
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	1b00      	subs	r0, r0, r4
 8002f8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	018b      	lsls	r3, r1, #6
 8002f9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f9e:	0182      	lsls	r2, r0, #6
 8002fa0:	1a12      	subs	r2, r2, r0
 8002fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	00d9      	lsls	r1, r3, #3
 8002fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fb4:	00d0      	lsls	r0, r2, #3
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	1912      	adds	r2, r2, r4
 8002fbc:	eb45 0303 	adc.w	r3, r5, r3
 8002fc0:	f04f 0000 	mov.w	r0, #0
 8002fc4:	f04f 0100 	mov.w	r1, #0
 8002fc8:	0299      	lsls	r1, r3, #10
 8002fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fce:	0290      	lsls	r0, r2, #10
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	f7fd fd04 	bl	80009ec <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	60bb      	str	r3, [r7, #8]
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800300a:	60bb      	str	r3, [r7, #8]
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	68bb      	ldr	r3, [r7, #8]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000034 	.word	0x20000034

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	080088f4 	.word	0x080088f4

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800306c:	f7ff ffdc 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0b5b      	lsrs	r3, r3, #13
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	080088f4 	.word	0x080088f4

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07b      	b.n	800319a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe febe 	bl	8001e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	ea42 0103 	orr.w	r1, r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0104 	and.w	r1, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	f003 0210 	and.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b088      	sub	sp, #32
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_SPI_Transmit+0x22>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e126      	b.n	8003412 <HAL_SPI_Transmit+0x270>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031cc:	f7fe ffe4 	bl	8002198 <HAL_GetTick>
 80031d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031e6:	e10b      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Transmit+0x52>
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031f8:	e102      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	d10f      	bne.n	8003262 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003250:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003260:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d007      	beq.n	8003280 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003288:	d14b      	bne.n	8003322 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Transmit+0xf6>
 8003292:	8afb      	ldrh	r3, [r7, #22]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d13e      	bne.n	8003316 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032bc:	e02b      	b.n	8003316 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d112      	bne.n	80032f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80032f0:	e011      	b.n	8003316 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f2:	f7fe ff51 	bl	8002198 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d803      	bhi.n	800330a <HAL_SPI_Transmit+0x168>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d102      	bne.n	8003310 <HAL_SPI_Transmit+0x16e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003314:	e074      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ce      	bne.n	80032be <HAL_SPI_Transmit+0x11c>
 8003320:	e04c      	b.n	80033bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0x18e>
 800332a:	8afb      	ldrh	r3, [r7, #22]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d140      	bne.n	80033b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003356:	e02c      	b.n	80033b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d113      	bne.n	800338e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	86da      	strh	r2, [r3, #54]	; 0x36
 800338c:	e011      	b.n	80033b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338e:	f7fe ff03 	bl	8002198 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d803      	bhi.n	80033a6 <HAL_SPI_Transmit+0x204>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_Transmit+0x20a>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b0:	e026      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1cd      	bne.n	8003358 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	6839      	ldr	r1, [r7, #0]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fbcb 	bl	8003b5c <SPI_EndRxTxTransaction>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e000      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003410:	7ffb      	ldrb	r3, [r7, #31]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b088      	sub	sp, #32
 800341e:	af02      	add	r7, sp, #8
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003436:	d112      	bne.n	800345e <HAL_SPI_Receive+0x44>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10e      	bne.n	800345e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2204      	movs	r2, #4
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8f1 	bl	800363c <HAL_SPI_TransmitReceive>
 800345a:	4603      	mov	r3, r0
 800345c:	e0ea      	b.n	8003634 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_SPI_Receive+0x52>
 8003468:	2302      	movs	r3, #2
 800346a:	e0e3      	b.n	8003634 <HAL_SPI_Receive+0x21a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003474:	f7fe fe90 	bl	8002198 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d002      	beq.n	800348c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	75fb      	strb	r3, [r7, #23]
    goto error;
 800348a:	e0ca      	b.n	8003622 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Receive+0x7e>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800349c:	e0c1      	b.n	8003622 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2204      	movs	r2, #4
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e4:	d10f      	bne.n	8003506 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d007      	beq.n	8003524 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d162      	bne.n	80035f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800352c:	e02e      	b.n	800358c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d115      	bne.n	8003568 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f103 020c 	add.w	r2, r3, #12
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003566:	e011      	b.n	800358c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003568:	f7fe fe16 	bl	8002198 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d803      	bhi.n	8003580 <HAL_SPI_Receive+0x166>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d102      	bne.n	8003586 <HAL_SPI_Receive+0x16c>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	75fb      	strb	r3, [r7, #23]
          goto error;
 800358a:	e04a      	b.n	8003622 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_SPI_Receive+0x114>
 8003596:	e031      	b.n	80035fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d113      	bne.n	80035ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035cc:	e011      	b.n	80035f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ce:	f7fe fde3 	bl	8002198 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d803      	bhi.n	80035e6 <HAL_SPI_Receive+0x1cc>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_Receive+0x1d2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035f0:	e017      	b.n	8003622 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1cd      	bne.n	8003598 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fa45 	bl	8003a90 <SPI_EndRxTransaction>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
 800361e:	e000      	b.n	8003622 <HAL_SPI_Receive+0x208>
  }

error :
 8003620:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	; 0x30
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800364a:	2301      	movs	r3, #1
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x26>
 800365e:	2302      	movs	r3, #2
 8003660:	e18a      	b.n	8003978 <HAL_SPI_TransmitReceive+0x33c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800366a:	f7fe fd95 	bl	8002198 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003688:	2b01      	cmp	r3, #1
 800368a:	d00f      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x70>
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003692:	d107      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x68>
 800369c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d003      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036aa:	e15b      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_SPI_TransmitReceive+0x82>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_SPI_TransmitReceive+0x82>
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036c4:	e14e      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d003      	beq.n	80036da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2205      	movs	r2, #5
 80036d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	887a      	ldrh	r2, [r7, #2]
 8003702:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d007      	beq.n	800372e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003736:	d178      	bne.n	800382a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x10a>
 8003740:	8b7b      	ldrh	r3, [r7, #26]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d166      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376a:	e053      	b.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d11b      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x176>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x176>
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d113      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d119      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x1b8>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d014      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	b292      	uxth	r2, r2
 80037d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037f0:	2301      	movs	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037f4:	f7fe fcd0 	bl	8002198 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003800:	429a      	cmp	r2, r3
 8003802:	d807      	bhi.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d003      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003812:	e0a7      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1a6      	bne.n	800376c <HAL_SPI_TransmitReceive+0x130>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1a1      	bne.n	800376c <HAL_SPI_TransmitReceive+0x130>
 8003828:	e07c      	b.n	8003924 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x1fc>
 8003832:	8b7b      	ldrh	r3, [r7, #26]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d16b      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385e:	e057      	b.n	8003910 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d11c      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x26c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x26c>
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d114      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d119      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x2ae>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d014      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038ea:	f7fe fc55 	bl	8002198 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d803      	bhi.n	8003902 <HAL_SPI_TransmitReceive+0x2c6>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d102      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x2cc>
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800390e:	e029      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1a2      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x224>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d19d      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f917 	bl	8003b5c <SPI_EndRxTxTransaction>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003940:	e010      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	e000      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003962:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003978:	4618      	mov	r0, r3
 800397a:	3730      	adds	r7, #48	; 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003990:	f7fe fc02 	bl	8002198 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4413      	add	r3, r2
 800399e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039a0:	f7fe fbfa 	bl	8002198 <HAL_GetTick>
 80039a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	015b      	lsls	r3, r3, #5
 80039ac:	0d1b      	lsrs	r3, r3, #20
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	fb02 f303 	mul.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039b6:	e054      	b.n	8003a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d050      	beq.n	8003a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039c0:	f7fe fbea 	bl	8002198 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d902      	bls.n	80039d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d13d      	bne.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ee:	d111      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f8:	d004      	beq.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a02:	d107      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1c:	d10f      	bne.n	8003a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e017      	b.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d19b      	bne.n	80039b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000034 	.word	0x20000034

08003a90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa4:	d111      	bne.n	8003aca <SPI_EndRxTransaction+0x3a>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aae:	d004      	beq.n	8003aba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab8:	d107      	bne.n	8003aca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d12a      	bne.n	8003b2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003adc:	d012      	beq.n	8003b04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2180      	movs	r1, #128	; 0x80
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ff49 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d02d      	beq.n	8003b50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e026      	b.n	8003b52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff ff36 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e013      	b.n	8003b52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2101      	movs	r1, #1
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff23 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e000      	b.n	8003b52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <SPI_EndRxTxTransaction+0x7c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <SPI_EndRxTxTransaction+0x80>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0d5b      	lsrs	r3, r3, #21
 8003b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b86:	d112      	bne.n	8003bae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fef4 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e00f      	b.n	8003bce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d0f2      	beq.n	8003bae <SPI_EndRxTxTransaction+0x52>
 8003bc8:	e000      	b.n	8003bcc <SPI_EndRxTxTransaction+0x70>
        break;
 8003bca:	bf00      	nop
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000034 	.word	0x20000034
 8003bdc:	165e9f81 	.word	0x165e9f81

08003be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e03f      	b.n	8003c72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe f974 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f929 	bl	8003e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b08a      	sub	sp, #40	; 0x28
 8003c7e:	af02      	add	r7, sp, #8
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d17c      	bne.n	8003d94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_UART_Transmit+0x2c>
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e075      	b.n	8003d96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Transmit+0x3e>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e06e      	b.n	8003d96 <HAL_UART_Transmit+0x11c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2221      	movs	r2, #33	; 0x21
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cce:	f7fe fa63 	bl	8002198 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce8:	d108      	bne.n	8003cfc <HAL_UART_Transmit+0x82>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e003      	b.n	8003d04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d0c:	e02a      	b.n	8003d64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	2180      	movs	r1, #128	; 0x80
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f840 	bl	8003d9e <UART_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e036      	b.n	8003d96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	3302      	adds	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e007      	b.n	8003d56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	3301      	adds	r3, #1
 8003d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1cf      	bne.n	8003d0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2140      	movs	r1, #64	; 0x40
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f810 	bl	8003d9e <UART_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e006      	b.n	8003d96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b090      	sub	sp, #64	; 0x40
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dae:	e050      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d04c      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbe:	f7fe f9eb 	bl	8002198 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d241      	bcs.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dee:	637a      	str	r2, [r7, #52]	; 0x34
 8003df0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	613b      	str	r3, [r7, #16]
   return(result);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3314      	adds	r3, #20
 8003e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e22:	623a      	str	r2, [r7, #32]
 8003e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	69f9      	ldr	r1, [r7, #28]
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e5      	bne.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e00f      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d09f      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3740      	adds	r7, #64	; 0x40
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	b09f      	sub	sp, #124	; 0x7c
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	68d9      	ldr	r1, [r3, #12]
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	ea40 0301 	orr.w	r3, r0, r1
 8003e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ec0:	f021 010c 	bic.w	r1, r1, #12
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	6999      	ldr	r1, [r3, #24]
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	ea40 0301 	orr.w	r3, r0, r1
 8003ee4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4bc5      	ldr	r3, [pc, #788]	; (8004200 <UART_SetConfig+0x384>)
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d004      	beq.n	8003efa <UART_SetConfig+0x7e>
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4bc3      	ldr	r3, [pc, #780]	; (8004204 <UART_SetConfig+0x388>)
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d103      	bne.n	8003f02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003efa:	f7ff f8b5 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8003efe:	6778      	str	r0, [r7, #116]	; 0x74
 8003f00:	e002      	b.n	8003f08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f02:	f7ff f89d 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8003f06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f10:	f040 80b6 	bne.w	8004080 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f16:	461c      	mov	r4, r3
 8003f18:	f04f 0500 	mov.w	r5, #0
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	6439      	str	r1, [r7, #64]	; 0x40
 8003f24:	415b      	adcs	r3, r3
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
 8003f28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f2c:	1912      	adds	r2, r2, r4
 8003f2e:	eb45 0303 	adc.w	r3, r5, r3
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	00d9      	lsls	r1, r3, #3
 8003f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f40:	00d0      	lsls	r0, r2, #3
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	1911      	adds	r1, r2, r4
 8003f48:	6639      	str	r1, [r7, #96]	; 0x60
 8003f4a:	416b      	adcs	r3, r5
 8003f4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f68:	f7fc fd40 	bl	80009ec <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4ba5      	ldr	r3, [pc, #660]	; (8004208 <UART_SetConfig+0x38c>)
 8003f72:	fba3 2302 	umull	r2, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	011e      	lsls	r6, r3, #4
 8003f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7c:	461c      	mov	r4, r3
 8003f7e:	f04f 0500 	mov.w	r5, #0
 8003f82:	4622      	mov	r2, r4
 8003f84:	462b      	mov	r3, r5
 8003f86:	1891      	adds	r1, r2, r2
 8003f88:	6339      	str	r1, [r7, #48]	; 0x30
 8003f8a:	415b      	adcs	r3, r3
 8003f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f92:	1912      	adds	r2, r2, r4
 8003f94:	eb45 0303 	adc.w	r3, r5, r3
 8003f98:	f04f 0000 	mov.w	r0, #0
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	00d9      	lsls	r1, r3, #3
 8003fa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa6:	00d0      	lsls	r0, r2, #3
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	1911      	adds	r1, r2, r4
 8003fae:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fb0:	416b      	adcs	r3, r5
 8003fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fce:	f7fc fd0d 	bl	80009ec <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <UART_SetConfig+0x38c>)
 8003fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	2164      	movs	r1, #100	; 0x64
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	3332      	adds	r3, #50	; 0x32
 8003fea:	4a87      	ldr	r2, [pc, #540]	; (8004208 <UART_SetConfig+0x38c>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ff8:	441e      	add	r6, r3
 8003ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	1894      	adds	r4, r2, r2
 8004008:	623c      	str	r4, [r7, #32]
 800400a:	415b      	adcs	r3, r3
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004012:	1812      	adds	r2, r2, r0
 8004014:	eb41 0303 	adc.w	r3, r1, r3
 8004018:	f04f 0400 	mov.w	r4, #0
 800401c:	f04f 0500 	mov.w	r5, #0
 8004020:	00dd      	lsls	r5, r3, #3
 8004022:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004026:	00d4      	lsls	r4, r2, #3
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	1814      	adds	r4, r2, r0
 800402e:	653c      	str	r4, [r7, #80]	; 0x50
 8004030:	414b      	adcs	r3, r1
 8004032:	657b      	str	r3, [r7, #84]	; 0x54
 8004034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	461a      	mov	r2, r3
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	1891      	adds	r1, r2, r2
 8004040:	61b9      	str	r1, [r7, #24]
 8004042:	415b      	adcs	r3, r3
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800404a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800404e:	f7fc fccd 	bl	80009ec <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <UART_SetConfig+0x38c>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	3332      	adds	r3, #50	; 0x32
 800406a:	4a67      	ldr	r2, [pc, #412]	; (8004208 <UART_SetConfig+0x38c>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f003 0207 	and.w	r2, r3, #7
 8004076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4432      	add	r2, r6
 800407c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800407e:	e0b9      	b.n	80041f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004082:	461c      	mov	r4, r3
 8004084:	f04f 0500 	mov.w	r5, #0
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	1891      	adds	r1, r2, r2
 800408e:	6139      	str	r1, [r7, #16]
 8004090:	415b      	adcs	r3, r3
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004098:	1912      	adds	r2, r2, r4
 800409a:	eb45 0303 	adc.w	r3, r5, r3
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	00d9      	lsls	r1, r3, #3
 80040a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ac:	00d0      	lsls	r0, r2, #3
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	eb12 0804 	adds.w	r8, r2, r4
 80040b6:	eb43 0905 	adc.w	r9, r3, r5
 80040ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4618      	mov	r0, r3
 80040c0:	f04f 0100 	mov.w	r1, #0
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	008b      	lsls	r3, r1, #2
 80040ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040d2:	0082      	lsls	r2, r0, #2
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc fc88 	bl	80009ec <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b49      	ldr	r3, [pc, #292]	; (8004208 <UART_SetConfig+0x38c>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011e      	lsls	r6, r3, #4
 80040ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ec:	4618      	mov	r0, r3
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	1894      	adds	r4, r2, r2
 80040f8:	60bc      	str	r4, [r7, #8]
 80040fa:	415b      	adcs	r3, r3
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004102:	1812      	adds	r2, r2, r0
 8004104:	eb41 0303 	adc.w	r3, r1, r3
 8004108:	f04f 0400 	mov.w	r4, #0
 800410c:	f04f 0500 	mov.w	r5, #0
 8004110:	00dd      	lsls	r5, r3, #3
 8004112:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004116:	00d4      	lsls	r4, r2, #3
 8004118:	4622      	mov	r2, r4
 800411a:	462b      	mov	r3, r5
 800411c:	1814      	adds	r4, r2, r0
 800411e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004120:	414b      	adcs	r3, r1
 8004122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4618      	mov	r0, r3
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	008b      	lsls	r3, r1, #2
 8004138:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800413c:	0082      	lsls	r2, r0, #2
 800413e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004142:	f7fc fc53 	bl	80009ec <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <UART_SetConfig+0x38c>)
 800414c:	fba3 1302 	umull	r1, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	2164      	movs	r1, #100	; 0x64
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	3332      	adds	r3, #50	; 0x32
 800415e:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <UART_SetConfig+0x38c>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800416a:	441e      	add	r6, r3
 800416c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416e:	4618      	mov	r0, r3
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	1894      	adds	r4, r2, r2
 800417a:	603c      	str	r4, [r7, #0]
 800417c:	415b      	adcs	r3, r3
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004184:	1812      	adds	r2, r2, r0
 8004186:	eb41 0303 	adc.w	r3, r1, r3
 800418a:	f04f 0400 	mov.w	r4, #0
 800418e:	f04f 0500 	mov.w	r5, #0
 8004192:	00dd      	lsls	r5, r3, #3
 8004194:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004198:	00d4      	lsls	r4, r2, #3
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	eb12 0a00 	adds.w	sl, r2, r0
 80041a2:	eb43 0b01 	adc.w	fp, r3, r1
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	008b      	lsls	r3, r1, #2
 80041ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041be:	0082      	lsls	r2, r0, #2
 80041c0:	4650      	mov	r0, sl
 80041c2:	4659      	mov	r1, fp
 80041c4:	f7fc fc12 	bl	80009ec <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <UART_SetConfig+0x38c>)
 80041ce:	fba3 1302 	umull	r1, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2164      	movs	r1, #100	; 0x64
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a09      	ldr	r2, [pc, #36]	; (8004208 <UART_SetConfig+0x38c>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4432      	add	r2, r6
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	377c      	adds	r7, #124	; 0x7c
 80041f8:	46bd      	mov	sp, r7
 80041fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fe:	bf00      	nop
 8004200:	40011000 	.word	0x40011000
 8004204:	40011400 	.word	0x40011400
 8004208:	51eb851f 	.word	0x51eb851f

0800420c <gesture_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool gesture_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800421a:	f107 030c 	add.w	r3, r7, #12
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fb12 	bl	800484c <ai_platform_get_activations_map>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d025      	beq.n	800427a <gesture_configure_activations+0x6e>
    /* Updating activations (byte) offsets */
    dense_0_output_array.data = AI_PTR(activations_map[0] + 0);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a17      	ldr	r2, [pc, #92]	; (8004290 <gesture_configure_activations+0x84>)
 8004232:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <gesture_configure_activations+0x84>)
 8004238:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <gesture_configure_activations+0x88>)
 800423e:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a14      	ldr	r2, [pc, #80]	; (8004294 <gesture_configure_activations+0x88>)
 8004244:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 300);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800424c:	4a12      	ldr	r2, [pc, #72]	; (8004298 <gesture_configure_activations+0x8c>)
 800424e:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 300);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004256:	4a10      	ldr	r2, [pc, #64]	; (8004298 <gesture_configure_activations+0x8c>)
 8004258:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <gesture_configure_activations+0x90>)
 800425e:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a0e      	ldr	r2, [pc, #56]	; (800429c <gesture_configure_activations+0x90>)
 8004264:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations_map[0] + 60);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	333c      	adds	r3, #60	; 0x3c
 800426a:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <gesture_configure_activations+0x94>)
 800426c:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations_map[0] + 60);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	333c      	adds	r3, #60	; 0x3c
 8004272:	4a0b      	ldr	r2, [pc, #44]	; (80042a0 <gesture_configure_activations+0x94>)
 8004274:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004276:	2301      	movs	r3, #1
 8004278:	e005      	b.n	8004286 <gesture_configure_activations+0x7a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800427a:	2213      	movs	r2, #19
 800427c:	2130      	movs	r1, #48	; 0x30
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fd52 	bl	8004d28 <ai_platform_network_set_error>
  return false;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000050 	.word	0x20000050
 8004294:	20000060 	.word	0x20000060
 8004298:	20000070 	.word	0x20000070
 800429c:	20000080 	.word	0x20000080
 80042a0:	20000090 	.word	0x20000090

080042a4 <gesture_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool gesture_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	2101      	movs	r1, #1
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa76 	bl	80047ac <ai_platform_get_weights_map>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d067      	beq.n	8004396 <gesture_configure_weights+0xf2>
    /* Updating weights (byte) offsets */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80042c6:	4b39      	ldr	r3, [pc, #228]	; (80043ac <gesture_configure_weights+0x108>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ce:	4a37      	ldr	r2, [pc, #220]	; (80043ac <gesture_configure_weights+0x108>)
 80042d0:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a35      	ldr	r2, [pc, #212]	; (80043ac <gesture_configure_weights+0x108>)
 80042d6:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a34      	ldr	r2, [pc, #208]	; (80043ac <gesture_configure_weights+0x108>)
 80042dc:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80042de:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <gesture_configure_weights+0x10c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042e6:	4a32      	ldr	r2, [pc, #200]	; (80043b0 <gesture_configure_weights+0x10c>)
 80042e8:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights_map[0] + 22500);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 43af 	add.w	r3, r3, #22400	; 0x5780
 80042f0:	3364      	adds	r3, #100	; 0x64
 80042f2:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <gesture_configure_weights+0x10c>)
 80042f4:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights_map[0] + 22500);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 43af 	add.w	r3, r3, #22400	; 0x5780
 80042fc:	3364      	adds	r3, #100	; 0x64
 80042fe:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <gesture_configure_weights+0x10c>)
 8004300:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004302:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <gesture_configure_weights+0x110>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800430a:	4a2a      	ldr	r2, [pc, #168]	; (80043b4 <gesture_configure_weights+0x110>)
 800430c:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 22800);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f503 43b2 	add.w	r3, r3, #22784	; 0x5900
 8004314:	3310      	adds	r3, #16
 8004316:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <gesture_configure_weights+0x110>)
 8004318:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 22800);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 43b2 	add.w	r3, r3, #22784	; 0x5900
 8004320:	3310      	adds	r3, #16
 8004322:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <gesture_configure_weights+0x110>)
 8004324:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <gesture_configure_weights+0x114>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800432e:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <gesture_configure_weights+0x114>)
 8004330:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 27300);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <gesture_configure_weights+0x114>)
 800433c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 27300);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <gesture_configure_weights+0x114>)
 8004348:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800434a:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <gesture_configure_weights+0x118>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004352:	4a1a      	ldr	r2, [pc, #104]	; (80043bc <gesture_configure_weights+0x118>)
 8004354:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights_map[0] + 27360);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800435c:	3360      	adds	r3, #96	; 0x60
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <gesture_configure_weights+0x118>)
 8004360:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights_map[0] + 27360);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004368:	3360      	adds	r3, #96	; 0x60
 800436a:	4a14      	ldr	r2, [pc, #80]	; (80043bc <gesture_configure_weights+0x118>)
 800436c:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <gesture_configure_weights+0x11c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <gesture_configure_weights+0x11c>)
 8004378:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights_map[0] + 27540);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f503 43d7 	add.w	r3, r3, #27520	; 0x6b80
 8004380:	3314      	adds	r3, #20
 8004382:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <gesture_configure_weights+0x11c>)
 8004384:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights_map[0] + 27540);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 43d7 	add.w	r3, r3, #27520	; 0x6b80
 800438c:	3314      	adds	r3, #20
 800438e:	4a0c      	ldr	r2, [pc, #48]	; (80043c0 <gesture_configure_weights+0x11c>)
 8004390:	60d3      	str	r3, [r2, #12]
    return true;
 8004392:	2301      	movs	r3, #1
 8004394:	e005      	b.n	80043a2 <gesture_configure_weights+0xfe>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004396:	2212      	movs	r2, #18
 8004398:	2130      	movs	r1, #48	; 0x30
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fcc4 	bl	8004d28 <ai_platform_network_set_error>
  return false;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200000b0 	.word	0x200000b0
 80043b0:	200000c0 	.word	0x200000c0
 80043b4:	200000d0 	.word	0x200000d0
 80043b8:	200000e0 	.word	0x200000e0
 80043bc:	200000f0 	.word	0x200000f0
 80043c0:	20000100 	.word	0x20000100

080043c4 <ai_gesture_get_report>:


AI_API_ENTRY
ai_bool ai_gesture_get_report(
  ai_handle network, ai_network_report* report)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b0a2      	sub	sp, #136	; 0x88
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fbe8 	bl	8004ba4 <ai_platform_context_acquire>
 80043d4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

  if (report && net_ctx)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d047      	beq.n	800446e <ai_gesture_get_report+0xaa>
 80043de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d043      	beq.n	800446e <ai_gesture_get_report+0xaa>
  {
    ai_network_report r = {
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	227c      	movs	r2, #124	; 0x7c
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f002 fdb8 	bl	8006f64 <memset>
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <ai_gesture_get_report+0xb4>)
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	4b20      	ldr	r3, [pc, #128]	; (800447c <ai_gesture_get_report+0xb8>)
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	4b20      	ldr	r3, [pc, #128]	; (8004480 <ai_gesture_get_report+0xbc>)
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <ai_gesture_get_report+0xc0>)
 8004402:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_GESTURE_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004404:	f000 fa90 	bl	8004928 <ai_platform_runtime_get_revision>
 8004408:	4603      	mov	r3, r0
    ai_network_report r = {
 800440a:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 800440c:	f000 face 	bl	80049ac <ai_platform_runtime_get_version>
 8004410:	4603      	mov	r3, r0
 8004412:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <ai_gesture_get_report+0xc4>)
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	2307      	movs	r3, #7
 800441a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004424:	f000 fb16 	bl	8004a54 <ai_platform_api_get_version>
 8004428:	4603      	mov	r3, r0
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800442c:	f000 fb66 	bl	8004afc <ai_platform_interface_api_get_version>
 8004430:	4603      	mov	r3, r0
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8004434:	f641 336f 	movw	r3, #7023	; 0x1b6f
 8004438:	637b      	str	r3, [r7, #52]	; 0x34
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <ai_gesture_get_report+0xc8>)
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fe63 	bl	8005110 <ai_platform_api_get_network_report>
 800444a:	4603      	mov	r3, r0
 800444c:	f083 0301 	eor.w	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <ai_gesture_get_report+0x96>
 8004456:	2300      	movs	r3, #0
 8004458:	e00a      	b.n	8004470 <ai_gesture_get_report+0xac>

    *report = r;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f107 0308 	add.w	r3, r7, #8
 8004462:	227c      	movs	r2, #124	; 0x7c
 8004464:	4619      	mov	r1, r3
 8004466:	f002 fd6f 	bl	8006f48 <memcpy>
    return true;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <ai_gesture_get_report+0xac>
  }
  return false;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3788      	adds	r7, #136	; 0x88
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	0800883c 	.word	0x0800883c
 800447c:	08008844 	.word	0x08008844
 8004480:	08008868 	.word	0x08008868
 8004484:	08008884 	.word	0x08008884
 8004488:	0800889c 	.word	0x0800889c
 800448c:	a1facade 	.word	0xa1facade

08004490 <ai_gesture_get_error>:

AI_API_ENTRY
ai_error ai_gesture_get_error(ai_handle network)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fbcb 	bl	8004c34 <ai_platform_network_get_error>
 800449e:	4603      	mov	r3, r0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <ai_gesture_create>:

AI_API_ENTRY
ai_error ai_gesture_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80044b2:	2300      	movs	r3, #0
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	2305      	movs	r3, #5
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2301      	movs	r3, #1
 80044bc:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <ai_gesture_create+0x28>)
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f001 f917 	bl	80056f4 <ai_platform_network_create>
 80044c6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200006c8 	.word	0x200006c8

080044d4 <ai_gesture_create_and_init>:

AI_API_ENTRY
ai_error ai_gesture_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b096      	sub	sp, #88	; 0x58
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_gesture_create(network, AI_GESTURE_DATA_CONFIG);
 80044e0:	2100      	movs	r1, #0
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff ffe0 	bl	80044a8 <ai_gesture_create>
 80044e8:	4603      	mov	r3, r0
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80044ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <ai_gesture_create_and_init+0x24>
        return err;
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	e05d      	b.n	80045b4 <ai_gesture_create_and_init+0xe0>
    if (ai_gesture_data_params_get(&params) != true) {
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 f8dd 	bl	80046bc <ai_gesture_data_params_get>
 8004502:	4603      	mov	r3, r0
 8004504:	f083 0301 	eor.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <ai_gesture_create_and_init+0x4c>
        err = ai_gesture_get_error(*network);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ffbc 	bl	8004490 <ai_gesture_get_error>
 8004518:	4603      	mov	r3, r0
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800451c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451e:	e049      	b.n	80045b4 <ai_gesture_create_and_init+0xe0>
    }
#if defined(AI_GESTURE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <ai_gesture_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004526:	2300      	movs	r3, #0
 8004528:	657b      	str	r3, [r7, #84]	; 0x54
 800452a:	e00e      	b.n	800454a <ai_gesture_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800452c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800452e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	330c      	adds	r3, #12
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f91e 	bl	8004780 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004546:	3301      	adds	r3, #1
 8004548:	657b      	str	r3, [r7, #84]	; 0x54
 800454a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800454c:	461a      	mov	r2, r3
 800454e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004550:	4293      	cmp	r3, r2
 8004552:	dbeb      	blt.n	800452c <ai_gesture_create_and_init+0x58>
    }
#endif
#if defined(AI_GESTURE_DATA_WEIGHTS_COUNT)
    if (weights) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <ai_gesture_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800455a:	2300      	movs	r3, #0
 800455c:	653b      	str	r3, [r7, #80]	; 0x50
 800455e:	e00e      	b.n	800457e <ai_gesture_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f904 	bl	8004780 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457a:	3301      	adds	r3, #1
 800457c:	653b      	str	r3, [r7, #80]	; 0x50
 800457e:	8b7b      	ldrh	r3, [r7, #26]
 8004580:	461a      	mov	r2, r3
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	4293      	cmp	r3, r2
 8004586:	dbeb      	blt.n	8004560 <ai_gesture_create_and_init+0x8c>
    }
#endif
    if (ai_gesture_init(*network, &params) != true) {
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f107 0214 	add.w	r2, r7, #20
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f846 	bl	8004624 <ai_gesture_init>
 8004598:	4603      	mov	r3, r0
 800459a:	f083 0301 	eor.w	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d006      	beq.n	80045b2 <ai_gesture_create_and_init+0xde>
        err = ai_gesture_get_error(*network);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff71 	bl	8004490 <ai_gesture_get_error>
 80045ae:	4603      	mov	r3, r0
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3758      	adds	r7, #88	; 0x58
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <ai_gesture_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_gesture_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <ai_gesture_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <ai_gesture_inputs_get+0x2c>)
 80045ce:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a06      	ldr	r2, [pc, #24]	; (80045ec <ai_gesture_inputs_get+0x30>)
 80045d4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80045d6:	6839      	ldr	r1, [r7, #0]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fbab 	bl	8004d34 <ai_platform_inputs_get>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200006c8 	.word	0x200006c8
 80045ec:	a1c00100 	.word	0xa1c00100

080045f0 <ai_gesture_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_gesture_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <ai_gesture_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <ai_gesture_outputs_get+0x2c>)
 8004602:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a06      	ldr	r2, [pc, #24]	; (8004620 <ai_gesture_outputs_get+0x30>)
 8004608:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fc85 	bl	8004f1c <ai_platform_outputs_get>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	200006c8 	.word	0x200006c8
 8004620:	a1c00100 	.word	0xa1c00100

08004624 <ai_gesture_init>:
}

AI_API_ENTRY
ai_bool ai_gesture_init(
  ai_handle network, const ai_network_params* params)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800462e:	6839      	ldr	r1, [r7, #0]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 f93f 	bl	80058b4 <ai_platform_network_init>
 8004636:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <ai_gesture_init+0x1e>
 800463e:	2300      	movs	r3, #0
 8004640:	e028      	b.n	8004694 <ai_gesture_init+0x70>

  ai_bool ok = true;
 8004642:	2301      	movs	r3, #1
 8004644:	72fb      	strb	r3, [r7, #11]
  ok &= gesture_configure_weights(net_ctx, params);
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fe2b 	bl	80042a4 <gesture_configure_weights>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	7afb      	ldrb	r3, [r7, #11]
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	72fb      	strb	r3, [r7, #11]
  ok &= gesture_configure_activations(net_ctx, params);
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fdd2 	bl	800420c <gesture_configure_activations>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fa26 	bl	8005acc <ai_platform_network_post_init>
 8004680:	4603      	mov	r3, r0
 8004682:	461a      	mov	r2, r3
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004692:	7afb      	ldrb	r3, [r7, #11]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <ai_gesture_run>:


AI_API_ENTRY
ai_i32 ai_gesture_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f001 faa1 	bl	8005bf4 <ai_platform_network_process>
 80046b2:	4603      	mov	r3, r0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <ai_gesture_data_params_get>:
 * @ingroup gesture_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_gesture_data_params_get(ai_network_params* params)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <ai_gesture_data_params_get+0x12>
 80046ca:	2300      	movs	r3, #0
 80046cc:	e016      	b.n	80046fc <ai_gesture_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <ai_gesture_data_params_get+0x48>)
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_GESTURE_DATA_ACTIVATIONS_COUNT, g_gesture_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80046dc:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <ai_gesture_data_params_get+0x4c>)
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046e6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_GESTURE_DATA_WEIGHTS_COUNT, g_gesture_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80046ea:	f107 0210 	add.w	r2, r7, #16
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f8fb 	bl	80048f0 <ai_platform_bind_network_params>
 80046fa:	4603      	mov	r3, r0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	080088c0 	.word	0x080088c0
 8004708:	080088c8 	.word	0x080088c8

0800470c <ai_buffer_get_size>:
 800470c:	b358      	cbz	r0, 8004766 <ai_buffer_get_size+0x5a>
 800470e:	b430      	push	{r4, r5}
 8004710:	6803      	ldr	r3, [r0, #0]
 8004712:	4d15      	ldr	r5, [pc, #84]	; (8004768 <ai_buffer_get_size+0x5c>)
 8004714:	6984      	ldr	r4, [r0, #24]
 8004716:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800471a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800471e:	42ab      	cmp	r3, r5
 8004720:	6862      	ldr	r2, [r4, #4]
 8004722:	d01a      	beq.n	800475a <ai_buffer_get_size+0x4e>
 8004724:	7d03      	ldrb	r3, [r0, #20]
 8004726:	6941      	ldr	r1, [r0, #20]
 8004728:	f1a3 0301 	sub.w	r3, r3, #1
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8004736:	428b      	cmp	r3, r1
 8004738:	da0b      	bge.n	8004752 <ai_buffer_get_size+0x46>
 800473a:	2b01      	cmp	r3, #1
 800473c:	d102      	bne.n	8004744 <ai_buffer_get_size+0x38>
 800473e:	2902      	cmp	r1, #2
 8004740:	d007      	beq.n	8004752 <ai_buffer_get_size+0x46>
 8004742:	2302      	movs	r3, #2
 8004744:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8004748:	3301      	adds	r3, #1
 800474a:	428b      	cmp	r3, r1
 800474c:	fb00 f202 	mul.w	r2, r0, r2
 8004750:	d1f3      	bne.n	800473a <ai_buffer_get_size+0x2e>
 8004752:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004756:	bc30      	pop	{r4, r5}
 8004758:	4770      	bx	lr
 800475a:	2900      	cmp	r1, #0
 800475c:	d0e2      	beq.n	8004724 <ai_buffer_get_size+0x18>
 800475e:	321f      	adds	r2, #31
 8004760:	f022 021f 	bic.w	r2, r2, #31
 8004764:	e7de      	b.n	8004724 <ai_buffer_get_size+0x18>
 8004766:	4770      	bx	lr
 8004768:	000400c0 	.word	0x000400c0

0800476c <ai_buffer_array_sane>:
 800476c:	b138      	cbz	r0, 800477e <ai_buffer_array_sane+0x12>
 800476e:	6843      	ldr	r3, [r0, #4]
 8004770:	b123      	cbz	r3, 800477c <ai_buffer_array_sane+0x10>
 8004772:	8840      	ldrh	r0, [r0, #2]
 8004774:	3000      	adds	r0, #0
 8004776:	bf18      	it	ne
 8004778:	2001      	movne	r0, #1
 800477a:	4770      	bx	lr
 800477c:	4618      	mov	r0, r3
 800477e:	4770      	bx	lr

08004780 <ai_buffer_array_item_set_address>:
 8004780:	b120      	cbz	r0, 800478c <ai_buffer_array_item_set_address+0xc>
 8004782:	6843      	ldr	r3, [r0, #4]
 8004784:	b11b      	cbz	r3, 800478e <ai_buffer_array_item_set_address+0xe>
 8004786:	8840      	ldrh	r0, [r0, #2]
 8004788:	b918      	cbnz	r0, 8004792 <ai_buffer_array_item_set_address+0x12>
 800478a:	4770      	bx	lr
 800478c:	4770      	bx	lr
 800478e:	4618      	mov	r0, r3
 8004790:	4770      	bx	lr
 8004792:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004796:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 800479a:	d0f7      	beq.n	800478c <ai_buffer_array_item_set_address+0xc>
 800479c:	6042      	str	r2, [r0, #4]
 800479e:	2001      	movs	r0, #1
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop

080047a4 <_ai_platform_acquire_crc>:
 80047a4:	2001      	movs	r0, #1
 80047a6:	4770      	bx	lr

080047a8 <_ai_platform_release_crc>:
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <ai_platform_get_weights_map>:
 80047ac:	b192      	cbz	r2, 80047d4 <ai_platform_get_weights_map+0x28>
 80047ae:	b188      	cbz	r0, 80047d4 <ai_platform_get_weights_map+0x28>
 80047b0:	b181      	cbz	r1, 80047d4 <ai_platform_get_weights_map+0x28>
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	4b24      	ldr	r3, [pc, #144]	; (8004848 <ai_platform_get_weights_map+0x9c>)
 80047b6:	6814      	ldr	r4, [r2, #0]
 80047b8:	429c      	cmp	r4, r3
 80047ba:	d00d      	beq.n	80047d8 <ai_platform_get_weights_map+0x2c>
 80047bc:	6854      	ldr	r4, [r2, #4]
 80047be:	b194      	cbz	r4, 80047e6 <ai_platform_get_weights_map+0x3a>
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	429d      	cmp	r5, r3
 80047c4:	d027      	beq.n	8004816 <ai_platform_get_weights_map+0x6a>
 80047c6:	6004      	str	r4, [r0, #0]
 80047c8:	f1a1 0001 	sub.w	r0, r1, #1
 80047cc:	fab0 f080 	clz	r0, r0
 80047d0:	0940      	lsrs	r0, r0, #5
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	2000      	movs	r0, #0
 80047d6:	4770      	bx	lr
 80047d8:	4605      	mov	r5, r0
 80047da:	1d10      	adds	r0, r2, #4
 80047dc:	4616      	mov	r6, r2
 80047de:	460c      	mov	r4, r1
 80047e0:	f7ff ffc4 	bl	800476c <ai_buffer_array_sane>
 80047e4:	b908      	cbnz	r0, 80047ea <ai_platform_get_weights_map+0x3e>
 80047e6:	2000      	movs	r0, #0
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
 80047ea:	88f3      	ldrh	r3, [r6, #6]
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d1fa      	bne.n	80047e6 <ai_platform_get_weights_map+0x3a>
 80047f0:	2100      	movs	r1, #0
 80047f2:	1f2b      	subs	r3, r5, #4
 80047f4:	4608      	mov	r0, r1
 80047f6:	68b2      	ldr	r2, [r6, #8]
 80047f8:	440a      	add	r2, r1
 80047fa:	311c      	adds	r1, #28
 80047fc:	6852      	ldr	r2, [r2, #4]
 80047fe:	b12a      	cbz	r2, 800480c <ai_platform_get_weights_map+0x60>
 8004800:	3001      	adds	r0, #1
 8004802:	4284      	cmp	r4, r0
 8004804:	f843 2f04 	str.w	r2, [r3, #4]!
 8004808:	d1f5      	bne.n	80047f6 <ai_platform_get_weights_map+0x4a>
 800480a:	4620      	mov	r0, r4
 800480c:	1a20      	subs	r0, r4, r0
 800480e:	fab0 f080 	clz	r0, r0
 8004812:	0940      	lsrs	r0, r0, #5
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	42ab      	cmp	r3, r5
 800481a:	f104 0404 	add.w	r4, r4, #4
 800481e:	d0e2      	beq.n	80047e6 <ai_platform_get_weights_map+0x3a>
 8004820:	3804      	subs	r0, #4
 8004822:	4626      	mov	r6, r4
 8004824:	2200      	movs	r2, #0
 8004826:	e003      	b.n	8004830 <ai_platform_get_weights_map+0x84>
 8004828:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800482c:	42ab      	cmp	r3, r5
 800482e:	d0da      	beq.n	80047e6 <ai_platform_get_weights_map+0x3a>
 8004830:	3201      	adds	r2, #1
 8004832:	4291      	cmp	r1, r2
 8004834:	f840 3f04 	str.w	r3, [r0, #4]!
 8004838:	d1f6      	bne.n	8004828 <ai_platform_get_weights_map+0x7c>
 800483a:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800483e:	4b02      	ldr	r3, [pc, #8]	; (8004848 <ai_platform_get_weights_map+0x9c>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d1d0      	bne.n	80047e6 <ai_platform_get_weights_map+0x3a>
 8004844:	2001      	movs	r0, #1
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	a1facade 	.word	0xa1facade

0800484c <ai_platform_get_activations_map>:
 800484c:	b192      	cbz	r2, 8004874 <ai_platform_get_activations_map+0x28>
 800484e:	b188      	cbz	r0, 8004874 <ai_platform_get_activations_map+0x28>
 8004850:	b181      	cbz	r1, 8004874 <ai_platform_get_activations_map+0x28>
 8004852:	b570      	push	{r4, r5, r6, lr}
 8004854:	4b25      	ldr	r3, [pc, #148]	; (80048ec <ai_platform_get_activations_map+0xa0>)
 8004856:	6814      	ldr	r4, [r2, #0]
 8004858:	429c      	cmp	r4, r3
 800485a:	d00d      	beq.n	8004878 <ai_platform_get_activations_map+0x2c>
 800485c:	6a14      	ldr	r4, [r2, #32]
 800485e:	b19c      	cbz	r4, 8004888 <ai_platform_get_activations_map+0x3c>
 8004860:	6825      	ldr	r5, [r4, #0]
 8004862:	429d      	cmp	r5, r3
 8004864:	d028      	beq.n	80048b8 <ai_platform_get_activations_map+0x6c>
 8004866:	6004      	str	r4, [r0, #0]
 8004868:	f1a1 0001 	sub.w	r0, r1, #1
 800486c:	fab0 f080 	clz	r0, r0
 8004870:	0940      	lsrs	r0, r0, #5
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	2000      	movs	r0, #0
 8004876:	4770      	bx	lr
 8004878:	4605      	mov	r5, r0
 800487a:	f102 000c 	add.w	r0, r2, #12
 800487e:	4616      	mov	r6, r2
 8004880:	460c      	mov	r4, r1
 8004882:	f7ff ff73 	bl	800476c <ai_buffer_array_sane>
 8004886:	b908      	cbnz	r0, 800488c <ai_platform_get_activations_map+0x40>
 8004888:	2000      	movs	r0, #0
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	89f3      	ldrh	r3, [r6, #14]
 800488e:	429c      	cmp	r4, r3
 8004890:	d1fa      	bne.n	8004888 <ai_platform_get_activations_map+0x3c>
 8004892:	2100      	movs	r1, #0
 8004894:	1f2b      	subs	r3, r5, #4
 8004896:	4608      	mov	r0, r1
 8004898:	6932      	ldr	r2, [r6, #16]
 800489a:	440a      	add	r2, r1
 800489c:	311c      	adds	r1, #28
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	b12a      	cbz	r2, 80048ae <ai_platform_get_activations_map+0x62>
 80048a2:	3001      	adds	r0, #1
 80048a4:	4284      	cmp	r4, r0
 80048a6:	f843 2f04 	str.w	r2, [r3, #4]!
 80048aa:	d1f5      	bne.n	8004898 <ai_platform_get_activations_map+0x4c>
 80048ac:	4620      	mov	r0, r4
 80048ae:	1a20      	subs	r0, r4, r0
 80048b0:	fab0 f080 	clz	r0, r0
 80048b4:	0940      	lsrs	r0, r0, #5
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	42ab      	cmp	r3, r5
 80048bc:	f104 0404 	add.w	r4, r4, #4
 80048c0:	d0e2      	beq.n	8004888 <ai_platform_get_activations_map+0x3c>
 80048c2:	3804      	subs	r0, #4
 80048c4:	4626      	mov	r6, r4
 80048c6:	2200      	movs	r2, #0
 80048c8:	e003      	b.n	80048d2 <ai_platform_get_activations_map+0x86>
 80048ca:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80048ce:	42ab      	cmp	r3, r5
 80048d0:	d0da      	beq.n	8004888 <ai_platform_get_activations_map+0x3c>
 80048d2:	3201      	adds	r2, #1
 80048d4:	4291      	cmp	r1, r2
 80048d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80048da:	d1f6      	bne.n	80048ca <ai_platform_get_activations_map+0x7e>
 80048dc:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80048e0:	4b02      	ldr	r3, [pc, #8]	; (80048ec <ai_platform_get_activations_map+0xa0>)
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d1d0      	bne.n	8004888 <ai_platform_get_activations_map+0x3c>
 80048e6:	2001      	movs	r0, #1
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
 80048ea:	bf00      	nop
 80048ec:	a1facade 	.word	0xa1facade

080048f0 <ai_platform_bind_network_params>:
 80048f0:	4603      	mov	r3, r0
 80048f2:	b190      	cbz	r0, 800491a <ai_platform_bind_network_params+0x2a>
 80048f4:	b1a1      	cbz	r1, 8004920 <ai_platform_bind_network_params+0x30>
 80048f6:	b18a      	cbz	r2, 800491c <ai_platform_bind_network_params+0x2c>
 80048f8:	b410      	push	{r4}
 80048fa:	4604      	mov	r4, r0
 80048fc:	4809      	ldr	r0, [pc, #36]	; (8004924 <ai_platform_bind_network_params+0x34>)
 80048fe:	f844 0b04 	str.w	r0, [r4], #4
 8004902:	c903      	ldmia	r1, {r0, r1}
 8004904:	e884 0003 	stmia.w	r4, {r0, r1}
 8004908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800490c:	330c      	adds	r3, #12
 800490e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004912:	2001      	movs	r0, #1
 8004914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	4770      	bx	lr
 800491c:	4610      	mov	r0, r2
 800491e:	4770      	bx	lr
 8004920:	4608      	mov	r0, r1
 8004922:	4770      	bx	lr
 8004924:	a1facade 	.word	0xa1facade

08004928 <ai_platform_runtime_get_revision>:
 8004928:	b508      	push	{r3, lr}
 800492a:	4a17      	ldr	r2, [pc, #92]	; (8004988 <ai_platform_runtime_get_revision+0x60>)
 800492c:	6813      	ldr	r3, [r2, #0]
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	f7ff ff36 	bl	80047a4 <_ai_platform_acquire_crc>
 8004938:	4b14      	ldr	r3, [pc, #80]	; (800498c <ai_platform_runtime_get_revision+0x64>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d00d      	beq.n	8004962 <ai_platform_runtime_get_revision+0x3a>
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <ai_platform_runtime_get_revision+0x68>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2a00      	cmp	r2, #0
 8004950:	d1fc      	bne.n	800494c <ai_platform_runtime_get_revision+0x24>
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <ai_platform_runtime_get_revision+0x6c>)
 8004954:	4a10      	ldr	r2, [pc, #64]	; (8004998 <ai_platform_runtime_get_revision+0x70>)
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <ai_platform_runtime_get_revision+0x74>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d00e      	beq.n	800497e <ai_platform_runtime_get_revision+0x56>
 8004960:	e7fe      	b.n	8004960 <ai_platform_runtime_get_revision+0x38>
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <ai_platform_runtime_get_revision+0x78>)
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	2a00      	cmp	r2, #0
 800496c:	d1fc      	bne.n	8004968 <ai_platform_runtime_get_revision+0x40>
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <ai_platform_runtime_get_revision+0x7c>)
 8004970:	4a09      	ldr	r2, [pc, #36]	; (8004998 <ai_platform_runtime_get_revision+0x70>)
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <ai_platform_runtime_get_revision+0x74>)
 8004978:	429a      	cmp	r2, r3
 800497a:	d000      	beq.n	800497e <ai_platform_runtime_get_revision+0x56>
 800497c:	e7fe      	b.n	800497c <ai_platform_runtime_get_revision+0x54>
 800497e:	f7ff ff13 	bl	80047a8 <_ai_platform_release_crc>
 8004982:	4809      	ldr	r0, [pc, #36]	; (80049a8 <ai_platform_runtime_get_revision+0x80>)
 8004984:	bd08      	pop	{r3, pc}
 8004986:	bf00      	nop
 8004988:	e0002000 	.word	0xe0002000
 800498c:	e0042000 	.word	0xe0042000
 8004990:	58024c08 	.word	0x58024c08
 8004994:	58024c00 	.word	0x58024c00
 8004998:	f407a5c2 	.word	0xf407a5c2
 800499c:	b5e8b5cd 	.word	0xb5e8b5cd
 80049a0:	40023008 	.word	0x40023008
 80049a4:	40023000 	.word	0x40023000
 80049a8:	0800f4e0 	.word	0x0800f4e0

080049ac <ai_platform_runtime_get_version>:
 80049ac:	b500      	push	{lr}
 80049ae:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <ai_platform_runtime_get_version+0x84>)
 80049b0:	6813      	ldr	r3, [r2, #0]
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	b083      	sub	sp, #12
 80049ba:	f7ff fef3 	bl	80047a4 <_ai_platform_acquire_crc>
 80049be:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <ai_platform_runtime_get_version+0x88>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ca:	d00d      	beq.n	80049e8 <ai_platform_runtime_get_version+0x3c>
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <ai_platform_runtime_get_version+0x8c>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	d1fc      	bne.n	80049d2 <ai_platform_runtime_get_version+0x26>
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <ai_platform_runtime_get_version+0x90>)
 80049da:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <ai_platform_runtime_get_version+0x94>)
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <ai_platform_runtime_get_version+0x98>)
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d00e      	beq.n	8004a04 <ai_platform_runtime_get_version+0x58>
 80049e6:	e7fe      	b.n	80049e6 <ai_platform_runtime_get_version+0x3a>
 80049e8:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <ai_platform_runtime_get_version+0x9c>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	d1fc      	bne.n	80049ee <ai_platform_runtime_get_version+0x42>
 80049f4:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <ai_platform_runtime_get_version+0xa0>)
 80049f6:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <ai_platform_runtime_get_version+0x94>)
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <ai_platform_runtime_get_version+0x98>)
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d000      	beq.n	8004a04 <ai_platform_runtime_get_version+0x58>
 8004a02:	e7fe      	b.n	8004a02 <ai_platform_runtime_get_version+0x56>
 8004a04:	f7ff fed0 	bl	80047a8 <_ai_platform_release_crc>
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <ai_platform_runtime_get_version+0xa4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	f362 0007 	bfi	r0, r2, #0, #8
 8004a14:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004a18:	f362 200f 	bfi	r0, r2, #8, #8
 8004a1c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004a20:	f362 4017 	bfi	r0, r2, #16, #8
 8004a24:	0e1b      	lsrs	r3, r3, #24
 8004a26:	f363 601f 	bfi	r0, r3, #24, #8
 8004a2a:	b003      	add	sp, #12
 8004a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a30:	e0002000 	.word	0xe0002000
 8004a34:	e0042000 	.word	0xe0042000
 8004a38:	58024c08 	.word	0x58024c08
 8004a3c:	58024c00 	.word	0x58024c00
 8004a40:	f407a5c2 	.word	0xf407a5c2
 8004a44:	b5e8b5cd 	.word	0xb5e8b5cd
 8004a48:	40023008 	.word	0x40023008
 8004a4c:	40023000 	.word	0x40023000
 8004a50:	0800f4e4 	.word	0x0800f4e4

08004a54 <ai_platform_api_get_version>:
 8004a54:	b500      	push	{lr}
 8004a56:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <ai_platform_api_get_version+0x84>)
 8004a58:	6813      	ldr	r3, [r2, #0]
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	b083      	sub	sp, #12
 8004a62:	f7ff fe9f 	bl	80047a4 <_ai_platform_acquire_crc>
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <ai_platform_api_get_version+0x88>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d00d      	beq.n	8004a90 <ai_platform_api_get_version+0x3c>
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <ai_platform_api_get_version+0x8c>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2a00      	cmp	r2, #0
 8004a7e:	d1fc      	bne.n	8004a7a <ai_platform_api_get_version+0x26>
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <ai_platform_api_get_version+0x90>)
 8004a82:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <ai_platform_api_get_version+0x94>)
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <ai_platform_api_get_version+0x98>)
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d00e      	beq.n	8004aac <ai_platform_api_get_version+0x58>
 8004a8e:	e7fe      	b.n	8004a8e <ai_platform_api_get_version+0x3a>
 8004a90:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <ai_platform_api_get_version+0x9c>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	d1fc      	bne.n	8004a96 <ai_platform_api_get_version+0x42>
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <ai_platform_api_get_version+0xa0>)
 8004a9e:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <ai_platform_api_get_version+0x94>)
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b11      	ldr	r3, [pc, #68]	; (8004aec <ai_platform_api_get_version+0x98>)
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d000      	beq.n	8004aac <ai_platform_api_get_version+0x58>
 8004aaa:	e7fe      	b.n	8004aaa <ai_platform_api_get_version+0x56>
 8004aac:	f7ff fe7c 	bl	80047a8 <_ai_platform_release_crc>
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <ai_platform_api_get_version+0xa4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	f362 0007 	bfi	r0, r2, #0, #8
 8004abc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ac0:	f362 200f 	bfi	r0, r2, #8, #8
 8004ac4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004ac8:	f362 4017 	bfi	r0, r2, #16, #8
 8004acc:	0e1b      	lsrs	r3, r3, #24
 8004ace:	f363 601f 	bfi	r0, r3, #24, #8
 8004ad2:	b003      	add	sp, #12
 8004ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ad8:	e0002000 	.word	0xe0002000
 8004adc:	e0042000 	.word	0xe0042000
 8004ae0:	58024c08 	.word	0x58024c08
 8004ae4:	58024c00 	.word	0x58024c00
 8004ae8:	f407a5c2 	.word	0xf407a5c2
 8004aec:	b5e8b5cd 	.word	0xb5e8b5cd
 8004af0:	40023008 	.word	0x40023008
 8004af4:	40023000 	.word	0x40023000
 8004af8:	0800f4e8 	.word	0x0800f4e8

08004afc <ai_platform_interface_api_get_version>:
 8004afc:	b500      	push	{lr}
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <ai_platform_interface_api_get_version+0x84>)
 8004b00:	6813      	ldr	r3, [r2, #0]
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	b083      	sub	sp, #12
 8004b0a:	f7ff fe4b 	bl	80047a4 <_ai_platform_acquire_crc>
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <ai_platform_interface_api_get_version+0x88>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1a:	d00d      	beq.n	8004b38 <ai_platform_interface_api_get_version+0x3c>
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <ai_platform_interface_api_get_version+0x8c>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	2a00      	cmp	r2, #0
 8004b26:	d1fc      	bne.n	8004b22 <ai_platform_interface_api_get_version+0x26>
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <ai_platform_interface_api_get_version+0x90>)
 8004b2a:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <ai_platform_interface_api_get_version+0x94>)
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <ai_platform_interface_api_get_version+0x98>)
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d00e      	beq.n	8004b54 <ai_platform_interface_api_get_version+0x58>
 8004b36:	e7fe      	b.n	8004b36 <ai_platform_interface_api_get_version+0x3a>
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <ai_platform_interface_api_get_version+0x9c>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d1fc      	bne.n	8004b3e <ai_platform_interface_api_get_version+0x42>
 8004b44:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <ai_platform_interface_api_get_version+0xa0>)
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <ai_platform_interface_api_get_version+0x94>)
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <ai_platform_interface_api_get_version+0x98>)
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d000      	beq.n	8004b54 <ai_platform_interface_api_get_version+0x58>
 8004b52:	e7fe      	b.n	8004b52 <ai_platform_interface_api_get_version+0x56>
 8004b54:	f7ff fe28 	bl	80047a8 <_ai_platform_release_crc>
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <ai_platform_interface_api_get_version+0xa4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	f362 0007 	bfi	r0, r2, #0, #8
 8004b64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b68:	f362 200f 	bfi	r0, r2, #8, #8
 8004b6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b70:	f362 4017 	bfi	r0, r2, #16, #8
 8004b74:	0e1b      	lsrs	r3, r3, #24
 8004b76:	f363 601f 	bfi	r0, r3, #24, #8
 8004b7a:	b003      	add	sp, #12
 8004b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b80:	e0002000 	.word	0xe0002000
 8004b84:	e0042000 	.word	0xe0042000
 8004b88:	58024c08 	.word	0x58024c08
 8004b8c:	58024c00 	.word	0x58024c00
 8004b90:	f407a5c2 	.word	0xf407a5c2
 8004b94:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b98:	40023008 	.word	0x40023008
 8004b9c:	40023000 	.word	0x40023000
 8004ba0:	0800f4ec 	.word	0x0800f4ec

08004ba4 <ai_platform_context_acquire>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	b120      	cbz	r0, 8004bb4 <ai_platform_context_acquire+0x10>
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <ai_platform_context_acquire+0x6c>)
 8004bac:	6802      	ldr	r2, [r0, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	bf18      	it	ne
 8004bb2:	2400      	movne	r4, #0
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <ai_platform_context_acquire+0x70>)
 8004bb6:	6813      	ldr	r3, [r2, #0]
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	f7ff fdf1 	bl	80047a4 <_ai_platform_acquire_crc>
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <ai_platform_context_acquire+0x74>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bce:	d00d      	beq.n	8004bec <ai_platform_context_acquire+0x48>
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <ai_platform_context_acquire+0x78>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	d1fc      	bne.n	8004bd6 <ai_platform_context_acquire+0x32>
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <ai_platform_context_acquire+0x7c>)
 8004bde:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <ai_platform_context_acquire+0x80>)
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <ai_platform_context_acquire+0x84>)
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d00e      	beq.n	8004c08 <ai_platform_context_acquire+0x64>
 8004bea:	e7fe      	b.n	8004bea <ai_platform_context_acquire+0x46>
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <ai_platform_context_acquire+0x88>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	d1fc      	bne.n	8004bf2 <ai_platform_context_acquire+0x4e>
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <ai_platform_context_acquire+0x8c>)
 8004bfa:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <ai_platform_context_acquire+0x80>)
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <ai_platform_context_acquire+0x84>)
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d000      	beq.n	8004c08 <ai_platform_context_acquire+0x64>
 8004c06:	e7fe      	b.n	8004c06 <ai_platform_context_acquire+0x62>
 8004c08:	f7ff fdce 	bl	80047a8 <_ai_platform_release_crc>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	bd10      	pop	{r4, pc}
 8004c10:	a1c00100 	.word	0xa1c00100
 8004c14:	e0002000 	.word	0xe0002000
 8004c18:	e0042000 	.word	0xe0042000
 8004c1c:	58024c08 	.word	0x58024c08
 8004c20:	58024c00 	.word	0x58024c00
 8004c24:	f407a5c2 	.word	0xf407a5c2
 8004c28:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c2c:	40023008 	.word	0x40023008
 8004c30:	40023000 	.word	0x40023000

08004c34 <ai_platform_network_get_error>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	b120      	cbz	r0, 8004c42 <ai_platform_network_get_error+0xe>
 8004c38:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <ai_platform_network_get_error+0xd0>)
 8004c3a:	6802      	ldr	r2, [r0, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	4604      	mov	r4, r0
 8004c40:	d02e      	beq.n	8004ca0 <ai_platform_network_get_error+0x6c>
 8004c42:	4a31      	ldr	r2, [pc, #196]	; (8004d08 <ai_platform_network_get_error+0xd4>)
 8004c44:	6813      	ldr	r3, [r2, #0]
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	f7ff fdaa 	bl	80047a4 <_ai_platform_acquire_crc>
 8004c50:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <ai_platform_network_get_error+0xd8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d00d      	beq.n	8004c7a <ai_platform_network_get_error+0x46>
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <ai_platform_network_get_error+0xdc>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	d1fc      	bne.n	8004c64 <ai_platform_network_get_error+0x30>
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <ai_platform_network_get_error+0xe0>)
 8004c6c:	4a2a      	ldr	r2, [pc, #168]	; (8004d18 <ai_platform_network_get_error+0xe4>)
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <ai_platform_network_get_error+0xe8>)
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d00d      	beq.n	8004c94 <ai_platform_network_get_error+0x60>
 8004c78:	e7fe      	b.n	8004c78 <ai_platform_network_get_error+0x44>
 8004c7a:	4b29      	ldr	r3, [pc, #164]	; (8004d20 <ai_platform_network_get_error+0xec>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	2a00      	cmp	r2, #0
 8004c84:	d1fc      	bne.n	8004c80 <ai_platform_network_get_error+0x4c>
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <ai_platform_network_get_error+0xf0>)
 8004c88:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <ai_platform_network_get_error+0xe4>)
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <ai_platform_network_get_error+0xe8>)
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d104      	bne.n	8004c9e <ai_platform_network_get_error+0x6a>
 8004c94:	f7ff fd88 	bl	80047a8 <_ai_platform_release_crc>
 8004c98:	f241 0010 	movw	r0, #4112	; 0x1010
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	e7fe      	b.n	8004c9e <ai_platform_network_get_error+0x6a>
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <ai_platform_network_get_error+0xd4>)
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	f7ff fd7b 	bl	80047a4 <_ai_platform_acquire_crc>
 8004cae:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <ai_platform_network_get_error+0xd8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cba:	d00d      	beq.n	8004cd8 <ai_platform_network_get_error+0xa4>
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <ai_platform_network_get_error+0xdc>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	d1fc      	bne.n	8004cc2 <ai_platform_network_get_error+0x8e>
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <ai_platform_network_get_error+0xe0>)
 8004cca:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <ai_platform_network_get_error+0xe4>)
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <ai_platform_network_get_error+0xe8>)
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d00e      	beq.n	8004cf4 <ai_platform_network_get_error+0xc0>
 8004cd6:	e7fe      	b.n	8004cd6 <ai_platform_network_get_error+0xa2>
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <ai_platform_network_get_error+0xec>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d1fc      	bne.n	8004cde <ai_platform_network_get_error+0xaa>
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <ai_platform_network_get_error+0xf0>)
 8004ce6:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <ai_platform_network_get_error+0xe4>)
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <ai_platform_network_get_error+0xe8>)
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d000      	beq.n	8004cf4 <ai_platform_network_get_error+0xc0>
 8004cf2:	e7fe      	b.n	8004cf2 <ai_platform_network_get_error+0xbe>
 8004cf4:	f7ff fd58 	bl	80047a8 <_ai_platform_release_crc>
 8004cf8:	f104 0010 	add.w	r0, r4, #16
 8004cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d00:	f001 b9e6 	b.w	80060d0 <core_get_error>
 8004d04:	a1c00100 	.word	0xa1c00100
 8004d08:	e0002000 	.word	0xe0002000
 8004d0c:	e0042000 	.word	0xe0042000
 8004d10:	58024c08 	.word	0x58024c08
 8004d14:	58024c00 	.word	0x58024c00
 8004d18:	f407a5c2 	.word	0xf407a5c2
 8004d1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004d20:	40023008 	.word	0x40023008
 8004d24:	40023000 	.word	0x40023000

08004d28 <ai_platform_network_set_error>:
 8004d28:	b110      	cbz	r0, 8004d30 <ai_platform_network_set_error+0x8>
 8004d2a:	3010      	adds	r0, #16
 8004d2c:	f001 b9d6 	b.w	80060dc <core_set_error>
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop

08004d34 <ai_platform_inputs_get>:
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	f000 80a1 	beq.w	8004e82 <ai_platform_inputs_get+0x14e>
 8004d40:	4b6d      	ldr	r3, [pc, #436]	; (8004ef8 <ai_platform_inputs_get+0x1c4>)
 8004d42:	6802      	ldr	r2, [r0, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	4607      	mov	r7, r0
 8004d48:	f040 809b 	bne.w	8004e82 <ai_platform_inputs_get+0x14e>
 8004d4c:	4a6b      	ldr	r2, [pc, #428]	; (8004efc <ai_platform_inputs_get+0x1c8>)
 8004d4e:	6813      	ldr	r3, [r2, #0]
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	468b      	mov	fp, r1
 8004d58:	f7ff fd24 	bl	80047a4 <_ai_platform_acquire_crc>
 8004d5c:	4b68      	ldr	r3, [pc, #416]	; (8004f00 <ai_platform_inputs_get+0x1cc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d68:	d00d      	beq.n	8004d86 <ai_platform_inputs_get+0x52>
 8004d6a:	4b66      	ldr	r3, [pc, #408]	; (8004f04 <ai_platform_inputs_get+0x1d0>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	d1fc      	bne.n	8004d70 <ai_platform_inputs_get+0x3c>
 8004d76:	4b64      	ldr	r3, [pc, #400]	; (8004f08 <ai_platform_inputs_get+0x1d4>)
 8004d78:	4a64      	ldr	r2, [pc, #400]	; (8004f0c <ai_platform_inputs_get+0x1d8>)
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b64      	ldr	r3, [pc, #400]	; (8004f10 <ai_platform_inputs_get+0x1dc>)
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d00d      	beq.n	8004da0 <ai_platform_inputs_get+0x6c>
 8004d84:	e7fe      	b.n	8004d84 <ai_platform_inputs_get+0x50>
 8004d86:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <ai_platform_inputs_get+0x1e0>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	d1fc      	bne.n	8004d8c <ai_platform_inputs_get+0x58>
 8004d92:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <ai_platform_inputs_get+0x1e4>)
 8004d94:	4a5d      	ldr	r2, [pc, #372]	; (8004f0c <ai_platform_inputs_get+0x1d8>)
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <ai_platform_inputs_get+0x1dc>)
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d16f      	bne.n	8004e80 <ai_platform_inputs_get+0x14c>
 8004da0:	f7ff fd02 	bl	80047a8 <_ai_platform_release_crc>
 8004da4:	f1bb 0f00 	cmp.w	fp, #0
 8004da8:	d002      	beq.n	8004db0 <ai_platform_inputs_get+0x7c>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8ab 3000 	strh.w	r3, [fp]
 8004db0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8081 	beq.w	8004eba <ai_platform_inputs_get+0x186>
 8004db8:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8004dba:	2e00      	cmp	r6, #0
 8004dbc:	d07d      	beq.n	8004eba <ai_platform_inputs_get+0x186>
 8004dbe:	8833      	ldrh	r3, [r6, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d07a      	beq.n	8004eba <ai_platform_inputs_get+0x186>
 8004dc4:	6873      	ldr	r3, [r6, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d077      	beq.n	8004eba <ai_platform_inputs_get+0x186>
 8004dca:	681d      	ldr	r5, [r3, #0]
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	d074      	beq.n	8004eba <ai_platform_inputs_get+0x186>
 8004dd0:	f04f 0800 	mov.w	r8, #0
 8004dd4:	f8cd b008 	str.w	fp, [sp, #8]
 8004dd8:	46c1      	mov	r9, r8
 8004dda:	46bb      	mov	fp, r7
 8004ddc:	68b0      	ldr	r0, [r6, #8]
 8004dde:	69aa      	ldr	r2, [r5, #24]
 8004de0:	68ab      	ldr	r3, [r5, #8]
 8004de2:	6844      	ldr	r4, [r0, #4]
 8004de4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8004de8:	6810      	ldr	r0, [r2, #0]
 8004dea:	68ef      	ldr	r7, [r5, #12]
 8004dec:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004df0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	9203      	str	r2, [sp, #12]
 8004df8:	f001 ffea 	bl	8006dd0 <ai_array_to_buffer_fmt>
 8004dfc:	9a03      	ldr	r2, [sp, #12]
 8004dfe:	4601      	mov	r1, r0
 8004e00:	69a8      	ldr	r0, [r5, #24]
 8004e02:	eb0a 0302 	add.w	r3, sl, r2
 8004e06:	4444      	add	r4, r8
 8004e08:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8004e0c:	b16b      	cbz	r3, 8004e2a <ai_platform_inputs_get+0xf6>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8004e14:	6828      	ldr	r0, [r5, #0]
 8004e16:	6058      	str	r0, [r3, #4]
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d058      	beq.n	8004ece <ai_platform_inputs_get+0x19a>
 8004e1c:	8840      	ldrh	r0, [r0, #2]
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d055      	beq.n	8004ece <ai_platform_inputs_get+0x19a>
 8004e22:	2001      	movs	r0, #1
 8004e24:	f84a 0002 	str.w	r0, [sl, r2]
 8004e28:	69a8      	ldr	r0, [r5, #24]
 8004e2a:	6842      	ldr	r2, [r0, #4]
 8004e2c:	6122      	str	r2, [r4, #16]
 8004e2e:	f04f 0001 	mov.w	r0, #1
 8004e32:	7520      	strb	r0, [r4, #20]
 8004e34:	9a01      	ldr	r2, [sp, #4]
 8004e36:	6960      	ldr	r0, [r4, #20]
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	f362 201f 	bfi	r0, r2, #8, #24
 8004e3e:	e9c4 1e00 	strd	r1, lr, [r4]
 8004e42:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8004e46:	2300      	movs	r3, #0
 8004e48:	60e3      	str	r3, [r4, #12]
 8004e4a:	8830      	ldrh	r0, [r6, #0]
 8004e4c:	f109 0301 	add.w	r3, r9, #1
 8004e50:	4283      	cmp	r3, r0
 8004e52:	4699      	mov	r9, r3
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	d207      	bcs.n	8004e68 <ai_platform_inputs_get+0x134>
 8004e58:	6870      	ldr	r0, [r6, #4]
 8004e5a:	b128      	cbz	r0, 8004e68 <ai_platform_inputs_get+0x134>
 8004e5c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8004e60:	f108 081c 	add.w	r8, r8, #28
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	d1b9      	bne.n	8004ddc <ai_platform_inputs_get+0xa8>
 8004e68:	465f      	mov	r7, fp
 8004e6a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e6e:	b322      	cbz	r2, 8004eba <ai_platform_inputs_get+0x186>
 8004e70:	68b3      	ldr	r3, [r6, #8]
 8004e72:	6858      	ldr	r0, [r3, #4]
 8004e74:	f1bb 0f00 	cmp.w	fp, #0
 8004e78:	d026      	beq.n	8004ec8 <ai_platform_inputs_get+0x194>
 8004e7a:	f8ab 2000 	strh.w	r2, [fp]
 8004e7e:	e023      	b.n	8004ec8 <ai_platform_inputs_get+0x194>
 8004e80:	e7fe      	b.n	8004e80 <ai_platform_inputs_get+0x14c>
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <ai_platform_inputs_get+0x1c8>)
 8004e84:	6813      	ldr	r3, [r2, #0]
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	f7ff fc8a 	bl	80047a4 <_ai_platform_acquire_crc>
 8004e90:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <ai_platform_inputs_get+0x1cc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9c:	d01a      	beq.n	8004ed4 <ai_platform_inputs_get+0x1a0>
 8004e9e:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <ai_platform_inputs_get+0x1d0>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d1fc      	bne.n	8004ea4 <ai_platform_inputs_get+0x170>
 8004eaa:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <ai_platform_inputs_get+0x1d4>)
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <ai_platform_inputs_get+0x1d8>)
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <ai_platform_inputs_get+0x1dc>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d01b      	beq.n	8004ef0 <ai_platform_inputs_get+0x1bc>
 8004eb8:	e7fe      	b.n	8004eb8 <ai_platform_inputs_get+0x184>
 8004eba:	f107 0010 	add.w	r0, r7, #16
 8004ebe:	2218      	movs	r2, #24
 8004ec0:	2111      	movs	r1, #17
 8004ec2:	f001 f90b 	bl	80060dc <core_set_error>
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	b005      	add	sp, #20
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	69a8      	ldr	r0, [r5, #24]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e7aa      	b.n	8004e2a <ai_platform_inputs_get+0xf6>
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <ai_platform_inputs_get+0x1e0>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d1fc      	bne.n	8004eda <ai_platform_inputs_get+0x1a6>
 8004ee0:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <ai_platform_inputs_get+0x1e4>)
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <ai_platform_inputs_get+0x1d8>)
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <ai_platform_inputs_get+0x1dc>)
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d000      	beq.n	8004ef0 <ai_platform_inputs_get+0x1bc>
 8004eee:	e7fe      	b.n	8004eee <ai_platform_inputs_get+0x1ba>
 8004ef0:	f7ff fc5a 	bl	80047a8 <_ai_platform_release_crc>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e7e7      	b.n	8004ec8 <ai_platform_inputs_get+0x194>
 8004ef8:	a1c00100 	.word	0xa1c00100
 8004efc:	e0002000 	.word	0xe0002000
 8004f00:	e0042000 	.word	0xe0042000
 8004f04:	58024c08 	.word	0x58024c08
 8004f08:	58024c00 	.word	0x58024c00
 8004f0c:	f407a5c2 	.word	0xf407a5c2
 8004f10:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f14:	40023008 	.word	0x40023008
 8004f18:	40023000 	.word	0x40023000

08004f1c <ai_platform_outputs_get>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	b085      	sub	sp, #20
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f000 80a9 	beq.w	800507a <ai_platform_outputs_get+0x15e>
 8004f28:	4b70      	ldr	r3, [pc, #448]	; (80050ec <ai_platform_outputs_get+0x1d0>)
 8004f2a:	6802      	ldr	r2, [r0, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	4607      	mov	r7, r0
 8004f30:	f040 80a3 	bne.w	800507a <ai_platform_outputs_get+0x15e>
 8004f34:	4a6e      	ldr	r2, [pc, #440]	; (80050f0 <ai_platform_outputs_get+0x1d4>)
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	468b      	mov	fp, r1
 8004f40:	f7ff fc30 	bl	80047a4 <_ai_platform_acquire_crc>
 8004f44:	4b6b      	ldr	r3, [pc, #428]	; (80050f4 <ai_platform_outputs_get+0x1d8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d00d      	beq.n	8004f6e <ai_platform_outputs_get+0x52>
 8004f52:	4b69      	ldr	r3, [pc, #420]	; (80050f8 <ai_platform_outputs_get+0x1dc>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	d1fc      	bne.n	8004f58 <ai_platform_outputs_get+0x3c>
 8004f5e:	4b67      	ldr	r3, [pc, #412]	; (80050fc <ai_platform_outputs_get+0x1e0>)
 8004f60:	4a67      	ldr	r2, [pc, #412]	; (8005100 <ai_platform_outputs_get+0x1e4>)
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b67      	ldr	r3, [pc, #412]	; (8005104 <ai_platform_outputs_get+0x1e8>)
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d00d      	beq.n	8004f88 <ai_platform_outputs_get+0x6c>
 8004f6c:	e7fe      	b.n	8004f6c <ai_platform_outputs_get+0x50>
 8004f6e:	4b66      	ldr	r3, [pc, #408]	; (8005108 <ai_platform_outputs_get+0x1ec>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	d1fc      	bne.n	8004f74 <ai_platform_outputs_get+0x58>
 8004f7a:	4b64      	ldr	r3, [pc, #400]	; (800510c <ai_platform_outputs_get+0x1f0>)
 8004f7c:	4a60      	ldr	r2, [pc, #384]	; (8005100 <ai_platform_outputs_get+0x1e4>)
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b60      	ldr	r3, [pc, #384]	; (8005104 <ai_platform_outputs_get+0x1e8>)
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d177      	bne.n	8005078 <ai_platform_outputs_get+0x15c>
 8004f88:	f7ff fc0e 	bl	80047a8 <_ai_platform_release_crc>
 8004f8c:	f1bb 0f00 	cmp.w	fp, #0
 8004f90:	d002      	beq.n	8004f98 <ai_platform_outputs_get+0x7c>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8ab 3000 	strh.w	r3, [fp]
 8004f98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	f240 809a 	bls.w	80050d4 <ai_platform_outputs_get+0x1b8>
 8004fa0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8004fa2:	f116 0f0c 	cmn.w	r6, #12
 8004fa6:	f000 8095 	beq.w	80050d4 <ai_platform_outputs_get+0x1b8>
 8004faa:	89b3      	ldrh	r3, [r6, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8091 	beq.w	80050d4 <ai_platform_outputs_get+0x1b8>
 8004fb2:	6933      	ldr	r3, [r6, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 808d 	beq.w	80050d4 <ai_platform_outputs_get+0x1b8>
 8004fba:	681d      	ldr	r5, [r3, #0]
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	f000 8089 	beq.w	80050d4 <ai_platform_outputs_get+0x1b8>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	f8cd b008 	str.w	fp, [sp, #8]
 8004fca:	46c1      	mov	r9, r8
 8004fcc:	46bb      	mov	fp, r7
 8004fce:	6970      	ldr	r0, [r6, #20]
 8004fd0:	69aa      	ldr	r2, [r5, #24]
 8004fd2:	68ab      	ldr	r3, [r5, #8]
 8004fd4:	6844      	ldr	r4, [r0, #4]
 8004fd6:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8004fda:	6810      	ldr	r0, [r2, #0]
 8004fdc:	68ef      	ldr	r7, [r5, #12]
 8004fde:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004fe2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	9203      	str	r2, [sp, #12]
 8004fea:	f001 fef1 	bl	8006dd0 <ai_array_to_buffer_fmt>
 8004fee:	9a03      	ldr	r2, [sp, #12]
 8004ff0:	4601      	mov	r1, r0
 8004ff2:	69a8      	ldr	r0, [r5, #24]
 8004ff4:	eb0a 0302 	add.w	r3, sl, r2
 8004ff8:	4444      	add	r4, r8
 8004ffa:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8004ffe:	b16b      	cbz	r3, 800501c <ai_platform_outputs_get+0x100>
 8005000:	2000      	movs	r0, #0
 8005002:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8005006:	6828      	ldr	r0, [r5, #0]
 8005008:	6058      	str	r0, [r3, #4]
 800500a:	2800      	cmp	r0, #0
 800500c:	d051      	beq.n	80050b2 <ai_platform_outputs_get+0x196>
 800500e:	8840      	ldrh	r0, [r0, #2]
 8005010:	2800      	cmp	r0, #0
 8005012:	d04e      	beq.n	80050b2 <ai_platform_outputs_get+0x196>
 8005014:	2001      	movs	r0, #1
 8005016:	f84a 0002 	str.w	r0, [sl, r2]
 800501a:	69a8      	ldr	r0, [r5, #24]
 800501c:	6842      	ldr	r2, [r0, #4]
 800501e:	6122      	str	r2, [r4, #16]
 8005020:	f04f 0001 	mov.w	r0, #1
 8005024:	7520      	strb	r0, [r4, #20]
 8005026:	9a01      	ldr	r2, [sp, #4]
 8005028:	6960      	ldr	r0, [r4, #20]
 800502a:	60a3      	str	r3, [r4, #8]
 800502c:	f362 201f 	bfi	r0, r2, #8, #24
 8005030:	e9c4 1e00 	strd	r1, lr, [r4]
 8005034:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8005038:	2300      	movs	r3, #0
 800503a:	60e3      	str	r3, [r4, #12]
 800503c:	89b0      	ldrh	r0, [r6, #12]
 800503e:	f109 0301 	add.w	r3, r9, #1
 8005042:	4283      	cmp	r3, r0
 8005044:	4699      	mov	r9, r3
 8005046:	b29a      	uxth	r2, r3
 8005048:	d207      	bcs.n	800505a <ai_platform_outputs_get+0x13e>
 800504a:	6930      	ldr	r0, [r6, #16]
 800504c:	b128      	cbz	r0, 800505a <ai_platform_outputs_get+0x13e>
 800504e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8005052:	f108 081c 	add.w	r8, r8, #28
 8005056:	2d00      	cmp	r5, #0
 8005058:	d1b9      	bne.n	8004fce <ai_platform_outputs_get+0xb2>
 800505a:	465f      	mov	r7, fp
 800505c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005060:	2a00      	cmp	r2, #0
 8005062:	d037      	beq.n	80050d4 <ai_platform_outputs_get+0x1b8>
 8005064:	6973      	ldr	r3, [r6, #20]
 8005066:	6858      	ldr	r0, [r3, #4]
 8005068:	f1bb 0f00 	cmp.w	fp, #0
 800506c:	d001      	beq.n	8005072 <ai_platform_outputs_get+0x156>
 800506e:	f8ab 2000 	strh.w	r2, [fp]
 8005072:	b005      	add	sp, #20
 8005074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005078:	e7fe      	b.n	8005078 <ai_platform_outputs_get+0x15c>
 800507a:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <ai_platform_outputs_get+0x1d4>)
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	f7ff fb8e 	bl	80047a4 <_ai_platform_acquire_crc>
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <ai_platform_outputs_get+0x1d8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005094:	d010      	beq.n	80050b8 <ai_platform_outputs_get+0x19c>
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <ai_platform_outputs_get+0x1dc>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	2a00      	cmp	r2, #0
 80050a0:	d1fc      	bne.n	800509c <ai_platform_outputs_get+0x180>
 80050a2:	4b16      	ldr	r3, [pc, #88]	; (80050fc <ai_platform_outputs_get+0x1e0>)
 80050a4:	4a16      	ldr	r2, [pc, #88]	; (8005100 <ai_platform_outputs_get+0x1e4>)
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <ai_platform_outputs_get+0x1e8>)
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d019      	beq.n	80050e4 <ai_platform_outputs_get+0x1c8>
 80050b0:	e7fe      	b.n	80050b0 <ai_platform_outputs_get+0x194>
 80050b2:	69a8      	ldr	r0, [r5, #24]
 80050b4:	2300      	movs	r3, #0
 80050b6:	e7b1      	b.n	800501c <ai_platform_outputs_get+0x100>
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <ai_platform_outputs_get+0x1ec>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	2a00      	cmp	r2, #0
 80050c2:	d1fc      	bne.n	80050be <ai_platform_outputs_get+0x1a2>
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <ai_platform_outputs_get+0x1f0>)
 80050c6:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <ai_platform_outputs_get+0x1e4>)
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <ai_platform_outputs_get+0x1e8>)
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d008      	beq.n	80050e4 <ai_platform_outputs_get+0x1c8>
 80050d2:	e7fe      	b.n	80050d2 <ai_platform_outputs_get+0x1b6>
 80050d4:	f107 0010 	add.w	r0, r7, #16
 80050d8:	2218      	movs	r2, #24
 80050da:	2111      	movs	r1, #17
 80050dc:	f000 fffe 	bl	80060dc <core_set_error>
 80050e0:	2000      	movs	r0, #0
 80050e2:	e7c6      	b.n	8005072 <ai_platform_outputs_get+0x156>
 80050e4:	f7ff fb60 	bl	80047a8 <_ai_platform_release_crc>
 80050e8:	2000      	movs	r0, #0
 80050ea:	e7c2      	b.n	8005072 <ai_platform_outputs_get+0x156>
 80050ec:	a1c00100 	.word	0xa1c00100
 80050f0:	e0002000 	.word	0xe0002000
 80050f4:	e0042000 	.word	0xe0042000
 80050f8:	58024c08 	.word	0x58024c08
 80050fc:	58024c00 	.word	0x58024c00
 8005100:	f407a5c2 	.word	0xf407a5c2
 8005104:	b5e8b5cd 	.word	0xb5e8b5cd
 8005108:	40023008 	.word	0x40023008
 800510c:	40023000 	.word	0x40023000

08005110 <ai_platform_api_get_network_report>:
 8005110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005114:	b089      	sub	sp, #36	; 0x24
 8005116:	b120      	cbz	r0, 8005122 <ai_platform_api_get_network_report+0x12>
 8005118:	4b79      	ldr	r3, [pc, #484]	; (8005300 <ai_platform_api_get_network_report+0x1f0>)
 800511a:	6802      	ldr	r2, [r0, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	4605      	mov	r5, r0
 8005120:	d030      	beq.n	8005184 <ai_platform_api_get_network_report+0x74>
 8005122:	4a78      	ldr	r2, [pc, #480]	; (8005304 <ai_platform_api_get_network_report+0x1f4>)
 8005124:	6813      	ldr	r3, [r2, #0]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	f7ff fb3a 	bl	80047a4 <_ai_platform_acquire_crc>
 8005130:	4b75      	ldr	r3, [pc, #468]	; (8005308 <ai_platform_api_get_network_report+0x1f8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d00d      	beq.n	800515a <ai_platform_api_get_network_report+0x4a>
 800513e:	4b73      	ldr	r3, [pc, #460]	; (800530c <ai_platform_api_get_network_report+0x1fc>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	2a00      	cmp	r2, #0
 8005148:	d1fc      	bne.n	8005144 <ai_platform_api_get_network_report+0x34>
 800514a:	4b71      	ldr	r3, [pc, #452]	; (8005310 <ai_platform_api_get_network_report+0x200>)
 800514c:	4a71      	ldr	r2, [pc, #452]	; (8005314 <ai_platform_api_get_network_report+0x204>)
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b71      	ldr	r3, [pc, #452]	; (8005318 <ai_platform_api_get_network_report+0x208>)
 8005154:	429a      	cmp	r2, r3
 8005156:	d00d      	beq.n	8005174 <ai_platform_api_get_network_report+0x64>
 8005158:	e7fe      	b.n	8005158 <ai_platform_api_get_network_report+0x48>
 800515a:	4b70      	ldr	r3, [pc, #448]	; (800531c <ai_platform_api_get_network_report+0x20c>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	2a00      	cmp	r2, #0
 8005164:	d1fc      	bne.n	8005160 <ai_platform_api_get_network_report+0x50>
 8005166:	4b6e      	ldr	r3, [pc, #440]	; (8005320 <ai_platform_api_get_network_report+0x210>)
 8005168:	4a6a      	ldr	r2, [pc, #424]	; (8005314 <ai_platform_api_get_network_report+0x204>)
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b6a      	ldr	r3, [pc, #424]	; (8005318 <ai_platform_api_get_network_report+0x208>)
 8005170:	429a      	cmp	r2, r3
 8005172:	d106      	bne.n	8005182 <ai_platform_api_get_network_report+0x72>
 8005174:	f7ff fb18 	bl	80047a8 <_ai_platform_release_crc>
 8005178:	2600      	movs	r6, #0
 800517a:	4630      	mov	r0, r6
 800517c:	b009      	add	sp, #36	; 0x24
 800517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005182:	e7fe      	b.n	8005182 <ai_platform_api_get_network_report+0x72>
 8005184:	4a5f      	ldr	r2, [pc, #380]	; (8005304 <ai_platform_api_get_network_report+0x1f4>)
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	460c      	mov	r4, r1
 8005190:	f7ff fb08 	bl	80047a4 <_ai_platform_acquire_crc>
 8005194:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <ai_platform_api_get_network_report+0x1f8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a0:	d00d      	beq.n	80051be <ai_platform_api_get_network_report+0xae>
 80051a2:	4b5a      	ldr	r3, [pc, #360]	; (800530c <ai_platform_api_get_network_report+0x1fc>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	d1fc      	bne.n	80051a8 <ai_platform_api_get_network_report+0x98>
 80051ae:	4b58      	ldr	r3, [pc, #352]	; (8005310 <ai_platform_api_get_network_report+0x200>)
 80051b0:	4a58      	ldr	r2, [pc, #352]	; (8005314 <ai_platform_api_get_network_report+0x204>)
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b58      	ldr	r3, [pc, #352]	; (8005318 <ai_platform_api_get_network_report+0x208>)
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d00e      	beq.n	80051da <ai_platform_api_get_network_report+0xca>
 80051bc:	e7fe      	b.n	80051bc <ai_platform_api_get_network_report+0xac>
 80051be:	4b57      	ldr	r3, [pc, #348]	; (800531c <ai_platform_api_get_network_report+0x20c>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d1fc      	bne.n	80051c4 <ai_platform_api_get_network_report+0xb4>
 80051ca:	4b55      	ldr	r3, [pc, #340]	; (8005320 <ai_platform_api_get_network_report+0x210>)
 80051cc:	4a51      	ldr	r2, [pc, #324]	; (8005314 <ai_platform_api_get_network_report+0x204>)
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b51      	ldr	r3, [pc, #324]	; (8005318 <ai_platform_api_get_network_report+0x208>)
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d000      	beq.n	80051da <ai_platform_api_get_network_report+0xca>
 80051d8:	e7fe      	b.n	80051d8 <ai_platform_api_get_network_report+0xc8>
 80051da:	f7ff fae5 	bl	80047a8 <_ai_platform_release_crc>
 80051de:	2c00      	cmp	r4, #0
 80051e0:	d0ca      	beq.n	8005178 <ai_platform_api_get_network_report+0x68>
 80051e2:	2300      	movs	r3, #0
 80051e4:	6763      	str	r3, [r4, #116]	; 0x74
 80051e6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d077      	beq.n	80052dc <ai_platform_api_get_network_report+0x1cc>
 80051ec:	2301      	movs	r3, #1
 80051ee:	6763      	str	r3, [r4, #116]	; 0x74
 80051f0:	6913      	ldr	r3, [r2, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d00c      	beq.n	8005210 <ai_platform_api_get_network_report+0x100>
 80051f6:	b15b      	cbz	r3, 8005210 <ai_platform_api_get_network_report+0x100>
 80051f8:	2202      	movs	r2, #2
 80051fa:	e003      	b.n	8005204 <ai_platform_api_get_network_report+0xf4>
 80051fc:	1c50      	adds	r0, r2, #1
 80051fe:	460b      	mov	r3, r1
 8005200:	b121      	cbz	r1, 800520c <ai_platform_api_get_network_report+0xfc>
 8005202:	4602      	mov	r2, r0
 8005204:	6762      	str	r2, [r4, #116]	; 0x74
 8005206:	6919      	ldr	r1, [r3, #16]
 8005208:	4299      	cmp	r1, r3
 800520a:	d1f7      	bne.n	80051fc <ai_platform_api_get_network_report+0xec>
 800520c:	2a00      	cmp	r2, #0
 800520e:	d065      	beq.n	80052dc <ai_platform_api_get_network_report+0x1cc>
 8005210:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d06a      	beq.n	80052ec <ai_platform_api_get_network_report+0x1dc>
 8005216:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800521a:	f1bb 0f00 	cmp.w	fp, #0
 800521e:	d065      	beq.n	80052ec <ai_platform_api_get_network_report+0x1dc>
 8005220:	f8bb 3000 	ldrh.w	r3, [fp]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d061      	beq.n	80052ec <ai_platform_api_get_network_report+0x1dc>
 8005228:	f8db 3004 	ldr.w	r3, [fp, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05d      	beq.n	80052ec <ai_platform_api_get_network_report+0x1dc>
 8005230:	681e      	ldr	r6, [r3, #0]
 8005232:	2e00      	cmp	r6, #0
 8005234:	d05a      	beq.n	80052ec <ai_platform_api_get_network_report+0x1dc>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	e023      	b.n	8005284 <ai_platform_api_get_network_report+0x174>
 800523c:	69b2      	ldr	r2, [r6, #24]
 800523e:	2100      	movs	r1, #0
 8005240:	6856      	ldr	r6, [r2, #4]
 8005242:	f849 000c 	str.w	r0, [r9, ip]
 8005246:	f04f 0201 	mov.w	r2, #1
 800524a:	751a      	strb	r2, [r3, #20]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	9800      	ldr	r0, [sp, #0]
 8005250:	611e      	str	r6, [r3, #16]
 8005252:	e9c3 e101 	strd	lr, r1, [r3, #4]
 8005256:	2100      	movs	r1, #0
 8005258:	60d9      	str	r1, [r3, #12]
 800525a:	9901      	ldr	r1, [sp, #4]
 800525c:	f360 221f 	bfi	r2, r0, #8, #24
 8005260:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8005264:	f8bb 1000 	ldrh.w	r1, [fp]
 8005268:	f108 0301 	add.w	r3, r8, #1
 800526c:	428b      	cmp	r3, r1
 800526e:	4698      	mov	r8, r3
 8005270:	b29a      	uxth	r2, r3
 8005272:	d257      	bcs.n	8005324 <ai_platform_api_get_network_report+0x214>
 8005274:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005278:	2900      	cmp	r1, #0
 800527a:	d053      	beq.n	8005324 <ai_platform_api_get_network_report+0x214>
 800527c:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8005280:	2e00      	cmp	r6, #0
 8005282:	d04f      	beq.n	8005324 <ai_platform_api_get_network_report+0x214>
 8005284:	f8db 2008 	ldr.w	r2, [fp, #8]
 8005288:	69b1      	ldr	r1, [r6, #24]
 800528a:	68b3      	ldr	r3, [r6, #8]
 800528c:	6897      	ldr	r7, [r2, #8]
 800528e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005292:	6808      	ldr	r0, [r1, #0]
 8005294:	68f2      	ldr	r2, [r6, #12]
 8005296:	9201      	str	r2, [sp, #4]
 8005298:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 80052a2:	f001 fd95 	bl	8006dd0 <ai_array_to_buffer_fmt>
 80052a6:	231c      	movs	r3, #28
 80052a8:	69b2      	ldr	r2, [r6, #24]
 80052aa:	fb03 fc08 	mul.w	ip, r3, r8
 80052ae:	eb07 010a 	add.w	r1, r7, sl
 80052b2:	eb09 030c 	add.w	r3, r9, ip
 80052b6:	f8d2 e008 	ldr.w	lr, [r2, #8]
 80052ba:	2900      	cmp	r1, #0
 80052bc:	d0bf      	beq.n	800523e <ai_platform_api_get_network_report+0x12e>
 80052be:	2200      	movs	r2, #0
 80052c0:	f847 2038 	str.w	r2, [r7, r8, lsl #3]
 80052c4:	6832      	ldr	r2, [r6, #0]
 80052c6:	604a      	str	r2, [r1, #4]
 80052c8:	2a00      	cmp	r2, #0
 80052ca:	d0b7      	beq.n	800523c <ai_platform_api_get_network_report+0x12c>
 80052cc:	8852      	ldrh	r2, [r2, #2]
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d0b4      	beq.n	800523c <ai_platform_api_get_network_report+0x12c>
 80052d2:	2201      	movs	r2, #1
 80052d4:	f847 200a 	str.w	r2, [r7, sl]
 80052d8:	69b2      	ldr	r2, [r6, #24]
 80052da:	e7b1      	b.n	8005240 <ai_platform_api_get_network_report+0x130>
 80052dc:	f105 0010 	add.w	r0, r5, #16
 80052e0:	2218      	movs	r2, #24
 80052e2:	2111      	movs	r1, #17
 80052e4:	f000 fefa 	bl	80060dc <core_set_error>
 80052e8:	2600      	movs	r6, #0
 80052ea:	e746      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 80052ec:	2600      	movs	r6, #0
 80052ee:	f105 0010 	add.w	r0, r5, #16
 80052f2:	8626      	strh	r6, [r4, #48]	; 0x30
 80052f4:	2218      	movs	r2, #24
 80052f6:	2112      	movs	r1, #18
 80052f8:	f000 fef0 	bl	80060dc <core_set_error>
 80052fc:	e73d      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 80052fe:	bf00      	nop
 8005300:	a1c00100 	.word	0xa1c00100
 8005304:	e0002000 	.word	0xe0002000
 8005308:	e0042000 	.word	0xe0042000
 800530c:	58024c08 	.word	0x58024c08
 8005310:	58024c00 	.word	0x58024c00
 8005314:	f407a5c2 	.word	0xf407a5c2
 8005318:	b5e8b5cd 	.word	0xb5e8b5cd
 800531c:	40023008 	.word	0x40023008
 8005320:	40023000 	.word	0x40023000
 8005324:	2a00      	cmp	r2, #0
 8005326:	d0e1      	beq.n	80052ec <ai_platform_api_get_network_report+0x1dc>
 8005328:	f8db 3008 	ldr.w	r3, [fp, #8]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	6363      	str	r3, [r4, #52]	; 0x34
 8005330:	8622      	strh	r2, [r4, #48]	; 0x30
 8005332:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005334:	2b01      	cmp	r3, #1
 8005336:	f240 81ae 	bls.w	8005696 <ai_platform_api_get_network_report+0x586>
 800533a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800533e:	f04f 0800 	mov.w	r8, #0
 8005342:	f10a 0b0c 	add.w	fp, sl, #12
 8005346:	fa1f f388 	uxth.w	r3, r8
 800534a:	f1bb 0f00 	cmp.w	fp, #0
 800534e:	d04d      	beq.n	80053ec <ai_platform_api_get_network_report+0x2dc>
 8005350:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 8005354:	4590      	cmp	r8, r2
 8005356:	d249      	bcs.n	80053ec <ai_platform_api_get_network_report+0x2dc>
 8005358:	f8da 2010 	ldr.w	r2, [sl, #16]
 800535c:	2a00      	cmp	r2, #0
 800535e:	d045      	beq.n	80053ec <ai_platform_api_get_network_report+0x2dc>
 8005360:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 8005364:	2e00      	cmp	r6, #0
 8005366:	d041      	beq.n	80053ec <ai_platform_api_get_network_report+0x2dc>
 8005368:	f8da 2014 	ldr.w	r2, [sl, #20]
 800536c:	69b1      	ldr	r1, [r6, #24]
 800536e:	68b3      	ldr	r3, [r6, #8]
 8005370:	6897      	ldr	r7, [r2, #8]
 8005372:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005376:	6808      	ldr	r0, [r1, #0]
 8005378:	68f2      	ldr	r2, [r6, #12]
 800537a:	9202      	str	r2, [sp, #8]
 800537c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005380:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	9100      	str	r1, [sp, #0]
 8005388:	f001 fd22 	bl	8006dd0 <ai_array_to_buffer_fmt>
 800538c:	9900      	ldr	r1, [sp, #0]
 800538e:	69b2      	ldr	r2, [r6, #24]
 8005390:	9700      	str	r7, [sp, #0]
 8005392:	231c      	movs	r3, #28
 8005394:	4686      	mov	lr, r0
 8005396:	fb03 fc08 	mul.w	ip, r3, r8
 800539a:	1878      	adds	r0, r7, r1
 800539c:	6897      	ldr	r7, [r2, #8]
 800539e:	9703      	str	r7, [sp, #12]
 80053a0:	eb09 030c 	add.w	r3, r9, ip
 80053a4:	b158      	cbz	r0, 80053be <ai_platform_api_get_network_report+0x2ae>
 80053a6:	9f00      	ldr	r7, [sp, #0]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f847 2038 	str.w	r2, [r7, r8, lsl #3]
 80053ae:	6832      	ldr	r2, [r6, #0]
 80053b0:	6042      	str	r2, [r0, #4]
 80053b2:	b11a      	cbz	r2, 80053bc <ai_platform_api_get_network_report+0x2ac>
 80053b4:	8852      	ldrh	r2, [r2, #2]
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	f040 817e 	bne.w	80056b8 <ai_platform_api_get_network_report+0x5a8>
 80053bc:	69b2      	ldr	r2, [r6, #24]
 80053be:	2000      	movs	r0, #0
 80053c0:	6852      	ldr	r2, [r2, #4]
 80053c2:	f849 e00c 	str.w	lr, [r9, ip]
 80053c6:	f04f 0101 	mov.w	r1, #1
 80053ca:	7519      	strb	r1, [r3, #20]
 80053cc:	6959      	ldr	r1, [r3, #20]
 80053ce:	611a      	str	r2, [r3, #16]
 80053d0:	9a01      	ldr	r2, [sp, #4]
 80053d2:	f362 211f 	bfi	r1, r2, #8, #24
 80053d6:	9a03      	ldr	r2, [sp, #12]
 80053d8:	e9c3 2001 	strd	r2, r0, [r3, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	9a02      	ldr	r2, [sp, #8]
 80053e2:	619a      	str	r2, [r3, #24]
 80053e4:	f108 0801 	add.w	r8, r8, #1
 80053e8:	6159      	str	r1, [r3, #20]
 80053ea:	e7ac      	b.n	8005346 <ai_platform_api_get_network_report+0x236>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8153 	beq.w	8005698 <ai_platform_api_get_network_report+0x588>
 80053f2:	f8db 2008 	ldr.w	r2, [fp, #8]
 80053f6:	f105 0824 	add.w	r8, r5, #36	; 0x24
 80053fa:	6852      	ldr	r2, [r2, #4]
 80053fc:	63a2      	str	r2, [r4, #56]	; 0x38
 80053fe:	8663      	strh	r3, [r4, #50]	; 0x32
 8005400:	4640      	mov	r0, r8
 8005402:	f7ff f9b3 	bl	800476c <ai_buffer_array_sane>
 8005406:	4606      	mov	r6, r0
 8005408:	b938      	cbnz	r0, 800541a <ai_platform_api_get_network_report+0x30a>
 800540a:	4640      	mov	r0, r8
 800540c:	f7ff f9ae 	bl	800476c <ai_buffer_array_sane>
 8005410:	b118      	cbz	r0, 800541a <ai_platform_api_get_network_report+0x30a>
 8005412:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8005414:	2b00      	cmp	r3, #0
 8005416:	f040 8148 	bne.w	80056aa <ai_platform_api_get_network_report+0x59a>
 800541a:	f105 071c 	add.w	r7, r5, #28
 800541e:	4638      	mov	r0, r7
 8005420:	f7ff f9a4 	bl	800476c <ai_buffer_array_sane>
 8005424:	4606      	mov	r6, r0
 8005426:	b928      	cbnz	r0, 8005434 <ai_platform_api_get_network_report+0x324>
 8005428:	4638      	mov	r0, r7
 800542a:	f7ff f99f 	bl	800476c <ai_buffer_array_sane>
 800542e:	b108      	cbz	r0, 8005434 <ai_platform_api_get_network_report+0x324>
 8005430:	8beb      	ldrh	r3, [r5, #30]
 8005432:	b9eb      	cbnz	r3, 8005470 <ai_platform_api_get_network_report+0x360>
 8005434:	686b      	ldr	r3, [r5, #4]
 8005436:	4aa3      	ldr	r2, [pc, #652]	; (80056c4 <ai_platform_api_get_network_report+0x5b4>)
 8005438:	67a3      	str	r3, [r4, #120]	; 0x78
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	f7ff f9af 	bl	80047a4 <_ai_platform_acquire_crc>
 8005446:	4ba0      	ldr	r3, [pc, #640]	; (80056c8 <ai_platform_api_get_network_report+0x5b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800544e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005452:	d014      	beq.n	800547e <ai_platform_api_get_network_report+0x36e>
 8005454:	4b9d      	ldr	r3, [pc, #628]	; (80056cc <ai_platform_api_get_network_report+0x5bc>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2a00      	cmp	r2, #0
 800545e:	d1fc      	bne.n	800545a <ai_platform_api_get_network_report+0x34a>
 8005460:	4b9b      	ldr	r3, [pc, #620]	; (80056d0 <ai_platform_api_get_network_report+0x5c0>)
 8005462:	4a9c      	ldr	r2, [pc, #624]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b9b      	ldr	r3, [pc, #620]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 800546a:	429a      	cmp	r2, r3
 800546c:	d015      	beq.n	800549a <ai_platform_api_get_network_report+0x38a>
 800546e:	e7fe      	b.n	800546e <ai_platform_api_get_network_report+0x35e>
 8005470:	f105 0010 	add.w	r0, r5, #16
 8005474:	2212      	movs	r2, #18
 8005476:	2111      	movs	r1, #17
 8005478:	f000 fe30 	bl	80060dc <core_set_error>
 800547c:	e67d      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 800547e:	4b97      	ldr	r3, [pc, #604]	; (80056dc <ai_platform_api_get_network_report+0x5cc>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	2a00      	cmp	r2, #0
 8005488:	d1fc      	bne.n	8005484 <ai_platform_api_get_network_report+0x374>
 800548a:	4b95      	ldr	r3, [pc, #596]	; (80056e0 <ai_platform_api_get_network_report+0x5d0>)
 800548c:	4a91      	ldr	r2, [pc, #580]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b91      	ldr	r3, [pc, #580]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 8005494:	429a      	cmp	r2, r3
 8005496:	d000      	beq.n	800549a <ai_platform_api_get_network_report+0x38a>
 8005498:	e7fe      	b.n	8005498 <ai_platform_api_get_network_report+0x388>
 800549a:	f7ff f985 	bl	80047a8 <_ai_platform_release_crc>
 800549e:	4a89      	ldr	r2, [pc, #548]	; (80056c4 <ai_platform_api_get_network_report+0x5b4>)
 80054a0:	4b90      	ldr	r3, [pc, #576]	; (80056e4 <ai_platform_api_get_network_report+0x5d4>)
 80054a2:	6123      	str	r3, [r4, #16]
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	f7ff f97a 	bl	80047a4 <_ai_platform_acquire_crc>
 80054b0:	4b85      	ldr	r3, [pc, #532]	; (80056c8 <ai_platform_api_get_network_report+0x5b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054bc:	d00d      	beq.n	80054da <ai_platform_api_get_network_report+0x3ca>
 80054be:	4b83      	ldr	r3, [pc, #524]	; (80056cc <ai_platform_api_get_network_report+0x5bc>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	d1fc      	bne.n	80054c4 <ai_platform_api_get_network_report+0x3b4>
 80054ca:	4b81      	ldr	r3, [pc, #516]	; (80056d0 <ai_platform_api_get_network_report+0x5c0>)
 80054cc:	4a81      	ldr	r2, [pc, #516]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d00e      	beq.n	80054f6 <ai_platform_api_get_network_report+0x3e6>
 80054d8:	e7fe      	b.n	80054d8 <ai_platform_api_get_network_report+0x3c8>
 80054da:	4b80      	ldr	r3, [pc, #512]	; (80056dc <ai_platform_api_get_network_report+0x5cc>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2a00      	cmp	r2, #0
 80054e4:	d1fc      	bne.n	80054e0 <ai_platform_api_get_network_report+0x3d0>
 80054e6:	4b7e      	ldr	r3, [pc, #504]	; (80056e0 <ai_platform_api_get_network_report+0x5d0>)
 80054e8:	4a7a      	ldr	r2, [pc, #488]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b7a      	ldr	r3, [pc, #488]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d000      	beq.n	80054f6 <ai_platform_api_get_network_report+0x3e6>
 80054f4:	e7fe      	b.n	80054f4 <ai_platform_api_get_network_report+0x3e4>
 80054f6:	f7ff f957 	bl	80047a8 <_ai_platform_release_crc>
 80054fa:	4a72      	ldr	r2, [pc, #456]	; (80056c4 <ai_platform_api_get_network_report+0x5b4>)
 80054fc:	f240 1307 	movw	r3, #263	; 0x107
 8005500:	6163      	str	r3, [r4, #20]
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	f7ff f94b 	bl	80047a4 <_ai_platform_acquire_crc>
 800550e:	4b6e      	ldr	r3, [pc, #440]	; (80056c8 <ai_platform_api_get_network_report+0x5b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551a:	d00d      	beq.n	8005538 <ai_platform_api_get_network_report+0x428>
 800551c:	4b6b      	ldr	r3, [pc, #428]	; (80056cc <ai_platform_api_get_network_report+0x5bc>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2a00      	cmp	r2, #0
 8005526:	d1fc      	bne.n	8005522 <ai_platform_api_get_network_report+0x412>
 8005528:	4b69      	ldr	r3, [pc, #420]	; (80056d0 <ai_platform_api_get_network_report+0x5c0>)
 800552a:	4a6a      	ldr	r2, [pc, #424]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b69      	ldr	r3, [pc, #420]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 8005532:	429a      	cmp	r2, r3
 8005534:	d00e      	beq.n	8005554 <ai_platform_api_get_network_report+0x444>
 8005536:	e7fe      	b.n	8005536 <ai_platform_api_get_network_report+0x426>
 8005538:	4b68      	ldr	r3, [pc, #416]	; (80056dc <ai_platform_api_get_network_report+0x5cc>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2a00      	cmp	r2, #0
 8005542:	d1fc      	bne.n	800553e <ai_platform_api_get_network_report+0x42e>
 8005544:	4b66      	ldr	r3, [pc, #408]	; (80056e0 <ai_platform_api_get_network_report+0x5d0>)
 8005546:	4a63      	ldr	r2, [pc, #396]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 800554e:	429a      	cmp	r2, r3
 8005550:	d000      	beq.n	8005554 <ai_platform_api_get_network_report+0x444>
 8005552:	e7fe      	b.n	8005552 <ai_platform_api_get_network_report+0x442>
 8005554:	f7ff f928 	bl	80047a8 <_ai_platform_release_crc>
 8005558:	4a5a      	ldr	r2, [pc, #360]	; (80056c4 <ai_platform_api_get_network_report+0x5b4>)
 800555a:	f240 2301 	movw	r3, #513	; 0x201
 800555e:	6263      	str	r3, [r4, #36]	; 0x24
 8005560:	6813      	ldr	r3, [r2, #0]
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	f7ff f91c 	bl	80047a4 <_ai_platform_acquire_crc>
 800556c:	4b56      	ldr	r3, [pc, #344]	; (80056c8 <ai_platform_api_get_network_report+0x5b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005578:	d00d      	beq.n	8005596 <ai_platform_api_get_network_report+0x486>
 800557a:	4b54      	ldr	r3, [pc, #336]	; (80056cc <ai_platform_api_get_network_report+0x5bc>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	2a00      	cmp	r2, #0
 8005584:	d1fc      	bne.n	8005580 <ai_platform_api_get_network_report+0x470>
 8005586:	4b52      	ldr	r3, [pc, #328]	; (80056d0 <ai_platform_api_get_network_report+0x5c0>)
 8005588:	4a52      	ldr	r2, [pc, #328]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 8005590:	429a      	cmp	r2, r3
 8005592:	d00e      	beq.n	80055b2 <ai_platform_api_get_network_report+0x4a2>
 8005594:	e7fe      	b.n	8005594 <ai_platform_api_get_network_report+0x484>
 8005596:	4b51      	ldr	r3, [pc, #324]	; (80056dc <ai_platform_api_get_network_report+0x5cc>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2a00      	cmp	r2, #0
 80055a0:	d1fc      	bne.n	800559c <ai_platform_api_get_network_report+0x48c>
 80055a2:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <ai_platform_api_get_network_report+0x5d0>)
 80055a4:	4a4b      	ldr	r2, [pc, #300]	; (80056d4 <ai_platform_api_get_network_report+0x5c4>)
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b4b      	ldr	r3, [pc, #300]	; (80056d8 <ai_platform_api_get_network_report+0x5c8>)
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d000      	beq.n	80055b2 <ai_platform_api_get_network_report+0x4a2>
 80055b0:	e7fe      	b.n	80055b0 <ai_platform_api_get_network_report+0x4a0>
 80055b2:	f7ff f8f9 	bl	80047a8 <_ai_platform_release_crc>
 80055b6:	f240 5301 	movw	r3, #1281	; 0x501
 80055ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80055bc:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80055be:	f001 fbe1 	bl	8006d84 <ai_platform_version_get>
 80055c2:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <ai_platform_api_get_network_report+0x5d8>)
 80055c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80055c6:	6220      	str	r0, [r4, #32]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d046      	beq.n	800565a <ai_platform_api_get_network_report+0x54a>
 80055cc:	4b47      	ldr	r3, [pc, #284]	; (80056ec <ai_platform_api_get_network_report+0x5dc>)
 80055ce:	4a48      	ldr	r2, [pc, #288]	; (80056f0 <ai_platform_api_get_network_report+0x5e0>)
 80055d0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80055d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055d4:	f04f 0e00 	mov.w	lr, #0
 80055d8:	e9c4 ee10 	strd	lr, lr, [r4, #64]	; 0x40
 80055dc:	e9c4 ee12 	strd	lr, lr, [r4, #72]	; 0x48
 80055e0:	f10d 0c10 	add.w	ip, sp, #16
 80055e4:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80055e8:	f240 4901 	movw	r9, #1025	; 0x401
 80055ec:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
 80055f0:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 80055f4:	46b6      	mov	lr, r6
 80055f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80055fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80055fe:	3458      	adds	r4, #88	; 0x58
 8005600:	46a4      	mov	ip, r4
 8005602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005606:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800560a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800560e:	4640      	mov	r0, r8
 8005610:	f7ff f8ac 	bl	800476c <ai_buffer_array_sane>
 8005614:	b998      	cbnz	r0, 800563e <ai_platform_api_get_network_report+0x52e>
 8005616:	4638      	mov	r0, r7
 8005618:	f7ff f8a8 	bl	800476c <ai_buffer_array_sane>
 800561c:	b908      	cbnz	r0, 8005622 <ai_platform_api_get_network_report+0x512>
 800561e:	2601      	movs	r6, #1
 8005620:	e5ab      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 8005622:	4638      	mov	r0, r7
 8005624:	f7ff f8a2 	bl	800476c <ai_buffer_array_sane>
 8005628:	b320      	cbz	r0, 8005674 <ai_platform_api_get_network_report+0x564>
 800562a:	6a2c      	ldr	r4, [r5, #32]
 800562c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800562e:	4635      	mov	r5, r6
 8005630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005632:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005636:	2601      	movs	r6, #1
 8005638:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800563c:	e59d      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 800563e:	4640      	mov	r0, r8
 8005640:	f7ff f894 	bl	800476c <ai_buffer_array_sane>
 8005644:	b1f8      	cbz	r0, 8005686 <ai_platform_api_get_network_report+0x576>
 8005646:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
 800564a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800564e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005650:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005658:	e7dd      	b.n	8005616 <ai_platform_api_get_network_report+0x506>
 800565a:	e898 0003 	ldmia.w	r8, {r0, r1}
 800565e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8005662:	e883 0003 	stmia.w	r3, {r0, r1}
 8005666:	e897 0003 	ldmia.w	r7, {r0, r1}
 800566a:	3440      	adds	r4, #64	; 0x40
 800566c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005670:	2601      	movs	r6, #1
 8005672:	e582      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 8005674:	4605      	mov	r5, r0
 8005676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005678:	4634      	mov	r4, r6
 800567a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800567c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005684:	deff      	udf	#255	; 0xff
 8005686:	4605      	mov	r5, r0
 8005688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800568a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800568c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005694:	deff      	udf	#255	; 0xff
 8005696:	2300      	movs	r3, #0
 8005698:	8663      	strh	r3, [r4, #50]	; 0x32
 800569a:	f105 0010 	add.w	r0, r5, #16
 800569e:	2218      	movs	r2, #24
 80056a0:	2113      	movs	r1, #19
 80056a2:	f000 fd1b 	bl	80060dc <core_set_error>
 80056a6:	2600      	movs	r6, #0
 80056a8:	e567      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 80056aa:	f105 0010 	add.w	r0, r5, #16
 80056ae:	2213      	movs	r2, #19
 80056b0:	2111      	movs	r1, #17
 80056b2:	f000 fd13 	bl	80060dc <core_set_error>
 80056b6:	e560      	b.n	800517a <ai_platform_api_get_network_report+0x6a>
 80056b8:	9f00      	ldr	r7, [sp, #0]
 80056ba:	2201      	movs	r2, #1
 80056bc:	507a      	str	r2, [r7, r1]
 80056be:	69b2      	ldr	r2, [r6, #24]
 80056c0:	e67e      	b.n	80053c0 <ai_platform_api_get_network_report+0x2b0>
 80056c2:	bf00      	nop
 80056c4:	e0002000 	.word	0xe0002000
 80056c8:	e0042000 	.word	0xe0042000
 80056cc:	58024c08 	.word	0x58024c08
 80056d0:	58024c00 	.word	0x58024c00
 80056d4:	f407a5c2 	.word	0xf407a5c2
 80056d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80056dc:	40023008 	.word	0x40023008
 80056e0:	40023000 	.word	0x40023000
 80056e4:	0800f4e0 	.word	0x0800f4e0
 80056e8:	a1facade 	.word	0xa1facade
 80056ec:	080088d0 	.word	0x080088d0
 80056f0:	00040440 	.word	0x00040440

080056f4 <ai_platform_network_create>:
 80056f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056f8:	b083      	sub	sp, #12
 80056fa:	4606      	mov	r6, r0
 80056fc:	4615      	mov	r5, r2
 80056fe:	461f      	mov	r7, r3
 8005700:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005704:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8005708:	f7ff f84c 	bl	80047a4 <_ai_platform_acquire_crc>
 800570c:	b178      	cbz	r0, 800572e <ai_platform_network_create+0x3a>
 800570e:	4b5f      	ldr	r3, [pc, #380]	; (800588c <ai_platform_network_create+0x198>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571a:	4602      	mov	r2, r0
 800571c:	d00d      	beq.n	800573a <ai_platform_network_create+0x46>
 800571e:	4b5c      	ldr	r3, [pc, #368]	; (8005890 <ai_platform_network_create+0x19c>)
 8005720:	2118      	movs	r1, #24
 8005722:	6019      	str	r1, [r3, #0]
 8005724:	6819      	ldr	r1, [r3, #0]
 8005726:	2918      	cmp	r1, #24
 8005728:	d01a      	beq.n	8005760 <ai_platform_network_create+0x6c>
 800572a:	f7ff f83d 	bl	80047a8 <_ai_platform_release_crc>
 800572e:	f244 1333 	movw	r3, #16691	; 0x4133
 8005732:	4618      	mov	r0, r3
 8005734:	b003      	add	sp, #12
 8005736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800573a:	4b56      	ldr	r3, [pc, #344]	; (8005894 <ai_platform_network_create+0x1a0>)
 800573c:	2101      	movs	r1, #1
 800573e:	6019      	str	r1, [r3, #0]
 8005740:	2114      	movs	r1, #20
 8005742:	e001      	b.n	8005748 <ai_platform_network_create+0x54>
 8005744:	3901      	subs	r1, #1
 8005746:	d002      	beq.n	800574e <ai_platform_network_create+0x5a>
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	2800      	cmp	r0, #0
 800574c:	d1fa      	bne.n	8005744 <ai_platform_network_create+0x50>
 800574e:	4b51      	ldr	r3, [pc, #324]	; (8005894 <ai_platform_network_create+0x1a0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	b91b      	cbnz	r3, 800575c <ai_platform_network_create+0x68>
 8005754:	4b50      	ldr	r3, [pc, #320]	; (8005898 <ai_platform_network_create+0x1a4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	d006      	beq.n	800576a <ai_platform_network_create+0x76>
 800575c:	4610      	mov	r0, r2
 800575e:	e7e4      	b.n	800572a <ai_platform_network_create+0x36>
 8005760:	2101      	movs	r1, #1
 8005762:	6019      	str	r1, [r3, #0]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	2900      	cmp	r1, #0
 8005768:	d1fc      	bne.n	8005764 <ai_platform_network_create+0x70>
 800576a:	4610      	mov	r0, r2
 800576c:	f7ff f81c 	bl	80047a8 <_ai_platform_release_crc>
 8005770:	4a4a      	ldr	r2, [pc, #296]	; (800589c <ai_platform_network_create+0x1a8>)
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	f7ff f813 	bl	80047a4 <_ai_platform_acquire_crc>
 800577e:	4b43      	ldr	r3, [pc, #268]	; (800588c <ai_platform_network_create+0x198>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578a:	d00d      	beq.n	80057a8 <ai_platform_network_create+0xb4>
 800578c:	4b40      	ldr	r3, [pc, #256]	; (8005890 <ai_platform_network_create+0x19c>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	2a00      	cmp	r2, #0
 8005796:	d1fc      	bne.n	8005792 <ai_platform_network_create+0x9e>
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <ai_platform_network_create+0x1ac>)
 800579a:	4a42      	ldr	r2, [pc, #264]	; (80058a4 <ai_platform_network_create+0x1b0>)
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <ai_platform_network_create+0x1b4>)
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d00e      	beq.n	80057c4 <ai_platform_network_create+0xd0>
 80057a6:	e7fe      	b.n	80057a6 <ai_platform_network_create+0xb2>
 80057a8:	4b3a      	ldr	r3, [pc, #232]	; (8005894 <ai_platform_network_create+0x1a0>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	d1fc      	bne.n	80057ae <ai_platform_network_create+0xba>
 80057b4:	4b38      	ldr	r3, [pc, #224]	; (8005898 <ai_platform_network_create+0x1a4>)
 80057b6:	4a3b      	ldr	r2, [pc, #236]	; (80058a4 <ai_platform_network_create+0x1b0>)
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <ai_platform_network_create+0x1b4>)
 80057be:	429a      	cmp	r2, r3
 80057c0:	d000      	beq.n	80057c4 <ai_platform_network_create+0xd0>
 80057c2:	e7fe      	b.n	80057c2 <ai_platform_network_create+0xce>
 80057c4:	f7fe fff0 	bl	80047a8 <_ai_platform_release_crc>
 80057c8:	b1ae      	cbz	r6, 80057f6 <ai_platform_network_create+0x102>
 80057ca:	4b38      	ldr	r3, [pc, #224]	; (80058ac <ai_platform_network_create+0x1b8>)
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	6035      	str	r5, [r6, #0]
 80057d0:	f000 fc7c 	bl	80060cc <core_init>
 80057d4:	b990      	cbnz	r0, 80057fc <ai_platform_network_create+0x108>
 80057d6:	2430      	movs	r4, #48	; 0x30
 80057d8:	2300      	movs	r3, #0
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	2610      	movs	r6, #16
 80057de:	464a      	mov	r2, r9
 80057e0:	4641      	mov	r1, r8
 80057e2:	4638      	mov	r0, r7
 80057e4:	f001 fac8 	bl	8006d78 <ai_version_get>
 80057e8:	2300      	movs	r3, #0
 80057ea:	f364 0307 	bfi	r3, r4, #0, #8
 80057ee:	6468      	str	r0, [r5, #68]	; 0x44
 80057f0:	f366 231f 	bfi	r3, r6, #8, #24
 80057f4:	e79d      	b.n	8005732 <ai_platform_network_create+0x3e>
 80057f6:	f241 0310 	movw	r3, #4112	; 0x1010
 80057fa:	e79a      	b.n	8005732 <ai_platform_network_create+0x3e>
 80057fc:	4a27      	ldr	r2, [pc, #156]	; (800589c <ai_platform_network_create+0x1a8>)
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	f7fe ffcd 	bl	80047a4 <_ai_platform_acquire_crc>
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <ai_platform_network_create+0x198>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005816:	d00d      	beq.n	8005834 <ai_platform_network_create+0x140>
 8005818:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <ai_platform_network_create+0x19c>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	2a00      	cmp	r2, #0
 8005822:	d1fc      	bne.n	800581e <ai_platform_network_create+0x12a>
 8005824:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <ai_platform_network_create+0x1ac>)
 8005826:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <ai_platform_network_create+0x1b0>)
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <ai_platform_network_create+0x1b4>)
 800582e:	429a      	cmp	r2, r3
 8005830:	d00e      	beq.n	8005850 <ai_platform_network_create+0x15c>
 8005832:	e7fe      	b.n	8005832 <ai_platform_network_create+0x13e>
 8005834:	4b17      	ldr	r3, [pc, #92]	; (8005894 <ai_platform_network_create+0x1a0>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	2a00      	cmp	r2, #0
 800583e:	d1fc      	bne.n	800583a <ai_platform_network_create+0x146>
 8005840:	4b15      	ldr	r3, [pc, #84]	; (8005898 <ai_platform_network_create+0x1a4>)
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <ai_platform_network_create+0x1b0>)
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <ai_platform_network_create+0x1b4>)
 800584a:	429a      	cmp	r2, r3
 800584c:	d000      	beq.n	8005850 <ai_platform_network_create+0x15c>
 800584e:	e7fe      	b.n	800584e <ai_platform_network_create+0x15a>
 8005850:	f7fe ffaa 	bl	80047a8 <_ai_platform_release_crc>
 8005854:	2200      	movs	r2, #0
 8005856:	4641      	mov	r1, r8
 8005858:	4638      	mov	r0, r7
 800585a:	f001 fa8d 	bl	8006d78 <ai_version_get>
 800585e:	2200      	movs	r2, #0
 8005860:	4604      	mov	r4, r0
 8005862:	2105      	movs	r1, #5
 8005864:	2001      	movs	r0, #1
 8005866:	f001 fa87 	bl	8006d78 <ai_version_get>
 800586a:	4284      	cmp	r4, r0
 800586c:	d001      	beq.n	8005872 <ai_platform_network_create+0x17e>
 800586e:	2401      	movs	r4, #1
 8005870:	e7b2      	b.n	80057d8 <ai_platform_network_create+0xe4>
 8005872:	a802      	add	r0, sp, #8
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <ai_platform_network_create+0x1bc>)
 8005876:	f840 3d04 	str.w	r3, [r0, #-4]!
 800587a:	f001 f9d9 	bl	8006c30 <ai_check_custom_types>
 800587e:	b110      	cbz	r0, 8005886 <ai_platform_network_create+0x192>
 8005880:	2600      	movs	r6, #0
 8005882:	4634      	mov	r4, r6
 8005884:	e7ab      	b.n	80057de <ai_platform_network_create+0xea>
 8005886:	2402      	movs	r4, #2
 8005888:	e7a6      	b.n	80057d8 <ai_platform_network_create+0xe4>
 800588a:	bf00      	nop
 800588c:	e0042000 	.word	0xe0042000
 8005890:	58024c08 	.word	0x58024c08
 8005894:	40023008 	.word	0x40023008
 8005898:	40023000 	.word	0x40023000
 800589c:	e0002000 	.word	0xe0002000
 80058a0:	58024c00 	.word	0x58024c00
 80058a4:	f407a5c2 	.word	0xf407a5c2
 80058a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80058ac:	a1c00100 	.word	0xa1c00100
 80058b0:	84048403 	.word	0x84048403

080058b4 <ai_platform_network_init>:
 80058b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d04b      	beq.n	8005954 <ai_platform_network_init+0xa0>
 80058bc:	4b79      	ldr	r3, [pc, #484]	; (8005aa4 <ai_platform_network_init+0x1f0>)
 80058be:	6802      	ldr	r2, [r0, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	4604      	mov	r4, r0
 80058c4:	d146      	bne.n	8005954 <ai_platform_network_init+0xa0>
 80058c6:	4a78      	ldr	r2, [pc, #480]	; (8005aa8 <ai_platform_network_init+0x1f4>)
 80058c8:	6813      	ldr	r3, [r2, #0]
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	460e      	mov	r6, r1
 80058d2:	f7fe ff67 	bl	80047a4 <_ai_platform_acquire_crc>
 80058d6:	4b75      	ldr	r3, [pc, #468]	; (8005aac <ai_platform_network_init+0x1f8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e2:	d00d      	beq.n	8005900 <ai_platform_network_init+0x4c>
 80058e4:	4b72      	ldr	r3, [pc, #456]	; (8005ab0 <ai_platform_network_init+0x1fc>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	d1fc      	bne.n	80058ea <ai_platform_network_init+0x36>
 80058f0:	4b70      	ldr	r3, [pc, #448]	; (8005ab4 <ai_platform_network_init+0x200>)
 80058f2:	4a71      	ldr	r2, [pc, #452]	; (8005ab8 <ai_platform_network_init+0x204>)
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b70      	ldr	r3, [pc, #448]	; (8005abc <ai_platform_network_init+0x208>)
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d00d      	beq.n	800591a <ai_platform_network_init+0x66>
 80058fe:	e7fe      	b.n	80058fe <ai_platform_network_init+0x4a>
 8005900:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <ai_platform_network_init+0x20c>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	2a00      	cmp	r2, #0
 800590a:	d1fc      	bne.n	8005906 <ai_platform_network_init+0x52>
 800590c:	4b6d      	ldr	r3, [pc, #436]	; (8005ac4 <ai_platform_network_init+0x210>)
 800590e:	4a6a      	ldr	r2, [pc, #424]	; (8005ab8 <ai_platform_network_init+0x204>)
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b69      	ldr	r3, [pc, #420]	; (8005abc <ai_platform_network_init+0x208>)
 8005916:	429a      	cmp	r2, r3
 8005918:	d11b      	bne.n	8005952 <ai_platform_network_init+0x9e>
 800591a:	f7fe ff45 	bl	80047a8 <_ai_platform_release_crc>
 800591e:	2e00      	cmp	r6, #0
 8005920:	d034      	beq.n	800598c <ai_platform_network_init+0xd8>
 8005922:	4b69      	ldr	r3, [pc, #420]	; (8005ac8 <ai_platform_network_init+0x214>)
 8005924:	6832      	ldr	r2, [r6, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d149      	bne.n	80059be <ai_platform_network_init+0x10a>
 800592a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800592e:	6930      	ldr	r0, [r6, #16]
 8005930:	89b3      	ldrh	r3, [r6, #12]
 8005932:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8005936:	62a0      	str	r0, [r4, #40]	; 0x28
 8005938:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800593c:	2203      	movs	r2, #3
 800593e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8005942:	84a3      	strh	r3, [r4, #36]	; 0x24
 8005944:	60e2      	str	r2, [r4, #12]
 8005946:	4620      	mov	r0, r4
 8005948:	f001 f99c 	bl	8006c84 <ai_layers_init_all>
 800594c:	4620      	mov	r0, r4
 800594e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005952:	e7fe      	b.n	8005952 <ai_platform_network_init+0x9e>
 8005954:	4a54      	ldr	r2, [pc, #336]	; (8005aa8 <ai_platform_network_init+0x1f4>)
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	f7fe ff21 	bl	80047a4 <_ai_platform_acquire_crc>
 8005962:	4b52      	ldr	r3, [pc, #328]	; (8005aac <ai_platform_network_init+0x1f8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596e:	d015      	beq.n	800599c <ai_platform_network_init+0xe8>
 8005970:	4b4f      	ldr	r3, [pc, #316]	; (8005ab0 <ai_platform_network_init+0x1fc>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2a00      	cmp	r2, #0
 800597a:	d1fc      	bne.n	8005976 <ai_platform_network_init+0xc2>
 800597c:	4b4d      	ldr	r3, [pc, #308]	; (8005ab4 <ai_platform_network_init+0x200>)
 800597e:	4a4e      	ldr	r2, [pc, #312]	; (8005ab8 <ai_platform_network_init+0x204>)
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <ai_platform_network_init+0x208>)
 8005986:	429a      	cmp	r2, r3
 8005988:	d015      	beq.n	80059b6 <ai_platform_network_init+0x102>
 800598a:	e7fe      	b.n	800598a <ai_platform_network_init+0xd6>
 800598c:	f104 0010 	add.w	r0, r4, #16
 8005990:	2211      	movs	r2, #17
 8005992:	2110      	movs	r1, #16
 8005994:	4634      	mov	r4, r6
 8005996:	f000 fba1 	bl	80060dc <core_set_error>
 800599a:	e7d7      	b.n	800594c <ai_platform_network_init+0x98>
 800599c:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <ai_platform_network_init+0x20c>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	d1fc      	bne.n	80059a2 <ai_platform_network_init+0xee>
 80059a8:	4b46      	ldr	r3, [pc, #280]	; (8005ac4 <ai_platform_network_init+0x210>)
 80059aa:	4a43      	ldr	r2, [pc, #268]	; (8005ab8 <ai_platform_network_init+0x204>)
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4b42      	ldr	r3, [pc, #264]	; (8005abc <ai_platform_network_init+0x208>)
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d16d      	bne.n	8005a92 <ai_platform_network_init+0x1de>
 80059b6:	f7fe fef7 	bl	80047a8 <_ai_platform_release_crc>
 80059ba:	2400      	movs	r4, #0
 80059bc:	e7c6      	b.n	800594c <ai_platform_network_init+0x98>
 80059be:	4630      	mov	r0, r6
 80059c0:	2101      	movs	r1, #1
 80059c2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80059c6:	f7fe fea1 	bl	800470c <ai_buffer_get_size>
 80059ca:	4635      	mov	r5, r6
 80059cc:	f106 071c 	add.w	r7, r6, #28
 80059d0:	2101      	movs	r1, #1
 80059d2:	4606      	mov	r6, r0
 80059d4:	4638      	mov	r0, r7
 80059d6:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80059da:	f7fe fe97 	bl	800470c <ai_buffer_get_size>
 80059de:	2e00      	cmp	r6, #0
 80059e0:	bf0a      	itet	eq
 80059e2:	46b6      	moveq	lr, r6
 80059e4:	f04f 0e01 	movne.w	lr, #1
 80059e8:	4635      	moveq	r5, r6
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d14b      	bne.n	8005a86 <ai_platform_network_init+0x1d2>
 80059ee:	4607      	mov	r7, r0
 80059f0:	4684      	mov	ip, r0
 80059f2:	f1b8 0f00 	cmp.w	r8, #0
 80059f6:	d023      	beq.n	8005a40 <ai_platform_network_init+0x18c>
 80059f8:	8be3      	ldrh	r3, [r4, #30]
 80059fa:	4573      	cmp	r3, lr
 80059fc:	d207      	bcs.n	8005a0e <ai_platform_network_init+0x15a>
 80059fe:	f104 0010 	add.w	r0, r4, #16
 8005a02:	2212      	movs	r2, #18
 8005a04:	2116      	movs	r1, #22
 8005a06:	f000 fb69 	bl	80060dc <core_set_error>
 8005a0a:	2400      	movs	r4, #0
 8005a0c:	e79e      	b.n	800594c <ai_platform_network_init+0x98>
 8005a0e:	f1be 0f00 	cmp.w	lr, #0
 8005a12:	d006      	beq.n	8005a22 <ai_platform_network_init+0x16e>
 8005a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a16:	6a26      	ldr	r6, [r4, #32]
 8005a18:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005a1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a1e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005a22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005a24:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8005a28:	2600      	movs	r6, #0
 8005a2a:	4563      	cmp	r3, ip
 8005a2c:	83a6      	strh	r6, [r4, #28]
 8005a2e:	d211      	bcs.n	8005a54 <ai_platform_network_init+0x1a0>
 8005a30:	f104 0010 	add.w	r0, r4, #16
 8005a34:	2213      	movs	r2, #19
 8005a36:	2116      	movs	r1, #22
 8005a38:	f000 fb50 	bl	80060dc <core_set_error>
 8005a3c:	4634      	mov	r4, r6
 8005a3e:	e785      	b.n	800594c <ai_platform_network_init+0x98>
 8005a40:	2e00      	cmp	r6, #0
 8005a42:	d0d9      	beq.n	80059f8 <ai_platform_network_init+0x144>
 8005a44:	f104 0010 	add.w	r0, r4, #16
 8005a48:	2212      	movs	r2, #18
 8005a4a:	2110      	movs	r1, #16
 8005a4c:	4644      	mov	r4, r8
 8005a4e:	f000 fb45 	bl	80060dc <core_set_error>
 8005a52:	e77b      	b.n	800594c <ai_platform_network_init+0x98>
 8005a54:	f1bc 0f00 	cmp.w	ip, #0
 8005a58:	d013      	beq.n	8005a82 <ai_platform_network_init+0x1ce>
 8005a5a:	f04f 081c 	mov.w	r8, #28
 8005a5e:	fb08 f80c 	mul.w	r8, r8, ip
 8005a62:	eb07 0e06 	add.w	lr, r7, r6
 8005a66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005a6a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005a6c:	4435      	add	r5, r6
 8005a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a70:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005a74:	361c      	adds	r6, #28
 8005a76:	4546      	cmp	r6, r8
 8005a78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005a7c:	d1f1      	bne.n	8005a62 <ai_platform_network_init+0x1ae>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e75c      	b.n	800593c <ai_platform_network_init+0x88>
 8005a82:	4663      	mov	r3, ip
 8005a84:	e75a      	b.n	800593c <ai_platform_network_init+0x88>
 8005a86:	f1b9 0f00 	cmp.w	r9, #0
 8005a8a:	d003      	beq.n	8005a94 <ai_platform_network_init+0x1e0>
 8005a8c:	f04f 0c01 	mov.w	ip, #1
 8005a90:	e7af      	b.n	80059f2 <ai_platform_network_init+0x13e>
 8005a92:	e7fe      	b.n	8005a92 <ai_platform_network_init+0x1de>
 8005a94:	f104 0010 	add.w	r0, r4, #16
 8005a98:	2213      	movs	r2, #19
 8005a9a:	2110      	movs	r1, #16
 8005a9c:	464c      	mov	r4, r9
 8005a9e:	f000 fb1d 	bl	80060dc <core_set_error>
 8005aa2:	e753      	b.n	800594c <ai_platform_network_init+0x98>
 8005aa4:	a1c00100 	.word	0xa1c00100
 8005aa8:	e0002000 	.word	0xe0002000
 8005aac:	e0042000 	.word	0xe0042000
 8005ab0:	58024c08 	.word	0x58024c08
 8005ab4:	58024c00 	.word	0x58024c00
 8005ab8:	f407a5c2 	.word	0xf407a5c2
 8005abc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ac0:	40023008 	.word	0x40023008
 8005ac4:	40023000 	.word	0x40023000
 8005ac8:	a1facade 	.word	0xa1facade

08005acc <ai_platform_network_post_init>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	b120      	cbz	r0, 8005ada <ai_platform_network_post_init+0xe>
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <ai_platform_network_post_init+0x104>)
 8005ad2:	6802      	ldr	r2, [r0, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	d02d      	beq.n	8005b36 <ai_platform_network_post_init+0x6a>
 8005ada:	4a3e      	ldr	r2, [pc, #248]	; (8005bd4 <ai_platform_network_post_init+0x108>)
 8005adc:	6813      	ldr	r3, [r2, #0]
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	f7fe fe5e 	bl	80047a4 <_ai_platform_acquire_crc>
 8005ae8:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <ai_platform_network_post_init+0x10c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af4:	d00d      	beq.n	8005b12 <ai_platform_network_post_init+0x46>
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <ai_platform_network_post_init+0x110>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d1fc      	bne.n	8005afc <ai_platform_network_post_init+0x30>
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <ai_platform_network_post_init+0x114>)
 8005b04:	4a37      	ldr	r2, [pc, #220]	; (8005be4 <ai_platform_network_post_init+0x118>)
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b37      	ldr	r3, [pc, #220]	; (8005be8 <ai_platform_network_post_init+0x11c>)
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d00d      	beq.n	8005b2c <ai_platform_network_post_init+0x60>
 8005b10:	e7fe      	b.n	8005b10 <ai_platform_network_post_init+0x44>
 8005b12:	4b36      	ldr	r3, [pc, #216]	; (8005bec <ai_platform_network_post_init+0x120>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	d1fc      	bne.n	8005b18 <ai_platform_network_post_init+0x4c>
 8005b1e:	4b34      	ldr	r3, [pc, #208]	; (8005bf0 <ai_platform_network_post_init+0x124>)
 8005b20:	4a30      	ldr	r2, [pc, #192]	; (8005be4 <ai_platform_network_post_init+0x118>)
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b30      	ldr	r3, [pc, #192]	; (8005be8 <ai_platform_network_post_init+0x11c>)
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d103      	bne.n	8005b34 <ai_platform_network_post_init+0x68>
 8005b2c:	f7fe fe3c 	bl	80047a8 <_ai_platform_release_crc>
 8005b30:	2000      	movs	r0, #0
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	e7fe      	b.n	8005b34 <ai_platform_network_post_init+0x68>
 8005b36:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <ai_platform_network_post_init+0x108>)
 8005b38:	6813      	ldr	r3, [r2, #0]
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	f7fe fe30 	bl	80047a4 <_ai_platform_acquire_crc>
 8005b44:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <ai_platform_network_post_init+0x10c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b50:	d00d      	beq.n	8005b6e <ai_platform_network_post_init+0xa2>
 8005b52:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <ai_platform_network_post_init+0x110>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	d1fc      	bne.n	8005b58 <ai_platform_network_post_init+0x8c>
 8005b5e:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <ai_platform_network_post_init+0x114>)
 8005b60:	4a20      	ldr	r2, [pc, #128]	; (8005be4 <ai_platform_network_post_init+0x118>)
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <ai_platform_network_post_init+0x11c>)
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d00e      	beq.n	8005b8a <ai_platform_network_post_init+0xbe>
 8005b6c:	e7fe      	b.n	8005b6c <ai_platform_network_post_init+0xa0>
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <ai_platform_network_post_init+0x120>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	d1fc      	bne.n	8005b74 <ai_platform_network_post_init+0xa8>
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <ai_platform_network_post_init+0x124>)
 8005b7c:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <ai_platform_network_post_init+0x118>)
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <ai_platform_network_post_init+0x11c>)
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d000      	beq.n	8005b8a <ai_platform_network_post_init+0xbe>
 8005b88:	e7fe      	b.n	8005b88 <ai_platform_network_post_init+0xbc>
 8005b8a:	f7fe fe0d 	bl	80047a8 <_ai_platform_release_crc>
 8005b8e:	68e3      	ldr	r3, [r4, #12]
 8005b90:	f013 0502 	ands.w	r5, r3, #2
 8005b94:	d011      	beq.n	8005bba <ai_platform_network_post_init+0xee>
 8005b96:	4620      	mov	r0, r4
 8005b98:	f001 f888 	bl	8006cac <ai_layers_post_init_all>
 8005b9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b9e:	b1a3      	cbz	r3, 8005bca <ai_platform_network_post_init+0xfe>
 8005ba0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005ba2:	b195      	cbz	r5, 8005bca <ai_platform_network_post_init+0xfe>
 8005ba4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	2000      	movs	r0, #0
 8005baa:	4798      	blx	r3
 8005bac:	692b      	ldr	r3, [r5, #16]
 8005bae:	42ab      	cmp	r3, r5
 8005bb0:	d00b      	beq.n	8005bca <ai_platform_network_post_init+0xfe>
 8005bb2:	461d      	mov	r5, r3
 8005bb4:	b14b      	cbz	r3, 8005bca <ai_platform_network_post_init+0xfe>
 8005bb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bb8:	e7f4      	b.n	8005ba4 <ai_platform_network_post_init+0xd8>
 8005bba:	f104 0010 	add.w	r0, r4, #16
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	2111      	movs	r1, #17
 8005bc2:	f000 fa8b 	bl	80060dc <core_set_error>
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	bd38      	pop	{r3, r4, r5, pc}
 8005bca:	2001      	movs	r0, #1
 8005bcc:	bd38      	pop	{r3, r4, r5, pc}
 8005bce:	bf00      	nop
 8005bd0:	a1c00100 	.word	0xa1c00100
 8005bd4:	e0002000 	.word	0xe0002000
 8005bd8:	e0042000 	.word	0xe0042000
 8005bdc:	58024c08 	.word	0x58024c08
 8005be0:	58024c00 	.word	0x58024c00
 8005be4:	f407a5c2 	.word	0xf407a5c2
 8005be8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005bec:	40023008 	.word	0x40023008
 8005bf0:	40023000 	.word	0x40023000

08005bf4 <ai_platform_network_process>:
 8005bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	9202      	str	r2, [sp, #8]
 8005bfe:	4604      	mov	r4, r0
 8005c00:	b120      	cbz	r0, 8005c0c <ai_platform_network_process+0x18>
 8005c02:	4b73      	ldr	r3, [pc, #460]	; (8005dd0 <ai_platform_network_process+0x1dc>)
 8005c04:	6802      	ldr	r2, [r0, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	bf18      	it	ne
 8005c0a:	2400      	movne	r4, #0
 8005c0c:	4a71      	ldr	r2, [pc, #452]	; (8005dd4 <ai_platform_network_process+0x1e0>)
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	f7fe fdc5 	bl	80047a4 <_ai_platform_acquire_crc>
 8005c1a:	4b6f      	ldr	r3, [pc, #444]	; (8005dd8 <ai_platform_network_process+0x1e4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c26:	d00d      	beq.n	8005c44 <ai_platform_network_process+0x50>
 8005c28:	4b6c      	ldr	r3, [pc, #432]	; (8005ddc <ai_platform_network_process+0x1e8>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	d1fc      	bne.n	8005c2e <ai_platform_network_process+0x3a>
 8005c34:	4b6a      	ldr	r3, [pc, #424]	; (8005de0 <ai_platform_network_process+0x1ec>)
 8005c36:	4a6b      	ldr	r2, [pc, #428]	; (8005de4 <ai_platform_network_process+0x1f0>)
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b6a      	ldr	r3, [pc, #424]	; (8005de8 <ai_platform_network_process+0x1f4>)
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d00e      	beq.n	8005c60 <ai_platform_network_process+0x6c>
 8005c42:	e7fe      	b.n	8005c42 <ai_platform_network_process+0x4e>
 8005c44:	4b69      	ldr	r3, [pc, #420]	; (8005dec <ai_platform_network_process+0x1f8>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d1fc      	bne.n	8005c4a <ai_platform_network_process+0x56>
 8005c50:	4b67      	ldr	r3, [pc, #412]	; (8005df0 <ai_platform_network_process+0x1fc>)
 8005c52:	4a64      	ldr	r2, [pc, #400]	; (8005de4 <ai_platform_network_process+0x1f0>)
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b63      	ldr	r3, [pc, #396]	; (8005de8 <ai_platform_network_process+0x1f4>)
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d000      	beq.n	8005c60 <ai_platform_network_process+0x6c>
 8005c5e:	e7fe      	b.n	8005c5e <ai_platform_network_process+0x6a>
 8005c60:	f7fe fda2 	bl	80047a8 <_ai_platform_release_crc>
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	f000 8089 	beq.w	8005d7c <ai_platform_network_process+0x188>
 8005c6a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	f040 822b 	bne.w	80060c8 <ai_platform_network_process+0x4d4>
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2600      	movs	r6, #0
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	6166      	str	r6, [r4, #20]
 8005c7e:	f040 821b 	bne.w	80060b8 <ai_platform_network_process+0x4c4>
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	f000 809c 	beq.w	8005dc0 <ai_platform_network_process+0x1cc>
 8005c88:	2f00      	cmp	r7, #0
 8005c8a:	f000 8099 	beq.w	8005dc0 <ai_platform_network_process+0x1cc>
 8005c8e:	883b      	ldrh	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 8095 	beq.w	8005dc0 <ai_platform_network_process+0x1cc>
 8005c96:	69aa      	ldr	r2, [r5, #24]
 8005c98:	9401      	str	r4, [sp, #4]
 8005c9a:	f8d2 8000 	ldr.w	r8, [r2]
 8005c9e:	429e      	cmp	r6, r3
 8005ca0:	f080 80a8 	bcs.w	8005df4 <ai_platform_network_process+0x200>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80a4 	beq.w	8005df4 <ai_platform_network_process+0x200>
 8005cac:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	f000 809f 	beq.w	8005df4 <ai_platform_network_process+0x200>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f8d3 b000 	ldr.w	fp, [r3]
 8005cbc:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8005cc0:	eb1b 0a09 	adds.w	sl, fp, r9
 8005cc4:	d07b      	beq.n	8005dbe <ai_platform_network_process+0x1ca>
 8005cc6:	69a3      	ldr	r3, [r4, #24]
 8005cc8:	2101      	movs	r1, #1
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	9303      	str	r3, [sp, #12]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f7fe fd1c 	bl	800470c <ai_buffer_get_size>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	4283      	cmp	r3, r0
 8005cd8:	d368      	bcc.n	8005dac <ai_platform_network_process+0x1b8>
 8005cda:	68e0      	ldr	r0, [r4, #12]
 8005cdc:	69a9      	ldr	r1, [r5, #24]
 8005cde:	68c2      	ldr	r2, [r0, #12]
 8005ce0:	68cb      	ldr	r3, [r1, #12]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d162      	bne.n	8005dac <ai_platform_network_process+0x1b8>
 8005ce6:	6882      	ldr	r2, [r0, #8]
 8005ce8:	688b      	ldr	r3, [r1, #8]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d15e      	bne.n	8005dac <ai_platform_network_process+0x1b8>
 8005cee:	6842      	ldr	r2, [r0, #4]
 8005cf0:	684b      	ldr	r3, [r1, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d15a      	bne.n	8005dac <ai_platform_network_process+0x1b8>
 8005cf6:	69a3      	ldr	r3, [r4, #24]
 8005cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cfc:	f001 f8e2 	bl	8006ec4 <ai_array_get_data_byte_size>
 8005d00:	9003      	str	r0, [sp, #12]
 8005d02:	4620      	mov	r0, r4
 8005d04:	f001 f850 	bl	8006da8 <get_tensor_byte_size>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	4283      	cmp	r3, r0
 8005d0c:	d34e      	bcc.n	8005dac <ai_platform_network_process+0x1b8>
 8005d0e:	69a3      	ldr	r3, [r4, #24]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f001 f85d 	bl	8006dd0 <ai_array_to_buffer_fmt>
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	4043      	eors	r3, r0
 8005d1a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005d1e:	d13c      	bne.n	8005d9a <ai_platform_network_process+0x1a6>
 8005d20:	686b      	ldr	r3, [r5, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d04b      	beq.n	8005dbe <ai_platform_network_process+0x1ca>
 8005d26:	69ab      	ldr	r3, [r5, #24]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	b362      	cbz	r2, 8005d86 <ai_platform_network_process+0x192>
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	9203      	str	r2, [sp, #12]
 8005d30:	f001 f83a 	bl	8006da8 <get_tensor_byte_size>
 8005d34:	f8ca 0008 	str.w	r0, [sl, #8]
 8005d38:	69ab      	ldr	r3, [r5, #24]
 8005d3a:	9a03      	ldr	r2, [sp, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	fb03 f000 	mul.w	r0, r3, r0
 8005d42:	f8ca 000c 	str.w	r0, [sl, #12]
 8005d46:	6869      	ldr	r1, [r5, #4]
 8005d48:	f8ca 1004 	str.w	r1, [sl, #4]
 8005d4c:	686b      	ldr	r3, [r5, #4]
 8005d4e:	4403      	add	r3, r0
 8005d50:	f84b 3009 	str.w	r3, [fp, r9]
 8005d54:	69a0      	ldr	r0, [r4, #24]
 8005d56:	6803      	ldr	r3, [r0, #0]
 8005d58:	4590      	cmp	r8, r2
 8005d5a:	bf38      	it	cc
 8005d5c:	4690      	movcc	r8, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	d408      	bmi.n	8005d74 <ai_platform_network_process+0x180>
 8005d62:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	4419      	add	r1, r3
 8005d6a:	6081      	str	r1, [r0, #8]
 8005d6c:	69a3      	ldr	r3, [r4, #24]
 8005d6e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	883b      	ldrh	r3, [r7, #0]
 8005d76:	3601      	adds	r6, #1
 8005d78:	351c      	adds	r5, #28
 8005d7a:	e790      	b.n	8005c9e <ai_platform_network_process+0xaa>
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	b005      	add	sp, #20
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	9c01      	ldr	r4, [sp, #4]
 8005d88:	4692      	mov	sl, r2
 8005d8a:	f104 0010 	add.w	r0, r4, #16
 8005d8e:	2221      	movs	r2, #33	; 0x21
 8005d90:	2112      	movs	r1, #18
 8005d92:	f000 f9a3 	bl	80060dc <core_set_error>
 8005d96:	4653      	mov	r3, sl
 8005d98:	e7f1      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005d9a:	9c01      	ldr	r4, [sp, #4]
 8005d9c:	2219      	movs	r2, #25
 8005d9e:	f104 0010 	add.w	r0, r4, #16
 8005da2:	2112      	movs	r1, #18
 8005da4:	f000 f99a 	bl	80060dc <core_set_error>
 8005da8:	2300      	movs	r3, #0
 8005daa:	e7e8      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005dac:	9c01      	ldr	r4, [sp, #4]
 8005dae:	2218      	movs	r2, #24
 8005db0:	f104 0010 	add.w	r0, r4, #16
 8005db4:	2112      	movs	r1, #18
 8005db6:	f000 f991 	bl	80060dc <core_set_error>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e7df      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005dbe:	9c01      	ldr	r4, [sp, #4]
 8005dc0:	f104 0010 	add.w	r0, r4, #16
 8005dc4:	2217      	movs	r2, #23
 8005dc6:	2112      	movs	r1, #18
 8005dc8:	f000 f988 	bl	80060dc <core_set_error>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e7d6      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005dd0:	a1c00100 	.word	0xa1c00100
 8005dd4:	e0002000 	.word	0xe0002000
 8005dd8:	e0042000 	.word	0xe0042000
 8005ddc:	58024c08 	.word	0x58024c08
 8005de0:	58024c00 	.word	0x58024c00
 8005de4:	f407a5c2 	.word	0xf407a5c2
 8005de8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005dec:	40023008 	.word	0x40023008
 8005df0:	40023000 	.word	0x40023000
 8005df4:	9c01      	ldr	r4, [sp, #4]
 8005df6:	9a02      	ldr	r2, [sp, #8]
 8005df8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	f000 80ab 	beq.w	8005f56 <ai_platform_network_process+0x362>
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f240 809e 	bls.w	8005f42 <ai_platform_network_process+0x34e>
 8005e06:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8005e0a:	f119 0f0c 	cmn.w	r9, #12
 8005e0e:	f000 8098 	beq.w	8005f42 <ai_platform_network_process+0x34e>
 8005e12:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8093 	beq.w	8005f42 <ai_platform_network_process+0x34e>
 8005e1c:	9d02      	ldr	r5, [sp, #8]
 8005e1e:	9401      	str	r4, [sp, #4]
 8005e20:	2700      	movs	r7, #0
 8005e22:	429f      	cmp	r7, r3
 8005e24:	f080 8095 	bcs.w	8005f52 <ai_platform_network_process+0x35e>
 8005e28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8090 	beq.w	8005f52 <ai_platform_network_process+0x35e>
 8005e32:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	f000 808b 	beq.w	8005f52 <ai_platform_network_process+0x35e>
 8005e3c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005e40:	f8d3 b000 	ldr.w	fp, [r3]
 8005e44:	013e      	lsls	r6, r7, #4
 8005e46:	eb1b 0a06 	adds.w	sl, fp, r6
 8005e4a:	f000 812c 	beq.w	80060a6 <ai_platform_network_process+0x4b2>
 8005e4e:	69a3      	ldr	r3, [r4, #24]
 8005e50:	2101      	movs	r1, #1
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	9302      	str	r3, [sp, #8]
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7fe fc58 	bl	800470c <ai_buffer_get_size>
 8005e5c:	9b02      	ldr	r3, [sp, #8]
 8005e5e:	4283      	cmp	r3, r0
 8005e60:	d36e      	bcc.n	8005f40 <ai_platform_network_process+0x34c>
 8005e62:	68e0      	ldr	r0, [r4, #12]
 8005e64:	69a9      	ldr	r1, [r5, #24]
 8005e66:	68c2      	ldr	r2, [r0, #12]
 8005e68:	68cb      	ldr	r3, [r1, #12]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d168      	bne.n	8005f40 <ai_platform_network_process+0x34c>
 8005e6e:	6882      	ldr	r2, [r0, #8]
 8005e70:	688b      	ldr	r3, [r1, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d164      	bne.n	8005f40 <ai_platform_network_process+0x34c>
 8005e76:	6842      	ldr	r2, [r0, #4]
 8005e78:	684b      	ldr	r3, [r1, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d160      	bne.n	8005f40 <ai_platform_network_process+0x34c>
 8005e7e:	69a3      	ldr	r3, [r4, #24]
 8005e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e84:	f001 f81e 	bl	8006ec4 <ai_array_get_data_byte_size>
 8005e88:	9002      	str	r0, [sp, #8]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 ff8c 	bl	8006da8 <get_tensor_byte_size>
 8005e90:	9b02      	ldr	r3, [sp, #8]
 8005e92:	4283      	cmp	r3, r0
 8005e94:	d354      	bcc.n	8005f40 <ai_platform_network_process+0x34c>
 8005e96:	69a3      	ldr	r3, [r4, #24]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	f000 ff99 	bl	8006dd0 <ai_array_to_buffer_fmt>
 8005e9e:	682b      	ldr	r3, [r5, #0]
 8005ea0:	4043      	eors	r3, r0
 8005ea2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005ea6:	d142      	bne.n	8005f2e <ai_platform_network_process+0x33a>
 8005ea8:	686b      	ldr	r3, [r5, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d035      	beq.n	8005f1a <ai_platform_network_process+0x326>
 8005eae:	69ab      	ldr	r3, [r5, #24]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	b342      	cbz	r2, 8005f06 <ai_platform_network_process+0x312>
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	9202      	str	r2, [sp, #8]
 8005eb8:	f000 ff76 	bl	8006da8 <get_tensor_byte_size>
 8005ebc:	f8ca 0008 	str.w	r0, [sl, #8]
 8005ec0:	69ab      	ldr	r3, [r5, #24]
 8005ec2:	9a02      	ldr	r2, [sp, #8]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	fb03 f000 	mul.w	r0, r3, r0
 8005eca:	f8ca 000c 	str.w	r0, [sl, #12]
 8005ece:	6869      	ldr	r1, [r5, #4]
 8005ed0:	f8ca 1004 	str.w	r1, [sl, #4]
 8005ed4:	686b      	ldr	r3, [r5, #4]
 8005ed6:	4403      	add	r3, r0
 8005ed8:	f84b 3006 	str.w	r3, [fp, r6]
 8005edc:	69a0      	ldr	r0, [r4, #24]
 8005ede:	6803      	ldr	r3, [r0, #0]
 8005ee0:	4590      	cmp	r8, r2
 8005ee2:	bf38      	it	cc
 8005ee4:	4690      	movcc	r8, r2
 8005ee6:	009e      	lsls	r6, r3, #2
 8005ee8:	d408      	bmi.n	8005efc <ai_platform_network_process+0x308>
 8005eea:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	4419      	add	r1, r3
 8005ef2:	6081      	str	r1, [r0, #8]
 8005ef4:	69a3      	ldr	r3, [r4, #24]
 8005ef6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005efa:	60da      	str	r2, [r3, #12]
 8005efc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005f00:	3701      	adds	r7, #1
 8005f02:	351c      	adds	r5, #28
 8005f04:	e78d      	b.n	8005e22 <ai_platform_network_process+0x22e>
 8005f06:	9c01      	ldr	r4, [sp, #4]
 8005f08:	4692      	mov	sl, r2
 8005f0a:	f104 0010 	add.w	r0, r4, #16
 8005f0e:	2221      	movs	r2, #33	; 0x21
 8005f10:	2113      	movs	r1, #19
 8005f12:	f000 f8e3 	bl	80060dc <core_set_error>
 8005f16:	4653      	mov	r3, sl
 8005f18:	e731      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005f1a:	9c01      	ldr	r4, [sp, #4]
 8005f1c:	469a      	mov	sl, r3
 8005f1e:	f104 0010 	add.w	r0, r4, #16
 8005f22:	2217      	movs	r2, #23
 8005f24:	2113      	movs	r1, #19
 8005f26:	f000 f8d9 	bl	80060dc <core_set_error>
 8005f2a:	4653      	mov	r3, sl
 8005f2c:	e727      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005f2e:	9c01      	ldr	r4, [sp, #4]
 8005f30:	2219      	movs	r2, #25
 8005f32:	f104 0010 	add.w	r0, r4, #16
 8005f36:	2113      	movs	r1, #19
 8005f38:	f000 f8d0 	bl	80060dc <core_set_error>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e71e      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005f40:	9c01      	ldr	r4, [sp, #4]
 8005f42:	f104 0010 	add.w	r0, r4, #16
 8005f46:	2218      	movs	r2, #24
 8005f48:	2113      	movs	r1, #19
 8005f4a:	f000 f8c7 	bl	80060dc <core_set_error>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e715      	b.n	8005d7e <ai_platform_network_process+0x18a>
 8005f52:	9c01      	ldr	r4, [sp, #4]
 8005f54:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005f56:	f8a4 8014 	strh.w	r8, [r4, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80a0 	beq.w	80060a0 <ai_platform_network_process+0x4ac>
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005f64:	f240 809a 	bls.w	800609c <ai_platform_network_process+0x4a8>
 8005f68:	f105 070c 	add.w	r7, r5, #12
 8005f6c:	8ae3      	ldrh	r3, [r4, #22]
 8005f6e:	8aa2      	ldrh	r2, [r4, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	f67f af04 	bls.w	8005d7e <ai_platform_network_process+0x18a>
 8005f76:	46a3      	mov	fp, r4
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	d036      	beq.n	8005fea <ai_platform_network_process+0x3f6>
 8005f7c:	882b      	ldrh	r3, [r5, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d033      	beq.n	8005fea <ai_platform_network_process+0x3f6>
 8005f82:	686b      	ldr	r3, [r5, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d030      	beq.n	8005fea <ai_platform_network_process+0x3f6>
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f04f 0800 	mov.w	r8, #0
 8005f8e:	b9db      	cbnz	r3, 8005fc8 <ai_platform_network_process+0x3d4>
 8005f90:	e02b      	b.n	8005fea <ai_platform_network_process+0x3f6>
 8005f92:	68d4      	ldr	r4, [r2, #12]
 8005f94:	1b00      	subs	r0, r0, r4
 8005f96:	4401      	add	r1, r0
 8005f98:	6091      	str	r1, [r2, #8]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	6872      	ldr	r2, [r6, #4]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005fa4:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005fa8:	440b      	add	r3, r1
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bf24      	itt	cs
 8005fae:	68f3      	ldrcs	r3, [r6, #12]
 8005fb0:	1ad3      	subcs	r3, r2, r3
 8005fb2:	6073      	str	r3, [r6, #4]
 8005fb4:	882b      	ldrh	r3, [r5, #0]
 8005fb6:	f108 0801 	add.w	r8, r8, #1
 8005fba:	4598      	cmp	r8, r3
 8005fbc:	d215      	bcs.n	8005fea <ai_platform_network_process+0x3f6>
 8005fbe:	686b      	ldr	r3, [r5, #4]
 8005fc0:	b19b      	cbz	r3, 8005fea <ai_platform_network_process+0x3f6>
 8005fc2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005fc6:	b183      	cbz	r3, 8005fea <ai_platform_network_process+0x3f6>
 8005fc8:	68a9      	ldr	r1, [r5, #8]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	f8d1 a000 	ldr.w	sl, [r1]
 8005fd0:	6814      	ldr	r4, [r2, #0]
 8005fd2:	6890      	ldr	r0, [r2, #8]
 8005fd4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005fd8:	eb0a 0609 	add.w	r6, sl, r9
 8005fdc:	00a4      	lsls	r4, r4, #2
 8005fde:	6871      	ldr	r1, [r6, #4]
 8005fe0:	d5d7      	bpl.n	8005f92 <ai_platform_network_process+0x39e>
 8005fe2:	68b2      	ldr	r2, [r6, #8]
 8005fe4:	f000 ffb0 	bl	8006f48 <memcpy>
 8005fe8:	e7da      	b.n	8005fa0 <ai_platform_network_process+0x3ac>
 8005fea:	4658      	mov	r0, fp
 8005fec:	f000 fe76 	bl	8006cdc <ai_layers_forward_all>
 8005ff0:	2f00      	cmp	r7, #0
 8005ff2:	d047      	beq.n	8006084 <ai_platform_network_process+0x490>
 8005ff4:	883b      	ldrh	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d044      	beq.n	8006084 <ai_platform_network_process+0x490>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d041      	beq.n	8006084 <ai_platform_network_process+0x490>
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	2800      	cmp	r0, #0
 8006004:	d03e      	beq.n	8006084 <ai_platform_network_process+0x490>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	e019      	b.n	8006040 <ai_platform_network_process+0x44c>
 800600c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006010:	4293      	cmp	r3, r2
 8006012:	bf24      	itt	cs
 8006014:	68f3      	ldrcs	r3, [r6, #12]
 8006016:	1ad3      	subcs	r3, r2, r3
 8006018:	6073      	str	r3, [r6, #4]
 800601a:	6981      	ldr	r1, [r0, #24]
 800601c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006020:	1b12      	subs	r2, r2, r4
 8006022:	4413      	add	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
 8006026:	6983      	ldr	r3, [r0, #24]
 8006028:	6872      	ldr	r2, [r6, #4]
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	883b      	ldrh	r3, [r7, #0]
 800602e:	f108 0801 	add.w	r8, r8, #1
 8006032:	4598      	cmp	r8, r3
 8006034:	d226      	bcs.n	8006084 <ai_platform_network_process+0x490>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	b323      	cbz	r3, 8006084 <ai_platform_network_process+0x490>
 800603a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800603e:	b308      	cbz	r0, 8006084 <ai_platform_network_process+0x490>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6981      	ldr	r1, [r0, #24]
 8006044:	f8d3 a000 	ldr.w	sl, [r3]
 8006048:	680c      	ldr	r4, [r1, #0]
 800604a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800604e:	eb0a 0609 	add.w	r6, sl, r9
 8006052:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8006056:	00a4      	lsls	r4, r4, #2
 8006058:	eb0c 0302 	add.w	r3, ip, r2
 800605c:	d5d6      	bpl.n	800600c <ai_platform_network_process+0x418>
 800605e:	6889      	ldr	r1, [r1, #8]
 8006060:	4660      	mov	r0, ip
 8006062:	f000 ff71 	bl	8006f48 <memcpy>
 8006066:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800606a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800606e:	440b      	add	r3, r1
 8006070:	4293      	cmp	r3, r2
 8006072:	bf24      	itt	cs
 8006074:	68f3      	ldrcs	r3, [r6, #12]
 8006076:	1ad3      	subcs	r3, r2, r3
 8006078:	6073      	str	r3, [r6, #4]
 800607a:	883b      	ldrh	r3, [r7, #0]
 800607c:	f108 0801 	add.w	r8, r8, #1
 8006080:	4598      	cmp	r8, r3
 8006082:	d3d8      	bcc.n	8006036 <ai_platform_network_process+0x442>
 8006084:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 8006088:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800608c:	3301      	adds	r3, #1
 800608e:	b29b      	uxth	r3, r3
 8006090:	429a      	cmp	r2, r3
 8006092:	f8ab 3016 	strh.w	r3, [fp, #22]
 8006096:	f63f af6f 	bhi.w	8005f78 <ai_platform_network_process+0x384>
 800609a:	e670      	b.n	8005d7e <ai_platform_network_process+0x18a>
 800609c:	2700      	movs	r7, #0
 800609e:	e765      	b.n	8005f6c <ai_platform_network_process+0x378>
 80060a0:	461d      	mov	r5, r3
 80060a2:	461f      	mov	r7, r3
 80060a4:	e762      	b.n	8005f6c <ai_platform_network_process+0x378>
 80060a6:	9c01      	ldr	r4, [sp, #4]
 80060a8:	2217      	movs	r2, #23
 80060aa:	f104 0010 	add.w	r0, r4, #16
 80060ae:	2113      	movs	r1, #19
 80060b0:	f000 f814 	bl	80060dc <core_set_error>
 80060b4:	4653      	mov	r3, sl
 80060b6:	e662      	b.n	8005d7e <ai_platform_network_process+0x18a>
 80060b8:	f104 0010 	add.w	r0, r4, #16
 80060bc:	2230      	movs	r2, #48	; 0x30
 80060be:	2111      	movs	r1, #17
 80060c0:	f000 f80c 	bl	80060dc <core_set_error>
 80060c4:	4633      	mov	r3, r6
 80060c6:	e65a      	b.n	8005d7e <ai_platform_network_process+0x18a>
 80060c8:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80060ca:	e5d2      	b.n	8005c72 <ai_platform_network_process+0x7e>

080060cc <core_init>:
 80060cc:	2001      	movs	r0, #1
 80060ce:	4770      	bx	lr

080060d0 <core_get_error>:
 80060d0:	4603      	mov	r3, r0
 80060d2:	2200      	movs	r2, #0
 80060d4:	6800      	ldr	r0, [r0, #0]
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop

080060dc <core_set_error>:
 80060dc:	7803      	ldrb	r3, [r0, #0]
 80060de:	b933      	cbnz	r3, 80060ee <core_set_error+0x12>
 80060e0:	7001      	strb	r1, [r0, #0]
 80060e2:	6803      	ldr	r3, [r0, #0]
 80060e4:	f362 231f 	bfi	r3, r2, #8, #24
 80060e8:	6003      	str	r3, [r0, #0]
 80060ea:	2001      	movs	r0, #1
 80060ec:	4770      	bx	lr
 80060ee:	2000      	movs	r0, #0
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop

080060f4 <forward_dense>:
 80060f4:	6983      	ldr	r3, [r0, #24]
 80060f6:	881a      	ldrh	r2, [r3, #0]
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	f000 8193 	beq.w	8006424 <forward_dense+0x330>
 80060fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006102:	ed2d 8b10 	vpush	{d8-d15}
 8006106:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800610a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800610e:	b099      	sub	sp, #100	; 0x64
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8194 	beq.w	800643e <forward_dense+0x34a>
 8006116:	f8d3 8000 	ldr.w	r8, [r3]
 800611a:	2a01      	cmp	r2, #1
 800611c:	f240 817f 	bls.w	800641e <forward_dense+0x32a>
 8006120:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8006124:	b104      	cbz	r4, 8006128 <forward_dense+0x34>
 8006126:	6824      	ldr	r4, [r4, #0]
 8006128:	2a02      	cmp	r2, #2
 800612a:	f000 817d 	beq.w	8006428 <forward_dense+0x334>
 800612e:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f040 817b 	bne.w	800642e <forward_dense+0x33a>
 8006138:	f11c 0118 	adds.w	r1, ip, #24
 800613c:	930e      	str	r3, [sp, #56]	; 0x38
 800613e:	f000 817c 	beq.w	800643a <forward_dense+0x346>
 8006142:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 8006146:	2901      	cmp	r1, #1
 8006148:	f240 83ab 	bls.w	80068a2 <forward_dense+0x7ae>
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8178 	beq.w	8006442 <forward_dense+0x34e>
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	930f      	str	r3, [sp, #60]	; 0x3c
 8006156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006158:	68e7      	ldr	r7, [r4, #12]
 800615a:	6998      	ldr	r0, [r3, #24]
 800615c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006160:	6803      	ldr	r3, [r0, #0]
 8006162:	6849      	ldr	r1, [r1, #4]
 8006164:	9115      	str	r1, [sp, #84]	; 0x54
 8006166:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 800616a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800616e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8006172:	fa4e f101 	asr.w	r1, lr, r1
 8006176:	2a03      	cmp	r2, #3
 8006178:	68ff      	ldr	r7, [r7, #12]
 800617a:	9113      	str	r1, [sp, #76]	; 0x4c
 800617c:	fb05 f506 	mul.w	r5, r5, r6
 8006180:	f000 8373 	beq.w	800686a <forward_dense+0x776>
 8006184:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8006188:	2a00      	cmp	r2, #0
 800618a:	f000 8371 	beq.w	8006870 <forward_dense+0x77c>
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	2a00      	cmp	r2, #0
 8006192:	f000 836d 	beq.w	8006870 <forward_dense+0x77c>
 8006196:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80061a0:	f000 836c 	beq.w	800687c <forward_dense+0x788>
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	f000 8369 	beq.w	800687c <forward_dense+0x788>
 80061aa:	f04f 0a00 	mov.w	sl, #0
 80061ae:	69a3      	ldr	r3, [r4, #24]
 80061b0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80061b4:	6899      	ldr	r1, [r3, #8]
 80061b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061b8:	9102      	str	r1, [sp, #8]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	6892      	ldr	r2, [r2, #8]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	9305      	str	r3, [sp, #20]
 80061c2:	00ad      	lsls	r5, r5, #2
 80061c4:	fb07 1005 	mla	r0, r7, r5, r1
 80061c8:	00b4      	lsls	r4, r6, #2
 80061ca:	4281      	cmp	r1, r0
 80061cc:	9011      	str	r0, [sp, #68]	; 0x44
 80061ce:	9410      	str	r4, [sp, #64]	; 0x40
 80061d0:	eb01 0804 	add.w	r8, r1, r4
 80061d4:	f080 811e 	bcs.w	8006414 <forward_dense+0x320>
 80061d8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80061da:	eddf faa0 	vldr	s31, [pc, #640]	; 800645c <forward_dense+0x368>
 80061de:	08e8      	lsrs	r0, r5, #3
 80061e0:	0141      	lsls	r1, r0, #5
 80061e2:	f025 0301 	bic.w	r3, r5, #1
 80061e6:	4606      	mov	r6, r0
 80061e8:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 80061ec:	9001      	str	r0, [sp, #4]
 80061ee:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 80061f2:	00f7      	lsls	r7, r6, #3
 80061f4:	9316      	str	r3, [sp, #88]	; 0x58
 80061f6:	0143      	lsls	r3, r0, #5
 80061f8:	00b6      	lsls	r6, r6, #2
 80061fa:	f1a5 0410 	sub.w	r4, r5, #16
 80061fe:	9307      	str	r3, [sp, #28]
 8006200:	f107 0308 	add.w	r3, r7, #8
 8006204:	0924      	lsrs	r4, r4, #4
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	1d33      	adds	r3, r6, #4
 800620a:	3401      	adds	r4, #1
 800620c:	930d      	str	r3, [sp, #52]	; 0x34
 800620e:	f005 0301 	and.w	r3, r5, #1
 8006212:	01a4      	lsls	r4, r4, #6
 8006214:	f005 0907 	and.w	r9, r5, #7
 8006218:	9309      	str	r3, [sp, #36]	; 0x24
 800621a:	00ab      	lsls	r3, r5, #2
 800621c:	9312      	str	r3, [sp, #72]	; 0x48
 800621e:	9703      	str	r7, [sp, #12]
 8006220:	960c      	str	r6, [sp, #48]	; 0x30
 8006222:	9417      	str	r4, [sp, #92]	; 0x5c
 8006224:	eb02 0b01 	add.w	fp, r2, r1
 8006228:	4653      	mov	r3, sl
 800622a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800622e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006230:	9907      	ldr	r1, [sp, #28]
 8006232:	6992      	ldr	r2, [r2, #24]
 8006234:	6894      	ldr	r4, [r2, #8]
 8006236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006238:	4459      	add	r1, fp
 800623a:	9106      	str	r1, [sp, #24]
 800623c:	2a00      	cmp	r2, #0
 800623e:	f000 810f 	beq.w	8006460 <forward_dense+0x36c>
 8006242:	6992      	ldr	r2, [r2, #24]
 8006244:	6896      	ldr	r6, [r2, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 810e 	beq.w	8006468 <forward_dense+0x374>
 800624c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800624e:	2a04      	cmp	r2, #4
 8006250:	f000 821e 	beq.w	8006690 <forward_dense+0x59c>
 8006254:	9a02      	ldr	r2, [sp, #8]
 8006256:	4590      	cmp	r8, r2
 8006258:	f240 80d3 	bls.w	8006402 <forward_dense+0x30e>
 800625c:	4694      	mov	ip, r2
 800625e:	9a07      	ldr	r2, [sp, #28]
 8006260:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006264:	f102 0e20 	add.w	lr, r2, #32
 8006268:	46b1      	mov	r9, r6
 800626a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800626c:	44de      	add	lr, fp
 800626e:	f1b9 0f00 	cmp.w	r9, #0
 8006272:	f000 80e8 	beq.w	8006446 <forward_dense+0x352>
 8006276:	9a01      	ldr	r2, [sp, #4]
 8006278:	edd9 2a00 	vldr	s5, [r9]
 800627c:	eddf 6a77 	vldr	s13, [pc, #476]	; 800645c <forward_dense+0x368>
 8006280:	f109 0904 	add.w	r9, r9, #4
 8006284:	2a00      	cmp	r2, #0
 8006286:	f000 80e6 	beq.w	8006456 <forward_dense+0x362>
 800628a:	9904      	ldr	r1, [sp, #16]
 800628c:	f104 0208 	add.w	r2, r4, #8
 8006290:	190f      	adds	r7, r1, r4
 8006292:	4671      	mov	r1, lr
 8006294:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 8006298:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800629c:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 80062a0:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 80062a4:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80062a8:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 80062ac:	ed51 3a04 	vldr	s7, [r1, #-16]
 80062b0:	ed51 4a03 	vldr	s9, [r1, #-12]
 80062b4:	ed51 5a02 	vldr	s11, [r1, #-8]
 80062b8:	ed11 6a01 	vldr	s12, [r1, #-4]
 80062bc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80062c0:	ed95 7a00 	vldr	s14, [r5]
 80062c4:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 80062c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d0:	ed90 7a00 	vldr	s14, [r0]
 80062d4:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 80062d8:	eee7 7a03 	vfma.f32	s15, s14, s6
 80062dc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80062e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062e4:	ed95 3a00 	vldr	s6, [r5]
 80062e8:	ed90 7a00 	vldr	s14, [r0]
 80062ec:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 80062f0:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80062f4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80062f8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80062fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006300:	ed95 3a00 	vldr	s6, [r5]
 8006304:	ed90 4a00 	vldr	s8, [r0]
 8006308:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 800630c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8006310:	eee7 7a05 	vfma.f32	s15, s14, s10
 8006314:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006318:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800631c:	ed95 5a00 	vldr	s10, [r5]
 8006320:	ed90 7a00 	vldr	s14, [r0]
 8006324:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006328:	3208      	adds	r2, #8
 800632a:	4297      	cmp	r7, r2
 800632c:	f101 0120 	add.w	r1, r1, #32
 8006330:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006334:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006338:	eee7 7a06 	vfma.f32	s15, s14, s12
 800633c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006340:	d1a8      	bne.n	8006294 <forward_dense+0x1a0>
 8006342:	9a03      	ldr	r2, [sp, #12]
 8006344:	18a1      	adds	r1, r4, r2
 8006346:	465a      	mov	r2, fp
 8006348:	2e00      	cmp	r6, #0
 800634a:	d04a      	beq.n	80063e2 <forward_dense+0x2ee>
 800634c:	7808      	ldrb	r0, [r1, #0]
 800634e:	ed92 7a00 	vldr	s14, [r2]
 8006352:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006356:	edd0 7a00 	vldr	s15, [r0]
 800635a:	2e01      	cmp	r6, #1
 800635c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006360:	d03f      	beq.n	80063e2 <forward_dense+0x2ee>
 8006362:	7848      	ldrb	r0, [r1, #1]
 8006364:	edd2 7a01 	vldr	s15, [r2, #4]
 8006368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800636c:	ed90 7a00 	vldr	s14, [r0]
 8006370:	2e02      	cmp	r6, #2
 8006372:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006376:	d034      	beq.n	80063e2 <forward_dense+0x2ee>
 8006378:	7888      	ldrb	r0, [r1, #2]
 800637a:	edd2 7a02 	vldr	s15, [r2, #8]
 800637e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006382:	ed90 7a00 	vldr	s14, [r0]
 8006386:	2e03      	cmp	r6, #3
 8006388:	eee7 6a27 	vfma.f32	s13, s14, s15
 800638c:	d029      	beq.n	80063e2 <forward_dense+0x2ee>
 800638e:	78c8      	ldrb	r0, [r1, #3]
 8006390:	edd2 7a03 	vldr	s15, [r2, #12]
 8006394:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006398:	ed90 7a00 	vldr	s14, [r0]
 800639c:	2e04      	cmp	r6, #4
 800639e:	eee7 6a27 	vfma.f32	s13, s14, s15
 80063a2:	d01e      	beq.n	80063e2 <forward_dense+0x2ee>
 80063a4:	7908      	ldrb	r0, [r1, #4]
 80063a6:	edd2 7a04 	vldr	s15, [r2, #16]
 80063aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063ae:	ed90 7a00 	vldr	s14, [r0]
 80063b2:	2e05      	cmp	r6, #5
 80063b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80063b8:	d013      	beq.n	80063e2 <forward_dense+0x2ee>
 80063ba:	7948      	ldrb	r0, [r1, #5]
 80063bc:	edd2 7a05 	vldr	s15, [r2, #20]
 80063c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063c4:	ed90 7a00 	vldr	s14, [r0]
 80063c8:	2e06      	cmp	r6, #6
 80063ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 80063ce:	d008      	beq.n	80063e2 <forward_dense+0x2ee>
 80063d0:	7989      	ldrb	r1, [r1, #6]
 80063d2:	edd2 7a06 	vldr	s15, [r2, #24]
 80063d6:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 80063da:	ed92 7a00 	vldr	s14, [r2]
 80063de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80063e2:	4454      	add	r4, sl
 80063e4:	ee72 6aa6 	vadd.f32	s13, s5, s13
 80063e8:	ecec 6a01 	vstmia	ip!, {s13}
 80063ec:	45c4      	cmp	ip, r8
 80063ee:	f4ff af3e 	bcc.w	800626e <forward_dense+0x17a>
 80063f2:	9902      	ldr	r1, [sp, #8]
 80063f4:	43ca      	mvns	r2, r1
 80063f6:	4442      	add	r2, r8
 80063f8:	f022 0203 	bic.w	r2, r2, #3
 80063fc:	3204      	adds	r2, #4
 80063fe:	188a      	adds	r2, r1, r2
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006404:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006406:	4490      	add	r8, r2
 8006408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800640a:	4493      	add	fp, r2
 800640c:	9a02      	ldr	r2, [sp, #8]
 800640e:	428a      	cmp	r2, r1
 8006410:	f4ff af0d 	bcc.w	800622e <forward_dense+0x13a>
 8006414:	b019      	add	sp, #100	; 0x64
 8006416:	ecbd 8b10 	vpop	{d8-d15}
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	2300      	movs	r3, #0
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	deff      	udf	#255	; 0xff
 8006424:	6853      	ldr	r3, [r2, #4]
 8006426:	deff      	udf	#255	; 0xff
 8006428:	2300      	movs	r3, #0
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	deff      	udf	#255	; 0xff
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	910e      	str	r1, [sp, #56]	; 0x38
 8006432:	f11c 0118 	adds.w	r1, ip, #24
 8006436:	f47f ae84 	bne.w	8006142 <forward_dense+0x4e>
 800643a:	910f      	str	r1, [sp, #60]	; 0x3c
 800643c:	e68b      	b.n	8006156 <forward_dense+0x62>
 800643e:	4698      	mov	r8, r3
 8006440:	e66b      	b.n	800611a <forward_dense+0x26>
 8006442:	930f      	str	r3, [sp, #60]	; 0x3c
 8006444:	e687      	b.n	8006156 <forward_dense+0x62>
 8006446:	9a01      	ldr	r2, [sp, #4]
 8006448:	eddf 6a04 	vldr	s13, [pc, #16]	; 800645c <forward_dense+0x368>
 800644c:	eef0 2a6f 	vmov.f32	s5, s31
 8006450:	2a00      	cmp	r2, #0
 8006452:	f47f af1a 	bne.w	800628a <forward_dense+0x196>
 8006456:	9a06      	ldr	r2, [sp, #24]
 8006458:	4621      	mov	r1, r4
 800645a:	e775      	b.n	8006348 <forward_dense+0x254>
 800645c:	00000000 	.word	0x00000000
 8006460:	4616      	mov	r6, r2
 8006462:	2b00      	cmp	r3, #0
 8006464:	f47f aef2 	bne.w	800624c <forward_dense+0x158>
 8006468:	9a02      	ldr	r2, [sp, #8]
 800646a:	4590      	cmp	r8, r2
 800646c:	d9c9      	bls.n	8006402 <forward_dense+0x30e>
 800646e:	4615      	mov	r5, r2
 8006470:	9a07      	ldr	r2, [sp, #28]
 8006472:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006474:	9308      	str	r3, [sp, #32]
 8006476:	f102 0740 	add.w	r7, r2, #64	; 0x40
 800647a:	9a06      	ldr	r2, [sp, #24]
 800647c:	9b05      	ldr	r3, [sp, #20]
 800647e:	4610      	mov	r0, r2
 8006480:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006482:	445f      	add	r7, fp
 8006484:	eb00 0c02 	add.w	ip, r0, r2
 8006488:	f001 0e0f 	and.w	lr, r1, #15
 800648c:	468a      	mov	sl, r1
 800648e:	4691      	mov	r9, r2
 8006490:	2e00      	cmp	r6, #0
 8006492:	f000 81de 	beq.w	8006852 <forward_dense+0x75e>
 8006496:	f1ba 0f0f 	cmp.w	sl, #15
 800649a:	ed96 fa00 	vldr	s30, [r6]
 800649e:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 800645c <forward_dense+0x368>
 80064a2:	f106 0604 	add.w	r6, r6, #4
 80064a6:	f240 81dc 	bls.w	8006862 <forward_dense+0x76e>
 80064aa:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80064ae:	463a      	mov	r2, r7
 80064b0:	4650      	mov	r0, sl
 80064b2:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 80064b6:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 80064ba:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 80064be:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 80064c2:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 80064c6:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 80064ca:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 80064ce:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 80064d2:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 80064d6:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 80064da:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 80064de:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 80064e2:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 80064e6:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 80064ea:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 80064ee:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 80064f2:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80064f6:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 80064fa:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80064fe:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 8006502:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8006506:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 800650a:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 800650e:	ed12 4a04 	vldr	s8, [r2, #-16]
 8006512:	ed51 4a04 	vldr	s9, [r1, #-16]
 8006516:	ed12 5a03 	vldr	s10, [r2, #-12]
 800651a:	ed51 5a03 	vldr	s11, [r1, #-12]
 800651e:	ed12 6a02 	vldr	s12, [r2, #-8]
 8006522:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006526:	ee67 7aae 	vmul.f32	s15, s15, s29
 800652a:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 800652e:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8006532:	3810      	subs	r0, #16
 8006534:	280f      	cmp	r0, #15
 8006536:	ed11 ea01 	vldr	s28, [r1, #-4]
 800653a:	ed52 da01 	vldr	s27, [r2, #-4]
 800653e:	eeed 7a2e 	vfma.f32	s15, s26, s29
 8006542:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8006546:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800654a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800654e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006552:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006556:	eee9 7a89 	vfma.f32	s15, s19, s18
 800655a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800655e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8006562:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006566:	eee2 7a22 	vfma.f32	s15, s4, s5
 800656a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800656e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006572:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006576:	eee6 7a07 	vfma.f32	s15, s12, s14
 800657a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800657e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006582:	d896      	bhi.n	80064b2 <forward_dense+0x3be>
 8006584:	eb04 0009 	add.w	r0, r4, r9
 8006588:	4672      	mov	r2, lr
 800658a:	4661      	mov	r1, ip
 800658c:	2a00      	cmp	r2, #0
 800658e:	d075      	beq.n	800667c <forward_dense+0x588>
 8006590:	ed90 7a00 	vldr	s14, [r0]
 8006594:	edd1 7a00 	vldr	s15, [r1]
 8006598:	2a01      	cmp	r2, #1
 800659a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800659e:	d06d      	beq.n	800667c <forward_dense+0x588>
 80065a0:	ed90 7a01 	vldr	s14, [r0, #4]
 80065a4:	edd1 7a01 	vldr	s15, [r1, #4]
 80065a8:	2a02      	cmp	r2, #2
 80065aa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065ae:	d065      	beq.n	800667c <forward_dense+0x588>
 80065b0:	ed90 7a02 	vldr	s14, [r0, #8]
 80065b4:	edd1 7a02 	vldr	s15, [r1, #8]
 80065b8:	2a03      	cmp	r2, #3
 80065ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065be:	d05d      	beq.n	800667c <forward_dense+0x588>
 80065c0:	ed90 7a03 	vldr	s14, [r0, #12]
 80065c4:	edd1 7a03 	vldr	s15, [r1, #12]
 80065c8:	2a04      	cmp	r2, #4
 80065ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065ce:	d055      	beq.n	800667c <forward_dense+0x588>
 80065d0:	ed90 7a04 	vldr	s14, [r0, #16]
 80065d4:	edd1 7a04 	vldr	s15, [r1, #16]
 80065d8:	2a05      	cmp	r2, #5
 80065da:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065de:	d04d      	beq.n	800667c <forward_dense+0x588>
 80065e0:	ed90 7a05 	vldr	s14, [r0, #20]
 80065e4:	edd1 7a05 	vldr	s15, [r1, #20]
 80065e8:	2a06      	cmp	r2, #6
 80065ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065ee:	d045      	beq.n	800667c <forward_dense+0x588>
 80065f0:	ed90 7a06 	vldr	s14, [r0, #24]
 80065f4:	edd1 7a06 	vldr	s15, [r1, #24]
 80065f8:	2a07      	cmp	r2, #7
 80065fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80065fe:	d03d      	beq.n	800667c <forward_dense+0x588>
 8006600:	ed90 7a07 	vldr	s14, [r0, #28]
 8006604:	edd1 7a07 	vldr	s15, [r1, #28]
 8006608:	2a08      	cmp	r2, #8
 800660a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800660e:	d035      	beq.n	800667c <forward_dense+0x588>
 8006610:	ed90 7a08 	vldr	s14, [r0, #32]
 8006614:	edd1 7a08 	vldr	s15, [r1, #32]
 8006618:	2a09      	cmp	r2, #9
 800661a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800661e:	d02d      	beq.n	800667c <forward_dense+0x588>
 8006620:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8006624:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8006628:	2a0a      	cmp	r2, #10
 800662a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800662e:	d025      	beq.n	800667c <forward_dense+0x588>
 8006630:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8006634:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8006638:	2a0b      	cmp	r2, #11
 800663a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800663e:	d01d      	beq.n	800667c <forward_dense+0x588>
 8006640:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8006644:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8006648:	2a0c      	cmp	r2, #12
 800664a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800664e:	d015      	beq.n	800667c <forward_dense+0x588>
 8006650:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8006654:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8006658:	2a0d      	cmp	r2, #13
 800665a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800665e:	d00d      	beq.n	800667c <forward_dense+0x588>
 8006660:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8006664:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8006668:	2a0e      	cmp	r2, #14
 800666a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800666e:	d005      	beq.n	800667c <forward_dense+0x588>
 8006670:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8006674:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8006678:	eee7 6a27 	vfma.f32	s13, s14, s15
 800667c:	441c      	add	r4, r3
 800667e:	ee7f 6a26 	vadd.f32	s13, s30, s13
 8006682:	ece5 6a01 	vstmia	r5!, {s13}
 8006686:	4545      	cmp	r5, r8
 8006688:	f4ff af02 	bcc.w	8006490 <forward_dense+0x39c>
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	e6b0      	b.n	80063f2 <forward_dense+0x2fe>
 8006690:	9902      	ldr	r1, [sp, #8]
 8006692:	4588      	cmp	r8, r1
 8006694:	f67f aeb5 	bls.w	8006402 <forward_dense+0x30e>
 8006698:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800669a:	eb02 000b 	add.w	r0, r2, fp
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	9008      	str	r0, [sp, #32]
 80066a2:	3220      	adds	r2, #32
 80066a4:	3007      	adds	r0, #7
 80066a6:	445a      	add	r2, fp
 80066a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80066aa:	920a      	str	r2, [sp, #40]	; 0x28
 80066ac:	4689      	mov	r9, r1
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	f000 80b9 	beq.w	8006826 <forward_dense+0x732>
 80066b4:	9a01      	ldr	r2, [sp, #4]
 80066b6:	edd6 2a00 	vldr	s5, [r6]
 80066ba:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 800645c <forward_dense+0x368>
 80066be:	3604      	adds	r6, #4
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	f000 80b8 	beq.w	8006836 <forward_dense+0x742>
 80066c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066c8:	1917      	adds	r7, r2, r4
 80066ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066cc:	1d21      	adds	r1, r4, #4
 80066ce:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 80066d2:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 80066d6:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 80066da:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 80066de:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 80066e2:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 80066e6:	ed52 4a04 	vldr	s9, [r2, #-16]
 80066ea:	ed12 5a03 	vldr	s10, [r2, #-12]
 80066ee:	ed52 5a02 	vldr	s11, [r2, #-8]
 80066f2:	ed12 6a01 	vldr	s12, [r2, #-4]
 80066f6:	f005 0e0f 	and.w	lr, r5, #15
 80066fa:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80066fe:	ed9e 7a00 	vldr	s14, [lr]
 8006702:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8006706:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800670a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670e:	ed9c 7a00 	vldr	s14, [ip]
 8006712:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 8006716:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800671a:	eee7 7a03 	vfma.f32	s15, s14, s6
 800671e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8006722:	f000 0c0f 	and.w	ip, r0, #15
 8006726:	ed9e 7a00 	vldr	s14, [lr]
 800672a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800672e:	eee7 7a23 	vfma.f32	s15, s14, s7
 8006732:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006736:	3104      	adds	r1, #4
 8006738:	ed9c 7a00 	vldr	s14, [ip]
 800673c:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8006740:	eee7 7a04 	vfma.f32	s15, s14, s8
 8006744:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006748:	f005 050f 	and.w	r5, r5, #15
 800674c:	ed9c 7a00 	vldr	s14, [ip]
 8006750:	eee7 7a24 	vfma.f32	s15, s14, s9
 8006754:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006758:	428f      	cmp	r7, r1
 800675a:	ed95 7a00 	vldr	s14, [r5]
 800675e:	ea4f 1510 	mov.w	r5, r0, lsr #4
 8006762:	eee7 7a05 	vfma.f32	s15, s14, s10
 8006766:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800676a:	f000 000f 	and.w	r0, r0, #15
 800676e:	ed95 7a00 	vldr	s14, [r5]
 8006772:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006776:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800677a:	f102 0220 	add.w	r2, r2, #32
 800677e:	ed90 7a00 	vldr	s14, [r0]
 8006782:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006786:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800678a:	d1a0      	bne.n	80066ce <forward_dense+0x5da>
 800678c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800678e:	46de      	mov	lr, fp
 8006790:	eb04 0a02 	add.w	sl, r4, r2
 8006794:	9a08      	ldr	r2, [sp, #32]
 8006796:	4596      	cmp	lr, r2
 8006798:	d22c      	bcs.n	80067f4 <forward_dense+0x700>
 800679a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800679c:	f10e 0108 	add.w	r1, lr, #8
 80067a0:	eba2 0c01 	sub.w	ip, r2, r1
 80067a4:	f02c 0207 	bic.w	r2, ip, #7
 80067a8:	f10e 0710 	add.w	r7, lr, #16
 80067ac:	4417      	add	r7, r2
 80067ae:	f10a 35ff 	add.w	r5, sl, #4294967295
 80067b2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80067b6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80067ba:	ed11 6a02 	vldr	s12, [r1, #-8]
 80067be:	f002 000f 	and.w	r0, r2, #15
 80067c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067c6:	ed90 7a00 	vldr	s14, [r0]
 80067ca:	0912      	lsrs	r2, r2, #4
 80067cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80067d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d4:	ed92 7a00 	vldr	s14, [r2]
 80067d8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80067dc:	3108      	adds	r1, #8
 80067de:	428f      	cmp	r7, r1
 80067e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80067e4:	d1e5      	bne.n	80067b2 <forward_dense+0x6be>
 80067e6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80067ea:	f10c 0c01 	add.w	ip, ip, #1
 80067ee:	44e2      	add	sl, ip
 80067f0:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 80067f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067f6:	b312      	cbz	r2, 800683e <forward_dense+0x74a>
 80067f8:	f89a 2000 	ldrb.w	r2, [sl]
 80067fc:	edde 7a00 	vldr	s15, [lr]
 8006800:	0912      	lsrs	r2, r2, #4
 8006802:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006806:	ed92 7a00 	vldr	s14, [r2]
 800680a:	9a05      	ldr	r2, [sp, #20]
 800680c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006810:	4414      	add	r4, r2
 8006812:	ee76 2aa2 	vadd.f32	s5, s13, s5
 8006816:	ece9 2a01 	vstmia	r9!, {s5}
 800681a:	45c8      	cmp	r8, r9
 800681c:	f67f ade9 	bls.w	80063f2 <forward_dense+0x2fe>
 8006820:	2e00      	cmp	r6, #0
 8006822:	f47f af47 	bne.w	80066b4 <forward_dense+0x5c0>
 8006826:	9a01      	ldr	r2, [sp, #4]
 8006828:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80068a8 <forward_dense+0x7b4>
 800682c:	eef0 2a6f 	vmov.f32	s5, s31
 8006830:	2a00      	cmp	r2, #0
 8006832:	f47f af48 	bne.w	80066c6 <forward_dense+0x5d2>
 8006836:	f8dd e018 	ldr.w	lr, [sp, #24]
 800683a:	46a2      	mov	sl, r4
 800683c:	e7aa      	b.n	8006794 <forward_dense+0x6a0>
 800683e:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8006842:	9a05      	ldr	r2, [sp, #20]
 8006844:	ece9 6a01 	vstmia	r9!, {s13}
 8006848:	45c1      	cmp	r9, r8
 800684a:	4414      	add	r4, r2
 800684c:	f4ff af2f 	bcc.w	80066ae <forward_dense+0x5ba>
 8006850:	e5cf      	b.n	80063f2 <forward_dense+0x2fe>
 8006852:	f1ba 0f0f 	cmp.w	sl, #15
 8006856:	eeb0 fa6f 	vmov.f32	s30, s31
 800685a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80068a8 <forward_dense+0x7b4>
 800685e:	f63f ae24 	bhi.w	80064aa <forward_dense+0x3b6>
 8006862:	4652      	mov	r2, sl
 8006864:	4620      	mov	r0, r4
 8006866:	9906      	ldr	r1, [sp, #24]
 8006868:	e690      	b.n	800658c <forward_dense+0x498>
 800686a:	2300      	movs	r3, #0
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	deff      	udf	#255	; 0xff
 8006870:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006874:	2b04      	cmp	r3, #4
 8006876:	4691      	mov	r9, r2
 8006878:	f47f ac94 	bne.w	80061a4 <forward_dense+0xb0>
 800687c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8006880:	f1b9 0f00 	cmp.w	r9, #0
 8006884:	f43f ac93 	beq.w	80061ae <forward_dense+0xba>
 8006888:	e9d9 0100 	ldrd	r0, r1, [r9]
 800688c:	f000 faf6 	bl	8006e7c <ai_array_get_byte_size>
 8006890:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006894:	4602      	mov	r2, r0
 8006896:	4651      	mov	r1, sl
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fb55 	bl	8006f48 <memcpy>
 800689e:	4682      	mov	sl, r0
 80068a0:	e485      	b.n	80061ae <forward_dense+0xba>
 80068a2:	2300      	movs	r3, #0
 80068a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80068a6:	e456      	b.n	8006156 <forward_dense+0x62>
 80068a8:	00000000 	.word	0x00000000

080068ac <nl_func_sm_array_f32>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	ed2d 8b04 	vpush	{d8-d9}
 80068b4:	b089      	sub	sp, #36	; 0x24
 80068b6:	698f      	ldr	r7, [r1, #24]
 80068b8:	6984      	ldr	r4, [r0, #24]
 80068ba:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80068be:	68bd      	ldr	r5, [r7, #8]
 80068c0:	9402      	str	r4, [sp, #8]
 80068c2:	4626      	mov	r6, r4
 80068c4:	4696      	mov	lr, r2
 80068c6:	eba2 020c 	sub.w	r2, r2, ip
 80068ca:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80068ce:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	68b6      	ldr	r6, [r6, #8]
 80068d4:	ebae 0e04 	sub.w	lr, lr, r4
 80068d8:	4295      	cmp	r5, r2
 80068da:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 80068de:	d354      	bcc.n	800698a <nl_func_sm_array_f32+0xde>
 80068e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80068e4:	f1cc 0200 	rsb	r2, ip, #0
 80068e8:	00a4      	lsls	r4, r4, #2
 80068ea:	e9cd 1006 	strd	r1, r0, [sp, #24]
 80068ee:	9303      	str	r3, [sp, #12]
 80068f0:	9204      	str	r2, [sp, #16]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4262      	negs	r2, r4
 80068f6:	9205      	str	r2, [sp, #20]
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	9a07      	ldr	r2, [sp, #28]
 8006902:	60bd      	str	r5, [r7, #8]
 8006904:	609e      	str	r6, [r3, #8]
 8006906:	9b06      	ldr	r3, [sp, #24]
 8006908:	6992      	ldr	r2, [r2, #24]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	6894      	ldr	r4, [r2, #8]
 800690e:	9a03      	ldr	r2, [sp, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2a01      	cmp	r2, #1
 8006914:	ed93 8a00 	vldr	s16, [r3]
 8006918:	d940      	bls.n	800699c <nl_func_sm_array_f32+0xf0>
 800691a:	9901      	ldr	r1, [sp, #4]
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	eb03 0b01 	add.w	fp, r3, r1
 8006922:	ecf2 7a01 	vldmia	r2!, {s15}
 8006926:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800692a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692e:	bfb8      	it	lt
 8006930:	eeb0 8a67 	vmovlt.f32	s16, s15
 8006934:	4593      	cmp	fp, r2
 8006936:	d1f4      	bne.n	8006922 <nl_func_sm_array_f32+0x76>
 8006938:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80069a8 <nl_func_sm_array_f32+0xfc>
 800693c:	469a      	mov	sl, r3
 800693e:	46a1      	mov	r9, r4
 8006940:	46a0      	mov	r8, r4
 8006942:	ecba 0a01 	vldmia	sl!, {s0}
 8006946:	ee30 0a48 	vsub.f32	s0, s0, s16
 800694a:	f001 fd8d 	bl	8008468 <expf>
 800694e:	45d3      	cmp	fp, sl
 8006950:	eca8 0a01 	vstmia	r8!, {s0}
 8006954:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006958:	d1f3      	bne.n	8006942 <nl_func_sm_array_f32+0x96>
 800695a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800695e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006962:	d00b      	beq.n	800697c <nl_func_sm_array_f32+0xd0>
 8006964:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	441c      	add	r4, r3
 800696c:	edd9 7a00 	vldr	s15, [r9]
 8006970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006974:	ece9 7a01 	vstmia	r9!, {s15}
 8006978:	454c      	cmp	r4, r9
 800697a:	d1f7      	bne.n	800696c <nl_func_sm_array_f32+0xc0>
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	441d      	add	r5, r3
 8006982:	9b05      	ldr	r3, [sp, #20]
 8006984:	42aa      	cmp	r2, r5
 8006986:	441e      	add	r6, r3
 8006988:	d9b9      	bls.n	80068fe <nl_func_sm_array_f32+0x52>
 800698a:	60ba      	str	r2, [r7, #8]
 800698c:	9a02      	ldr	r2, [sp, #8]
 800698e:	68d3      	ldr	r3, [r2, #12]
 8006990:	6093      	str	r3, [r2, #8]
 8006992:	b009      	add	sp, #36	; 0x24
 8006994:	ecbd 8b04 	vpop	{d8-d9}
 8006998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699c:	2a00      	cmp	r2, #0
 800699e:	d0ed      	beq.n	800697c <nl_func_sm_array_f32+0xd0>
 80069a0:	9a01      	ldr	r2, [sp, #4]
 80069a2:	eb03 0b02 	add.w	fp, r3, r2
 80069a6:	e7c7      	b.n	8006938 <nl_func_sm_array_f32+0x8c>
 80069a8:	00000000 	.word	0x00000000

080069ac <nl_func_relu_generic_array_f32>:
 80069ac:	b430      	push	{r4, r5}
 80069ae:	6989      	ldr	r1, [r1, #24]
 80069b0:	6980      	ldr	r0, [r0, #24]
 80069b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80069b6:	688c      	ldr	r4, [r1, #8]
 80069b8:	6880      	ldr	r0, [r0, #8]
 80069ba:	ed93 7a00 	vldr	s14, [r3]
 80069be:	ed93 6a01 	vldr	s12, [r3, #4]
 80069c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80069c6:	3a01      	subs	r2, #1
 80069c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80069cc:	0092      	lsls	r2, r2, #2
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	4410      	add	r0, r2
 80069d4:	4422      	add	r2, r4
 80069d6:	d421      	bmi.n	8006a1c <nl_func_relu_generic_array_f32+0x70>
 80069d8:	4294      	cmp	r4, r2
 80069da:	d83d      	bhi.n	8006a58 <nl_func_relu_generic_array_f32+0xac>
 80069dc:	1d13      	adds	r3, r2, #4
 80069de:	1d02      	adds	r2, r0, #4
 80069e0:	e010      	b.n	8006a04 <nl_func_relu_generic_array_f32+0x58>
 80069e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ea:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80069ee:	d501      	bpl.n	80069f4 <nl_func_relu_generic_array_f32+0x48>
 80069f0:	ee65 7a86 	vmul.f32	s15, s11, s12
 80069f4:	ed62 7a01 	vstmdb	r2!, {s15}
 80069f8:	6888      	ldr	r0, [r1, #8]
 80069fa:	f1a3 0408 	sub.w	r4, r3, #8
 80069fe:	4284      	cmp	r4, r0
 8006a00:	462b      	mov	r3, r5
 8006a02:	d329      	bcc.n	8006a58 <nl_func_relu_generic_array_f32+0xac>
 8006a04:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006a08:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a10:	f1a3 0504 	sub.w	r5, r3, #4
 8006a14:	d4e5      	bmi.n	80069e2 <nl_func_relu_generic_array_f32+0x36>
 8006a16:	eef0 7a66 	vmov.f32	s15, s13
 8006a1a:	e7eb      	b.n	80069f4 <nl_func_relu_generic_array_f32+0x48>
 8006a1c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a24:	d01a      	beq.n	8006a5c <nl_func_relu_generic_array_f32+0xb0>
 8006a26:	4294      	cmp	r4, r2
 8006a28:	d816      	bhi.n	8006a58 <nl_func_relu_generic_array_f32+0xac>
 8006a2a:	1d13      	adds	r3, r2, #4
 8006a2c:	1d02      	adds	r2, r0, #4
 8006a2e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006a32:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a3a:	f1a3 0408 	sub.w	r4, r3, #8
 8006a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a42:	f1a3 0004 	sub.w	r0, r3, #4
 8006a46:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	d51e      	bpl.n	8006a8c <nl_func_relu_generic_array_f32+0xe0>
 8006a4e:	ed62 6a01 	vstmdb	r2!, {s13}
 8006a52:	688b      	ldr	r3, [r1, #8]
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d91e      	bls.n	8006a96 <nl_func_relu_generic_array_f32+0xea>
 8006a58:	bc30      	pop	{r4, r5}
 8006a5a:	4770      	bx	lr
 8006a5c:	4294      	cmp	r4, r2
 8006a5e:	d8fb      	bhi.n	8006a58 <nl_func_relu_generic_array_f32+0xac>
 8006a60:	1d13      	adds	r3, r2, #4
 8006a62:	2500      	movs	r5, #0
 8006a64:	1d02      	adds	r2, r0, #4
 8006a66:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a6e:	f1a3 0408 	sub.w	r4, r3, #8
 8006a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a76:	f1a3 0004 	sub.w	r0, r3, #4
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	db0d      	blt.n	8006a9a <nl_func_relu_generic_array_f32+0xee>
 8006a7e:	ed62 7a01 	vstmdb	r2!, {s15}
 8006a82:	688b      	ldr	r3, [r1, #8]
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d8e7      	bhi.n	8006a58 <nl_func_relu_generic_array_f32+0xac>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	e7ec      	b.n	8006a66 <nl_func_relu_generic_array_f32+0xba>
 8006a8c:	ed62 7a01 	vstmdb	r2!, {s15}
 8006a90:	688c      	ldr	r4, [r1, #8]
 8006a92:	429c      	cmp	r4, r3
 8006a94:	d8e0      	bhi.n	8006a58 <nl_func_relu_generic_array_f32+0xac>
 8006a96:	4603      	mov	r3, r0
 8006a98:	e7c9      	b.n	8006a2e <nl_func_relu_generic_array_f32+0x82>
 8006a9a:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006a9e:	688c      	ldr	r4, [r1, #8]
 8006aa0:	429c      	cmp	r4, r3
 8006aa2:	d8d9      	bhi.n	8006a58 <nl_func_relu_generic_array_f32+0xac>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	e7de      	b.n	8006a66 <nl_func_relu_generic_array_f32+0xba>

08006aa8 <forward_relu>:
 8006aa8:	6982      	ldr	r2, [r0, #24]
 8006aaa:	8813      	ldrh	r3, [r2, #0]
 8006aac:	b333      	cbz	r3, 8006afc <forward_relu+0x54>
 8006aae:	6852      	ldr	r2, [r2, #4]
 8006ab0:	6851      	ldr	r1, [r2, #4]
 8006ab2:	b101      	cbz	r1, 8006ab6 <forward_relu+0xe>
 8006ab4:	6809      	ldr	r1, [r1, #0]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d91d      	bls.n	8006af6 <forward_relu+0x4e>
 8006aba:	b4f0      	push	{r4, r5, r6, r7}
 8006abc:	6917      	ldr	r7, [r2, #16]
 8006abe:	b107      	cbz	r7, 8006ac2 <forward_relu+0x1a>
 8006ac0:	683f      	ldr	r7, [r7, #0]
 8006ac2:	688c      	ldr	r4, [r1, #8]
 8006ac4:	69c3      	ldr	r3, [r0, #28]
 8006ac6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d044      	beq.n	8006b58 <forward_relu+0xb0>
 8006ace:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8006ad2:	2d01      	cmp	r5, #1
 8006ad4:	d014      	beq.n	8006b00 <forward_relu+0x58>
 8006ad6:	2c00      	cmp	r4, #0
 8006ad8:	d074      	beq.n	8006bc4 <forward_relu+0x11c>
 8006ada:	68ce      	ldr	r6, [r1, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006ae2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ae6:	42a6      	cmp	r6, r4
 8006ae8:	fb05 f202 	mul.w	r2, r5, r2
 8006aec:	d1f9      	bne.n	8006ae2 <forward_relu+0x3a>
 8006aee:	4638      	mov	r0, r7
 8006af0:	bcf0      	pop	{r4, r5, r6, r7}
 8006af2:	f7ff bf5b 	b.w	80069ac <nl_func_relu_generic_array_f32>
 8006af6:	2300      	movs	r3, #0
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	deff      	udf	#255	; 0xff
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	deff      	udf	#255	; 0xff
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	6988      	ldr	r0, [r1, #24]
 8006b04:	6896      	ldr	r6, [r2, #8]
 8006b06:	ed93 7a00 	vldr	s14, [r3]
 8006b0a:	6882      	ldr	r2, [r0, #8]
 8006b0c:	b184      	cbz	r4, 8006b30 <forward_relu+0x88>
 8006b0e:	68cf      	ldr	r7, [r1, #12]
 8006b10:	462b      	mov	r3, r5
 8006b12:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8006b16:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8006b1a:	42a7      	cmp	r7, r4
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	d1f9      	bne.n	8006b16 <forward_relu+0x6e>
 8006b22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b26:	3b01      	subs	r3, #1
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	18d2      	adds	r2, r2, r3
 8006b2c:	441e      	add	r6, r3
 8006b2e:	d23f      	bcs.n	8006bb0 <forward_relu+0x108>
 8006b30:	1d13      	adds	r3, r2, #4
 8006b32:	2500      	movs	r5, #0
 8006b34:	1d32      	adds	r2, r6, #4
 8006b36:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b42:	f1a3 0104 	sub.w	r1, r3, #4
 8006b46:	d835      	bhi.n	8006bb4 <forward_relu+0x10c>
 8006b48:	ed62 7a01 	vstmdb	r2!, {s15}
 8006b4c:	6884      	ldr	r4, [r0, #8]
 8006b4e:	3b08      	subs	r3, #8
 8006b50:	429c      	cmp	r4, r3
 8006b52:	d82d      	bhi.n	8006bb0 <forward_relu+0x108>
 8006b54:	460b      	mov	r3, r1
 8006b56:	e7ee      	b.n	8006b36 <forward_relu+0x8e>
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	698d      	ldr	r5, [r1, #24]
 8006b5c:	6898      	ldr	r0, [r3, #8]
 8006b5e:	68ab      	ldr	r3, [r5, #8]
 8006b60:	b184      	cbz	r4, 8006b84 <forward_relu+0xdc>
 8006b62:	68ce      	ldr	r6, [r1, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006b6a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8006b6e:	42a6      	cmp	r6, r4
 8006b70:	fb01 f202 	mul.w	r2, r1, r2
 8006b74:	d1f9      	bne.n	8006b6a <forward_relu+0xc2>
 8006b76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006b7a:	3a01      	subs	r2, #1
 8006b7c:	0092      	lsls	r2, r2, #2
 8006b7e:	189b      	adds	r3, r3, r2
 8006b80:	4410      	add	r0, r2
 8006b82:	d215      	bcs.n	8006bb0 <forward_relu+0x108>
 8006b84:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006bc8 <forward_relu+0x120>
 8006b88:	3304      	adds	r3, #4
 8006b8a:	1d01      	adds	r1, r0, #4
 8006b8c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b98:	bfb8      	it	lt
 8006b9a:	eef0 7a47 	vmovlt.f32	s15, s14
 8006b9e:	ed61 7a01 	vstmdb	r1!, {s15}
 8006ba2:	68a8      	ldr	r0, [r5, #8]
 8006ba4:	f1a3 0208 	sub.w	r2, r3, #8
 8006ba8:	4290      	cmp	r0, r2
 8006baa:	f1a3 0304 	sub.w	r3, r3, #4
 8006bae:	d9ed      	bls.n	8006b8c <forward_relu+0xe4>
 8006bb0:	bcf0      	pop	{r4, r5, r6, r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006bb8:	6884      	ldr	r4, [r0, #8]
 8006bba:	3b08      	subs	r3, #8
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	d8f7      	bhi.n	8006bb0 <forward_relu+0x108>
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	e7b8      	b.n	8006b36 <forward_relu+0x8e>
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	e792      	b.n	8006aee <forward_relu+0x46>
 8006bc8:	00000000 	.word	0x00000000

08006bcc <forward_sm>:
 8006bcc:	6982      	ldr	r2, [r0, #24]
 8006bce:	8813      	ldrh	r3, [r2, #0]
 8006bd0:	b32b      	cbz	r3, 8006c1e <forward_sm+0x52>
 8006bd2:	6852      	ldr	r2, [r2, #4]
 8006bd4:	6851      	ldr	r1, [r2, #4]
 8006bd6:	b101      	cbz	r1, 8006bda <forward_sm+0xe>
 8006bd8:	6809      	ldr	r1, [r1, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d91c      	bls.n	8006c18 <forward_sm+0x4c>
 8006bde:	6913      	ldr	r3, [r2, #16]
 8006be0:	b1c3      	cbz	r3, 8006c14 <forward_sm+0x48>
 8006be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	688c      	ldr	r4, [r1, #8]
 8006be8:	68c3      	ldr	r3, [r0, #12]
 8006bea:	68ce      	ldr	r6, [r1, #12]
 8006bec:	685f      	ldr	r7, [r3, #4]
 8006bee:	6873      	ldr	r3, [r6, #4]
 8006bf0:	0a24      	lsrs	r4, r4, #8
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	d015      	beq.n	8006c22 <forward_sm+0x56>
 8006bf6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	fb05 f202 	mul.w	r2, r5, r2
 8006c06:	d1f9      	bne.n	8006bfc <forward_sm+0x30>
 8006c08:	e9cd 3700 	strd	r3, r7, [sp]
 8006c0c:	f7ff fe4e 	bl	80068ac <nl_func_sm_array_f32>
 8006c10:	b003      	add	sp, #12
 8006c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	deff      	udf	#255	; 0xff
 8006c18:	2300      	movs	r3, #0
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	deff      	udf	#255	; 0xff
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	deff      	udf	#255	; 0xff
 8006c22:	2201      	movs	r2, #1
 8006c24:	e9cd 3700 	strd	r3, r7, [sp]
 8006c28:	f7ff fe40 	bl	80068ac <nl_func_sm_array_f32>
 8006c2c:	b003      	add	sp, #12
 8006c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c30 <ai_check_custom_types>:
 8006c30:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <ai_check_custom_types+0x50>)
 8006c32:	b082      	sub	sp, #8
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	b118      	cbz	r0, 8006c42 <ai_check_custom_types+0x12>
 8006c3a:	7803      	ldrb	r3, [r0, #0]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d002      	beq.n	8006c46 <ai_check_custom_types+0x16>
 8006c40:	2000      	movs	r0, #0
 8006c42:	b002      	add	sp, #8
 8006c44:	4770      	bx	lr
 8006c46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <ai_check_custom_types+0x28>
 8006c4e:	2001      	movs	r0, #1
 8006c50:	f080 0001 	eor.w	r0, r0, #1
 8006c54:	b002      	add	sp, #8
 8006c56:	4770      	bx	lr
 8006c58:	7842      	ldrb	r2, [r0, #1]
 8006c5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	f100 0001 	add.w	r0, r0, #1
 8006c64:	d1f3      	bne.n	8006c4e <ai_check_custom_types+0x1e>
 8006c66:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006c6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d1ed      	bne.n	8006c4e <ai_check_custom_types+0x1e>
 8006c72:	7842      	ldrb	r2, [r0, #1]
 8006c74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d1e8      	bne.n	8006c4e <ai_check_custom_types+0x1e>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e7e7      	b.n	8006c50 <ai_check_custom_types+0x20>
 8006c80:	080088e0 	.word	0x080088e0

08006c84 <ai_layers_init_all>:
 8006c84:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006c86:	b17a      	cbz	r2, 8006ca8 <ai_layers_init_all+0x24>
 8006c88:	6913      	ldr	r3, [r2, #16]
 8006c8a:	60d0      	str	r0, [r2, #12]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	f04f 0201 	mov.w	r2, #1
 8006c92:	d009      	beq.n	8006ca8 <ai_layers_init_all+0x24>
 8006c94:	b143      	cbz	r3, 8006ca8 <ai_layers_init_all+0x24>
 8006c96:	6919      	ldr	r1, [r3, #16]
 8006c98:	60d8      	str	r0, [r3, #12]
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	f102 0201 	add.w	r2, r2, #1
 8006ca0:	d002      	beq.n	8006ca8 <ai_layers_init_all+0x24>
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f6      	bne.n	8006c96 <ai_layers_init_all+0x12>
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4770      	bx	lr

08006cac <ai_layers_post_init_all>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006cb0:	b18c      	cbz	r4, 8006cd6 <ai_layers_post_init_all+0x2a>
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	6863      	ldr	r3, [r4, #4]
 8006cb6:	f013 0f01 	tst.w	r3, #1
 8006cba:	4620      	mov	r0, r4
 8006cbc:	d003      	beq.n	8006cc6 <ai_layers_post_init_all+0x1a>
 8006cbe:	6a23      	ldr	r3, [r4, #32]
 8006cc0:	b10b      	cbz	r3, 8006cc6 <ai_layers_post_init_all+0x1a>
 8006cc2:	4798      	blx	r3
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	d002      	beq.n	8006cd2 <ai_layers_post_init_all+0x26>
 8006ccc:	461c      	mov	r4, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <ai_layers_post_init_all+0x8>
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
 8006cd6:	4625      	mov	r5, r4
 8006cd8:	e7fb      	b.n	8006cd2 <ai_layers_post_init_all+0x26>
 8006cda:	bf00      	nop

08006cdc <ai_layers_forward_all>:
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8006ce2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	2f00      	cmp	r7, #0
 8006ce8:	d02c      	beq.n	8006d44 <ai_layers_forward_all+0x68>
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	d03f      	beq.n	8006d6e <ai_layers_forward_all+0x92>
 8006cee:	6385      	str	r5, [r0, #56]	; 0x38
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	47b8      	blx	r7
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cfc:	46b0      	mov	r8, r6
 8006cfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d00:	2002      	movs	r0, #2
 8006d02:	47b8      	blx	r7
 8006d04:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006d06:	696b      	ldr	r3, [r5, #20]
 8006d08:	4628      	mov	r0, r5
 8006d0a:	4798      	blx	r3
 8006d0c:	692b      	ldr	r3, [r5, #16]
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	f04f 0003 	mov.w	r0, #3
 8006d14:	4619      	mov	r1, r3
 8006d16:	d009      	beq.n	8006d2c <ai_layers_forward_all+0x50>
 8006d18:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d1c:	47b8      	blx	r7
 8006d1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d20:	3601      	adds	r6, #1
 8006d22:	2900      	cmp	r1, #0
 8006d24:	d1eb      	bne.n	8006cfe <ai_layers_forward_all+0x22>
 8006d26:	4630      	mov	r0, r6
 8006d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8006d32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d34:	47b8      	blx	r7
 8006d36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d38:	3601      	adds	r6, #1
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	d1df      	bne.n	8006cfe <ai_layers_forward_all+0x22>
 8006d3e:	4630      	mov	r0, r6
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	b19d      	cbz	r5, 8006d6e <ai_layers_forward_all+0x92>
 8006d46:	6385      	str	r5, [r0, #56]	; 0x38
 8006d48:	463e      	mov	r6, r7
 8006d4a:	696b      	ldr	r3, [r5, #20]
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	4798      	blx	r3
 8006d50:	692b      	ldr	r3, [r5, #16]
 8006d52:	42ab      	cmp	r3, r5
 8006d54:	f106 0601 	add.w	r6, r6, #1
 8006d58:	d004      	beq.n	8006d64 <ai_layers_forward_all+0x88>
 8006d5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f3      	bne.n	8006d4a <ai_layers_forward_all+0x6e>
 8006d62:	e7e0      	b.n	8006d26 <ai_layers_forward_all+0x4a>
 8006d64:	2300      	movs	r3, #0
 8006d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d68:	4630      	mov	r0, r6
 8006d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d6e:	462e      	mov	r6, r5
 8006d70:	4630      	mov	r0, r6
 8006d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d76:	bf00      	nop

08006d78 <ai_version_get>:
 8006d78:	0212      	lsls	r2, r2, #8
 8006d7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006d7e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006d82:	4770      	bx	lr

08006d84 <ai_platform_version_get>:
 8006d84:	0e02      	lsrs	r2, r0, #24
 8006d86:	2300      	movs	r3, #0
 8006d88:	f362 0307 	bfi	r3, r2, #0, #8
 8006d8c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8006d90:	f362 230f 	bfi	r3, r2, #8, #8
 8006d94:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006d98:	f360 4317 	bfi	r3, r0, #16, #8
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8006da2:	b002      	add	sp, #8
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <get_tensor_byte_size>:
 8006da8:	6983      	ldr	r3, [r0, #24]
 8006daa:	68c1      	ldr	r1, [r0, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6940      	ldr	r0, [r0, #20]
 8006db0:	4a06      	ldr	r2, [pc, #24]	; (8006dcc <get_tensor_byte_size+0x24>)
 8006db2:	68c9      	ldr	r1, [r1, #12]
 8006db4:	68c0      	ldr	r0, [r0, #12]
 8006db6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006dba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dbe:	fb00 f001 	mul.w	r0, r0, r1
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	bf04      	itt	eq
 8006dc6:	3007      	addeq	r0, #7
 8006dc8:	08c0      	lsreq	r0, r0, #3
 8006dca:	4770      	bx	lr
 8006dcc:	000400c0 	.word	0x000400c0

08006dd0 <ai_array_to_buffer_fmt>:
 8006dd0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d036      	beq.n	8006e46 <ai_array_to_buffer_fmt+0x76>
 8006dd8:	4a21      	ldr	r2, [pc, #132]	; (8006e60 <ai_array_to_buffer_fmt+0x90>)
 8006dda:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00f      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006de2:	dd12      	ble.n	8006e0a <ai_array_to_buffer_fmt+0x3a>
 8006de4:	4a1f      	ldr	r2, [pc, #124]	; (8006e64 <ai_array_to_buffer_fmt+0x94>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00b      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006dea:	dd1e      	ble.n	8006e2a <ai_array_to_buffer_fmt+0x5a>
 8006dec:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <ai_array_to_buffer_fmt+0x98>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d007      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006df2:	dd30      	ble.n	8006e56 <ai_array_to_buffer_fmt+0x86>
 8006df4:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <ai_array_to_buffer_fmt+0x9c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d003      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006dfa:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d11f      	bne.n	8006e42 <ai_array_to_buffer_fmt+0x72>
 8006e02:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006e06:	4318      	orrs	r0, r3
 8006e08:	4770      	bx	lr
 8006e0a:	4a19      	ldr	r2, [pc, #100]	; (8006e70 <ai_array_to_buffer_fmt+0xa0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d0f8      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e10:	dd0b      	ble.n	8006e2a <ai_array_to_buffer_fmt+0x5a>
 8006e12:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <ai_array_to_buffer_fmt+0xa4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d0f4      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e18:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d0f0      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e20:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d10c      	bne.n	8006e42 <ai_array_to_buffer_fmt+0x72>
 8006e28:	e7eb      	b.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e2a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d0e7      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e32:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d0e3      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e3a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d0df      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	e7dd      	b.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <ai_array_to_buffer_fmt+0xa8>)
 8006e48:	4003      	ands	r3, r0
 8006e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e4e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006e52:	4318      	orrs	r0, r3
 8006e54:	4770      	bx	lr
 8006e56:	3a0f      	subs	r2, #15
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d0d2      	beq.n	8006e02 <ai_array_to_buffer_fmt+0x32>
 8006e5c:	e7f1      	b.n	8006e42 <ai_array_to_buffer_fmt+0x72>
 8006e5e:	bf00      	nop
 8006e60:	00060440 	.word	0x00060440
 8006e64:	00840447 	.word	0x00840447
 8006e68:	0084084f 	.word	0x0084084f
 8006e6c:	00841040 	.word	0x00841040
 8006e70:	00040447 	.word	0x00040447
 8006e74:	0004084f 	.word	0x0004084f
 8006e78:	00803fff 	.word	0x00803fff

08006e7c <ai_array_get_byte_size>:
 8006e7c:	b1c1      	cbz	r1, 8006eb0 <ai_array_get_byte_size+0x34>
 8006e7e:	11c3      	asrs	r3, r0, #7
 8006e80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e84:	fb01 f102 	mul.w	r1, r1, r2
 8006e88:	3107      	adds	r1, #7
 8006e8a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8006e8e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8006e92:	f021 0107 	bic.w	r1, r1, #7
 8006e96:	2804      	cmp	r0, #4
 8006e98:	fa21 f102 	lsr.w	r1, r1, r2
 8006e9c:	d00a      	beq.n	8006eb4 <ai_array_get_byte_size+0x38>
 8006e9e:	2808      	cmp	r0, #8
 8006ea0:	d103      	bne.n	8006eaa <ai_array_get_byte_size+0x2e>
 8006ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006eaa:	3107      	adds	r1, #7
 8006eac:	08c8      	lsrs	r0, r1, #3
 8006eae:	4770      	bx	lr
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	4770      	bx	lr
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8006ebc:	3107      	adds	r1, #7
 8006ebe:	08c8      	lsrs	r0, r1, #3
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop

08006ec4 <ai_array_get_data_byte_size>:
 8006ec4:	b161      	cbz	r1, 8006ee0 <ai_array_get_data_byte_size+0x1c>
 8006ec6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006eca:	fb01 f103 	mul.w	r1, r1, r3
 8006ece:	3107      	adds	r1, #7
 8006ed0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006ed4:	f021 0107 	bic.w	r1, r1, #7
 8006ed8:	40c1      	lsrs	r1, r0
 8006eda:	3107      	adds	r1, #7
 8006edc:	08c8      	lsrs	r0, r1, #3
 8006ede:	4770      	bx	lr
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4770      	bx	lr

08006ee4 <__errno>:
 8006ee4:	4b01      	ldr	r3, [pc, #4]	; (8006eec <__errno+0x8>)
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20000768 	.word	0x20000768

08006ef0 <__libc_init_array>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	4d0d      	ldr	r5, [pc, #52]	; (8006f28 <__libc_init_array+0x38>)
 8006ef4:	4c0d      	ldr	r4, [pc, #52]	; (8006f2c <__libc_init_array+0x3c>)
 8006ef6:	1b64      	subs	r4, r4, r5
 8006ef8:	10a4      	asrs	r4, r4, #2
 8006efa:	2600      	movs	r6, #0
 8006efc:	42a6      	cmp	r6, r4
 8006efe:	d109      	bne.n	8006f14 <__libc_init_array+0x24>
 8006f00:	4d0b      	ldr	r5, [pc, #44]	; (8006f30 <__libc_init_array+0x40>)
 8006f02:	4c0c      	ldr	r4, [pc, #48]	; (8006f34 <__libc_init_array+0x44>)
 8006f04:	f001 fc12 	bl	800872c <_init>
 8006f08:	1b64      	subs	r4, r4, r5
 8006f0a:	10a4      	asrs	r4, r4, #2
 8006f0c:	2600      	movs	r6, #0
 8006f0e:	42a6      	cmp	r6, r4
 8006f10:	d105      	bne.n	8006f1e <__libc_init_array+0x2e>
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f18:	4798      	blx	r3
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7ee      	b.n	8006efc <__libc_init_array+0xc>
 8006f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f22:	4798      	blx	r3
 8006f24:	3601      	adds	r6, #1
 8006f26:	e7f2      	b.n	8006f0e <__libc_init_array+0x1e>
 8006f28:	0800f65c 	.word	0x0800f65c
 8006f2c:	0800f65c 	.word	0x0800f65c
 8006f30:	0800f65c 	.word	0x0800f65c
 8006f34:	0800f660 	.word	0x0800f660

08006f38 <malloc>:
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <malloc+0xc>)
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f000 b869 	b.w	8007014 <_malloc_r>
 8006f42:	bf00      	nop
 8006f44:	20000768 	.word	0x20000768

08006f48 <memcpy>:
 8006f48:	440a      	add	r2, r1
 8006f4a:	4291      	cmp	r1, r2
 8006f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f50:	d100      	bne.n	8006f54 <memcpy+0xc>
 8006f52:	4770      	bx	lr
 8006f54:	b510      	push	{r4, lr}
 8006f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5e:	4291      	cmp	r1, r2
 8006f60:	d1f9      	bne.n	8006f56 <memcpy+0xe>
 8006f62:	bd10      	pop	{r4, pc}

08006f64 <memset>:
 8006f64:	4402      	add	r2, r0
 8006f66:	4603      	mov	r3, r0
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d100      	bne.n	8006f6e <memset+0xa>
 8006f6c:	4770      	bx	lr
 8006f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f72:	e7f9      	b.n	8006f68 <memset+0x4>

08006f74 <_free_r>:
 8006f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f76:	2900      	cmp	r1, #0
 8006f78:	d048      	beq.n	800700c <_free_r+0x98>
 8006f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7e:	9001      	str	r0, [sp, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f1a1 0404 	sub.w	r4, r1, #4
 8006f86:	bfb8      	it	lt
 8006f88:	18e4      	addlt	r4, r4, r3
 8006f8a:	f000 fcd7 	bl	800793c <__malloc_lock>
 8006f8e:	4a20      	ldr	r2, [pc, #128]	; (8007010 <_free_r+0x9c>)
 8006f90:	9801      	ldr	r0, [sp, #4]
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	4615      	mov	r5, r2
 8006f96:	b933      	cbnz	r3, 8006fa6 <_free_r+0x32>
 8006f98:	6063      	str	r3, [r4, #4]
 8006f9a:	6014      	str	r4, [r2, #0]
 8006f9c:	b003      	add	sp, #12
 8006f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fa2:	f000 bcd1 	b.w	8007948 <__malloc_unlock>
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	d90b      	bls.n	8006fc2 <_free_r+0x4e>
 8006faa:	6821      	ldr	r1, [r4, #0]
 8006fac:	1862      	adds	r2, r4, r1
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	bf04      	itt	eq
 8006fb2:	681a      	ldreq	r2, [r3, #0]
 8006fb4:	685b      	ldreq	r3, [r3, #4]
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	bf04      	itt	eq
 8006fba:	1852      	addeq	r2, r2, r1
 8006fbc:	6022      	streq	r2, [r4, #0]
 8006fbe:	602c      	str	r4, [r5, #0]
 8006fc0:	e7ec      	b.n	8006f9c <_free_r+0x28>
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	b10b      	cbz	r3, 8006fcc <_free_r+0x58>
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d9fa      	bls.n	8006fc2 <_free_r+0x4e>
 8006fcc:	6811      	ldr	r1, [r2, #0]
 8006fce:	1855      	adds	r5, r2, r1
 8006fd0:	42a5      	cmp	r5, r4
 8006fd2:	d10b      	bne.n	8006fec <_free_r+0x78>
 8006fd4:	6824      	ldr	r4, [r4, #0]
 8006fd6:	4421      	add	r1, r4
 8006fd8:	1854      	adds	r4, r2, r1
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	6011      	str	r1, [r2, #0]
 8006fde:	d1dd      	bne.n	8006f9c <_free_r+0x28>
 8006fe0:	681c      	ldr	r4, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	6053      	str	r3, [r2, #4]
 8006fe6:	4421      	add	r1, r4
 8006fe8:	6011      	str	r1, [r2, #0]
 8006fea:	e7d7      	b.n	8006f9c <_free_r+0x28>
 8006fec:	d902      	bls.n	8006ff4 <_free_r+0x80>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	6003      	str	r3, [r0, #0]
 8006ff2:	e7d3      	b.n	8006f9c <_free_r+0x28>
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	1961      	adds	r1, r4, r5
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	bf04      	itt	eq
 8006ffc:	6819      	ldreq	r1, [r3, #0]
 8006ffe:	685b      	ldreq	r3, [r3, #4]
 8007000:	6063      	str	r3, [r4, #4]
 8007002:	bf04      	itt	eq
 8007004:	1949      	addeq	r1, r1, r5
 8007006:	6021      	streq	r1, [r4, #0]
 8007008:	6054      	str	r4, [r2, #4]
 800700a:	e7c7      	b.n	8006f9c <_free_r+0x28>
 800700c:	b003      	add	sp, #12
 800700e:	bd30      	pop	{r4, r5, pc}
 8007010:	200008e8 	.word	0x200008e8

08007014 <_malloc_r>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	1ccd      	adds	r5, r1, #3
 8007018:	f025 0503 	bic.w	r5, r5, #3
 800701c:	3508      	adds	r5, #8
 800701e:	2d0c      	cmp	r5, #12
 8007020:	bf38      	it	cc
 8007022:	250c      	movcc	r5, #12
 8007024:	2d00      	cmp	r5, #0
 8007026:	4606      	mov	r6, r0
 8007028:	db01      	blt.n	800702e <_malloc_r+0x1a>
 800702a:	42a9      	cmp	r1, r5
 800702c:	d903      	bls.n	8007036 <_malloc_r+0x22>
 800702e:	230c      	movs	r3, #12
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	2000      	movs	r0, #0
 8007034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007036:	f000 fc81 	bl	800793c <__malloc_lock>
 800703a:	4921      	ldr	r1, [pc, #132]	; (80070c0 <_malloc_r+0xac>)
 800703c:	680a      	ldr	r2, [r1, #0]
 800703e:	4614      	mov	r4, r2
 8007040:	b99c      	cbnz	r4, 800706a <_malloc_r+0x56>
 8007042:	4f20      	ldr	r7, [pc, #128]	; (80070c4 <_malloc_r+0xb0>)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	b923      	cbnz	r3, 8007052 <_malloc_r+0x3e>
 8007048:	4621      	mov	r1, r4
 800704a:	4630      	mov	r0, r6
 800704c:	f000 f938 	bl	80072c0 <_sbrk_r>
 8007050:	6038      	str	r0, [r7, #0]
 8007052:	4629      	mov	r1, r5
 8007054:	4630      	mov	r0, r6
 8007056:	f000 f933 	bl	80072c0 <_sbrk_r>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	d123      	bne.n	80070a6 <_malloc_r+0x92>
 800705e:	230c      	movs	r3, #12
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	4630      	mov	r0, r6
 8007064:	f000 fc70 	bl	8007948 <__malloc_unlock>
 8007068:	e7e3      	b.n	8007032 <_malloc_r+0x1e>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	1b5b      	subs	r3, r3, r5
 800706e:	d417      	bmi.n	80070a0 <_malloc_r+0x8c>
 8007070:	2b0b      	cmp	r3, #11
 8007072:	d903      	bls.n	800707c <_malloc_r+0x68>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	441c      	add	r4, r3
 8007078:	6025      	str	r5, [r4, #0]
 800707a:	e004      	b.n	8007086 <_malloc_r+0x72>
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	42a2      	cmp	r2, r4
 8007080:	bf0c      	ite	eq
 8007082:	600b      	streq	r3, [r1, #0]
 8007084:	6053      	strne	r3, [r2, #4]
 8007086:	4630      	mov	r0, r6
 8007088:	f000 fc5e 	bl	8007948 <__malloc_unlock>
 800708c:	f104 000b 	add.w	r0, r4, #11
 8007090:	1d23      	adds	r3, r4, #4
 8007092:	f020 0007 	bic.w	r0, r0, #7
 8007096:	1ac2      	subs	r2, r0, r3
 8007098:	d0cc      	beq.n	8007034 <_malloc_r+0x20>
 800709a:	1a1b      	subs	r3, r3, r0
 800709c:	50a3      	str	r3, [r4, r2]
 800709e:	e7c9      	b.n	8007034 <_malloc_r+0x20>
 80070a0:	4622      	mov	r2, r4
 80070a2:	6864      	ldr	r4, [r4, #4]
 80070a4:	e7cc      	b.n	8007040 <_malloc_r+0x2c>
 80070a6:	1cc4      	adds	r4, r0, #3
 80070a8:	f024 0403 	bic.w	r4, r4, #3
 80070ac:	42a0      	cmp	r0, r4
 80070ae:	d0e3      	beq.n	8007078 <_malloc_r+0x64>
 80070b0:	1a21      	subs	r1, r4, r0
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 f904 	bl	80072c0 <_sbrk_r>
 80070b8:	3001      	adds	r0, #1
 80070ba:	d1dd      	bne.n	8007078 <_malloc_r+0x64>
 80070bc:	e7cf      	b.n	800705e <_malloc_r+0x4a>
 80070be:	bf00      	nop
 80070c0:	200008e8 	.word	0x200008e8
 80070c4:	200008ec 	.word	0x200008ec

080070c8 <iprintf>:
 80070c8:	b40f      	push	{r0, r1, r2, r3}
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <iprintf+0x2c>)
 80070cc:	b513      	push	{r0, r1, r4, lr}
 80070ce:	681c      	ldr	r4, [r3, #0]
 80070d0:	b124      	cbz	r4, 80070dc <iprintf+0x14>
 80070d2:	69a3      	ldr	r3, [r4, #24]
 80070d4:	b913      	cbnz	r3, 80070dc <iprintf+0x14>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fb1a 	bl	8007710 <__sinit>
 80070dc:	ab05      	add	r3, sp, #20
 80070de:	9a04      	ldr	r2, [sp, #16]
 80070e0:	68a1      	ldr	r1, [r4, #8]
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fde1 	bl	8007cac <_vfiprintf_r>
 80070ea:	b002      	add	sp, #8
 80070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr
 80070f4:	20000768 	.word	0x20000768

080070f8 <_puts_r>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	460e      	mov	r6, r1
 80070fc:	4605      	mov	r5, r0
 80070fe:	b118      	cbz	r0, 8007108 <_puts_r+0x10>
 8007100:	6983      	ldr	r3, [r0, #24]
 8007102:	b90b      	cbnz	r3, 8007108 <_puts_r+0x10>
 8007104:	f000 fb04 	bl	8007710 <__sinit>
 8007108:	69ab      	ldr	r3, [r5, #24]
 800710a:	68ac      	ldr	r4, [r5, #8]
 800710c:	b913      	cbnz	r3, 8007114 <_puts_r+0x1c>
 800710e:	4628      	mov	r0, r5
 8007110:	f000 fafe 	bl	8007710 <__sinit>
 8007114:	4b2c      	ldr	r3, [pc, #176]	; (80071c8 <_puts_r+0xd0>)
 8007116:	429c      	cmp	r4, r3
 8007118:	d120      	bne.n	800715c <_puts_r+0x64>
 800711a:	686c      	ldr	r4, [r5, #4]
 800711c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800711e:	07db      	lsls	r3, r3, #31
 8007120:	d405      	bmi.n	800712e <_puts_r+0x36>
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	0598      	lsls	r0, r3, #22
 8007126:	d402      	bmi.n	800712e <_puts_r+0x36>
 8007128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800712a:	f000 fba1 	bl	8007870 <__retarget_lock_acquire_recursive>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	0719      	lsls	r1, r3, #28
 8007132:	d51d      	bpl.n	8007170 <_puts_r+0x78>
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	b1db      	cbz	r3, 8007170 <_puts_r+0x78>
 8007138:	3e01      	subs	r6, #1
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007140:	3b01      	subs	r3, #1
 8007142:	60a3      	str	r3, [r4, #8]
 8007144:	bb39      	cbnz	r1, 8007196 <_puts_r+0x9e>
 8007146:	2b00      	cmp	r3, #0
 8007148:	da38      	bge.n	80071bc <_puts_r+0xc4>
 800714a:	4622      	mov	r2, r4
 800714c:	210a      	movs	r1, #10
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f8e6 	bl	8007320 <__swbuf_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d011      	beq.n	800717c <_puts_r+0x84>
 8007158:	250a      	movs	r5, #10
 800715a:	e011      	b.n	8007180 <_puts_r+0x88>
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <_puts_r+0xd4>)
 800715e:	429c      	cmp	r4, r3
 8007160:	d101      	bne.n	8007166 <_puts_r+0x6e>
 8007162:	68ac      	ldr	r4, [r5, #8]
 8007164:	e7da      	b.n	800711c <_puts_r+0x24>
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <_puts_r+0xd8>)
 8007168:	429c      	cmp	r4, r3
 800716a:	bf08      	it	eq
 800716c:	68ec      	ldreq	r4, [r5, #12]
 800716e:	e7d5      	b.n	800711c <_puts_r+0x24>
 8007170:	4621      	mov	r1, r4
 8007172:	4628      	mov	r0, r5
 8007174:	f000 f926 	bl	80073c4 <__swsetup_r>
 8007178:	2800      	cmp	r0, #0
 800717a:	d0dd      	beq.n	8007138 <_puts_r+0x40>
 800717c:	f04f 35ff 	mov.w	r5, #4294967295
 8007180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007182:	07da      	lsls	r2, r3, #31
 8007184:	d405      	bmi.n	8007192 <_puts_r+0x9a>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	059b      	lsls	r3, r3, #22
 800718a:	d402      	bmi.n	8007192 <_puts_r+0x9a>
 800718c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718e:	f000 fb70 	bl	8007872 <__retarget_lock_release_recursive>
 8007192:	4628      	mov	r0, r5
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	2b00      	cmp	r3, #0
 8007198:	da04      	bge.n	80071a4 <_puts_r+0xac>
 800719a:	69a2      	ldr	r2, [r4, #24]
 800719c:	429a      	cmp	r2, r3
 800719e:	dc06      	bgt.n	80071ae <_puts_r+0xb6>
 80071a0:	290a      	cmp	r1, #10
 80071a2:	d004      	beq.n	80071ae <_puts_r+0xb6>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	6022      	str	r2, [r4, #0]
 80071aa:	7019      	strb	r1, [r3, #0]
 80071ac:	e7c5      	b.n	800713a <_puts_r+0x42>
 80071ae:	4622      	mov	r2, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 f8b5 	bl	8007320 <__swbuf_r>
 80071b6:	3001      	adds	r0, #1
 80071b8:	d1bf      	bne.n	800713a <_puts_r+0x42>
 80071ba:	e7df      	b.n	800717c <_puts_r+0x84>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	250a      	movs	r5, #10
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	701d      	strb	r5, [r3, #0]
 80071c6:	e7db      	b.n	8007180 <_puts_r+0x88>
 80071c8:	0800f5c8 	.word	0x0800f5c8
 80071cc:	0800f5e8 	.word	0x0800f5e8
 80071d0:	0800f5a8 	.word	0x0800f5a8

080071d4 <puts>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <puts+0xc>)
 80071d6:	4601      	mov	r1, r0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7ff bf8d 	b.w	80070f8 <_puts_r>
 80071de:	bf00      	nop
 80071e0:	20000768 	.word	0x20000768

080071e4 <srand>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <srand+0x44>)
 80071e8:	681d      	ldr	r5, [r3, #0]
 80071ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80071ec:	4604      	mov	r4, r0
 80071ee:	b9b3      	cbnz	r3, 800721e <srand+0x3a>
 80071f0:	2018      	movs	r0, #24
 80071f2:	f7ff fea1 	bl	8006f38 <malloc>
 80071f6:	4602      	mov	r2, r0
 80071f8:	63a8      	str	r0, [r5, #56]	; 0x38
 80071fa:	b920      	cbnz	r0, 8007206 <srand+0x22>
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <srand+0x48>)
 80071fe:	480c      	ldr	r0, [pc, #48]	; (8007230 <srand+0x4c>)
 8007200:	2142      	movs	r1, #66	; 0x42
 8007202:	f000 f94d 	bl	80074a0 <__assert_func>
 8007206:	490b      	ldr	r1, [pc, #44]	; (8007234 <srand+0x50>)
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <srand+0x54>)
 800720a:	e9c0 1300 	strd	r1, r3, [r0]
 800720e:	4b0b      	ldr	r3, [pc, #44]	; (800723c <srand+0x58>)
 8007210:	6083      	str	r3, [r0, #8]
 8007212:	230b      	movs	r3, #11
 8007214:	8183      	strh	r3, [r0, #12]
 8007216:	2100      	movs	r1, #0
 8007218:	2001      	movs	r0, #1
 800721a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800721e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007220:	2200      	movs	r2, #0
 8007222:	611c      	str	r4, [r3, #16]
 8007224:	615a      	str	r2, [r3, #20]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20000768 	.word	0x20000768
 800722c:	0800f4f4 	.word	0x0800f4f4
 8007230:	0800f50b 	.word	0x0800f50b
 8007234:	abcd330e 	.word	0xabcd330e
 8007238:	e66d1234 	.word	0xe66d1234
 800723c:	0005deec 	.word	0x0005deec

08007240 <rand>:
 8007240:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <rand+0x60>)
 8007242:	b510      	push	{r4, lr}
 8007244:	681c      	ldr	r4, [r3, #0]
 8007246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007248:	b9b3      	cbnz	r3, 8007278 <rand+0x38>
 800724a:	2018      	movs	r0, #24
 800724c:	f7ff fe74 	bl	8006f38 <malloc>
 8007250:	63a0      	str	r0, [r4, #56]	; 0x38
 8007252:	b928      	cbnz	r0, 8007260 <rand+0x20>
 8007254:	4602      	mov	r2, r0
 8007256:	4b13      	ldr	r3, [pc, #76]	; (80072a4 <rand+0x64>)
 8007258:	4813      	ldr	r0, [pc, #76]	; (80072a8 <rand+0x68>)
 800725a:	214e      	movs	r1, #78	; 0x4e
 800725c:	f000 f920 	bl	80074a0 <__assert_func>
 8007260:	4a12      	ldr	r2, [pc, #72]	; (80072ac <rand+0x6c>)
 8007262:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <rand+0x70>)
 8007264:	e9c0 2300 	strd	r2, r3, [r0]
 8007268:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <rand+0x74>)
 800726a:	6083      	str	r3, [r0, #8]
 800726c:	230b      	movs	r3, #11
 800726e:	8183      	strh	r3, [r0, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	2300      	movs	r3, #0
 8007274:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007278:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800727a:	480f      	ldr	r0, [pc, #60]	; (80072b8 <rand+0x78>)
 800727c:	690a      	ldr	r2, [r1, #16]
 800727e:	694b      	ldr	r3, [r1, #20]
 8007280:	4c0e      	ldr	r4, [pc, #56]	; (80072bc <rand+0x7c>)
 8007282:	4350      	muls	r0, r2
 8007284:	fb04 0003 	mla	r0, r4, r3, r0
 8007288:	fba2 3404 	umull	r3, r4, r2, r4
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	4404      	add	r4, r0
 8007290:	f144 0000 	adc.w	r0, r4, #0
 8007294:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007298:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800729c:	bd10      	pop	{r4, pc}
 800729e:	bf00      	nop
 80072a0:	20000768 	.word	0x20000768
 80072a4:	0800f4f4 	.word	0x0800f4f4
 80072a8:	0800f50b 	.word	0x0800f50b
 80072ac:	abcd330e 	.word	0xabcd330e
 80072b0:	e66d1234 	.word	0xe66d1234
 80072b4:	0005deec 	.word	0x0005deec
 80072b8:	5851f42d 	.word	0x5851f42d
 80072bc:	4c957f2d 	.word	0x4c957f2d

080072c0 <_sbrk_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d06      	ldr	r5, [pc, #24]	; (80072dc <_sbrk_r+0x1c>)
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7fa fe8c 	bl	8001fe8 <_sbrk>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_sbrk_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_sbrk_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20000d34 	.word	0x20000d34

080072e0 <siprintf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b500      	push	{lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	ab1d      	add	r3, sp, #116	; 0x74
 80072e8:	9002      	str	r0, [sp, #8]
 80072ea:	9006      	str	r0, [sp, #24]
 80072ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072f0:	4809      	ldr	r0, [pc, #36]	; (8007318 <siprintf+0x38>)
 80072f2:	9107      	str	r1, [sp, #28]
 80072f4:	9104      	str	r1, [sp, #16]
 80072f6:	4909      	ldr	r1, [pc, #36]	; (800731c <siprintf+0x3c>)
 80072f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fc:	9105      	str	r1, [sp, #20]
 80072fe:	6800      	ldr	r0, [r0, #0]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	a902      	add	r1, sp, #8
 8007304:	f000 fba8 	bl	8007a58 <_svfiprintf_r>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	b01c      	add	sp, #112	; 0x70
 8007310:	f85d eb04 	ldr.w	lr, [sp], #4
 8007314:	b003      	add	sp, #12
 8007316:	4770      	bx	lr
 8007318:	20000768 	.word	0x20000768
 800731c:	ffff0208 	.word	0xffff0208

08007320 <__swbuf_r>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	460e      	mov	r6, r1
 8007324:	4614      	mov	r4, r2
 8007326:	4605      	mov	r5, r0
 8007328:	b118      	cbz	r0, 8007332 <__swbuf_r+0x12>
 800732a:	6983      	ldr	r3, [r0, #24]
 800732c:	b90b      	cbnz	r3, 8007332 <__swbuf_r+0x12>
 800732e:	f000 f9ef 	bl	8007710 <__sinit>
 8007332:	4b21      	ldr	r3, [pc, #132]	; (80073b8 <__swbuf_r+0x98>)
 8007334:	429c      	cmp	r4, r3
 8007336:	d12b      	bne.n	8007390 <__swbuf_r+0x70>
 8007338:	686c      	ldr	r4, [r5, #4]
 800733a:	69a3      	ldr	r3, [r4, #24]
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	071a      	lsls	r2, r3, #28
 8007342:	d52f      	bpl.n	80073a4 <__swbuf_r+0x84>
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	b36b      	cbz	r3, 80073a4 <__swbuf_r+0x84>
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	6820      	ldr	r0, [r4, #0]
 800734c:	1ac0      	subs	r0, r0, r3
 800734e:	6963      	ldr	r3, [r4, #20]
 8007350:	b2f6      	uxtb	r6, r6
 8007352:	4283      	cmp	r3, r0
 8007354:	4637      	mov	r7, r6
 8007356:	dc04      	bgt.n	8007362 <__swbuf_r+0x42>
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	f000 f944 	bl	80075e8 <_fflush_r>
 8007360:	bb30      	cbnz	r0, 80073b0 <__swbuf_r+0x90>
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	3b01      	subs	r3, #1
 8007366:	60a3      	str	r3, [r4, #8]
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	701e      	strb	r6, [r3, #0]
 8007370:	6963      	ldr	r3, [r4, #20]
 8007372:	3001      	adds	r0, #1
 8007374:	4283      	cmp	r3, r0
 8007376:	d004      	beq.n	8007382 <__swbuf_r+0x62>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	07db      	lsls	r3, r3, #31
 800737c:	d506      	bpl.n	800738c <__swbuf_r+0x6c>
 800737e:	2e0a      	cmp	r6, #10
 8007380:	d104      	bne.n	800738c <__swbuf_r+0x6c>
 8007382:	4621      	mov	r1, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f000 f92f 	bl	80075e8 <_fflush_r>
 800738a:	b988      	cbnz	r0, 80073b0 <__swbuf_r+0x90>
 800738c:	4638      	mov	r0, r7
 800738e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <__swbuf_r+0x9c>)
 8007392:	429c      	cmp	r4, r3
 8007394:	d101      	bne.n	800739a <__swbuf_r+0x7a>
 8007396:	68ac      	ldr	r4, [r5, #8]
 8007398:	e7cf      	b.n	800733a <__swbuf_r+0x1a>
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <__swbuf_r+0xa0>)
 800739c:	429c      	cmp	r4, r3
 800739e:	bf08      	it	eq
 80073a0:	68ec      	ldreq	r4, [r5, #12]
 80073a2:	e7ca      	b.n	800733a <__swbuf_r+0x1a>
 80073a4:	4621      	mov	r1, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 f80c 	bl	80073c4 <__swsetup_r>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d0cb      	beq.n	8007348 <__swbuf_r+0x28>
 80073b0:	f04f 37ff 	mov.w	r7, #4294967295
 80073b4:	e7ea      	b.n	800738c <__swbuf_r+0x6c>
 80073b6:	bf00      	nop
 80073b8:	0800f5c8 	.word	0x0800f5c8
 80073bc:	0800f5e8 	.word	0x0800f5e8
 80073c0:	0800f5a8 	.word	0x0800f5a8

080073c4 <__swsetup_r>:
 80073c4:	4b32      	ldr	r3, [pc, #200]	; (8007490 <__swsetup_r+0xcc>)
 80073c6:	b570      	push	{r4, r5, r6, lr}
 80073c8:	681d      	ldr	r5, [r3, #0]
 80073ca:	4606      	mov	r6, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	b125      	cbz	r5, 80073da <__swsetup_r+0x16>
 80073d0:	69ab      	ldr	r3, [r5, #24]
 80073d2:	b913      	cbnz	r3, 80073da <__swsetup_r+0x16>
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f99b 	bl	8007710 <__sinit>
 80073da:	4b2e      	ldr	r3, [pc, #184]	; (8007494 <__swsetup_r+0xd0>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	d10f      	bne.n	8007400 <__swsetup_r+0x3c>
 80073e0:	686c      	ldr	r4, [r5, #4]
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073e8:	0719      	lsls	r1, r3, #28
 80073ea:	d42c      	bmi.n	8007446 <__swsetup_r+0x82>
 80073ec:	06dd      	lsls	r5, r3, #27
 80073ee:	d411      	bmi.n	8007414 <__swsetup_r+0x50>
 80073f0:	2309      	movs	r3, #9
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e03e      	b.n	800747e <__swsetup_r+0xba>
 8007400:	4b25      	ldr	r3, [pc, #148]	; (8007498 <__swsetup_r+0xd4>)
 8007402:	429c      	cmp	r4, r3
 8007404:	d101      	bne.n	800740a <__swsetup_r+0x46>
 8007406:	68ac      	ldr	r4, [r5, #8]
 8007408:	e7eb      	b.n	80073e2 <__swsetup_r+0x1e>
 800740a:	4b24      	ldr	r3, [pc, #144]	; (800749c <__swsetup_r+0xd8>)
 800740c:	429c      	cmp	r4, r3
 800740e:	bf08      	it	eq
 8007410:	68ec      	ldreq	r4, [r5, #12]
 8007412:	e7e6      	b.n	80073e2 <__swsetup_r+0x1e>
 8007414:	0758      	lsls	r0, r3, #29
 8007416:	d512      	bpl.n	800743e <__swsetup_r+0x7a>
 8007418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800741a:	b141      	cbz	r1, 800742e <__swsetup_r+0x6a>
 800741c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007420:	4299      	cmp	r1, r3
 8007422:	d002      	beq.n	800742a <__swsetup_r+0x66>
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff fda5 	bl	8006f74 <_free_r>
 800742a:	2300      	movs	r3, #0
 800742c:	6363      	str	r3, [r4, #52]	; 0x34
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	2300      	movs	r3, #0
 8007438:	6063      	str	r3, [r4, #4]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f043 0308 	orr.w	r3, r3, #8
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	b94b      	cbnz	r3, 800745e <__swsetup_r+0x9a>
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007454:	d003      	beq.n	800745e <__swsetup_r+0x9a>
 8007456:	4621      	mov	r1, r4
 8007458:	4630      	mov	r0, r6
 800745a:	f000 fa2f 	bl	80078bc <__smakebuf_r>
 800745e:	89a0      	ldrh	r0, [r4, #12]
 8007460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007464:	f010 0301 	ands.w	r3, r0, #1
 8007468:	d00a      	beq.n	8007480 <__swsetup_r+0xbc>
 800746a:	2300      	movs	r3, #0
 800746c:	60a3      	str	r3, [r4, #8]
 800746e:	6963      	ldr	r3, [r4, #20]
 8007470:	425b      	negs	r3, r3
 8007472:	61a3      	str	r3, [r4, #24]
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	b943      	cbnz	r3, 800748a <__swsetup_r+0xc6>
 8007478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800747c:	d1ba      	bne.n	80073f4 <__swsetup_r+0x30>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	0781      	lsls	r1, r0, #30
 8007482:	bf58      	it	pl
 8007484:	6963      	ldrpl	r3, [r4, #20]
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	e7f4      	b.n	8007474 <__swsetup_r+0xb0>
 800748a:	2000      	movs	r0, #0
 800748c:	e7f7      	b.n	800747e <__swsetup_r+0xba>
 800748e:	bf00      	nop
 8007490:	20000768 	.word	0x20000768
 8007494:	0800f5c8 	.word	0x0800f5c8
 8007498:	0800f5e8 	.word	0x0800f5e8
 800749c:	0800f5a8 	.word	0x0800f5a8

080074a0 <__assert_func>:
 80074a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074a2:	4614      	mov	r4, r2
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <__assert_func+0x2c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4605      	mov	r5, r0
 80074ac:	68d8      	ldr	r0, [r3, #12]
 80074ae:	b14c      	cbz	r4, 80074c4 <__assert_func+0x24>
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <__assert_func+0x30>)
 80074b2:	9100      	str	r1, [sp, #0]
 80074b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074b8:	4906      	ldr	r1, [pc, #24]	; (80074d4 <__assert_func+0x34>)
 80074ba:	462b      	mov	r3, r5
 80074bc:	f000 f9a6 	bl	800780c <fiprintf>
 80074c0:	f000 ff0e 	bl	80082e0 <abort>
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <__assert_func+0x38>)
 80074c6:	461c      	mov	r4, r3
 80074c8:	e7f3      	b.n	80074b2 <__assert_func+0x12>
 80074ca:	bf00      	nop
 80074cc:	20000768 	.word	0x20000768
 80074d0:	0800f56a 	.word	0x0800f56a
 80074d4:	0800f577 	.word	0x0800f577
 80074d8:	0800f5a5 	.word	0x0800f5a5

080074dc <__sflush_r>:
 80074dc:	898a      	ldrh	r2, [r1, #12]
 80074de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	4605      	mov	r5, r0
 80074e4:	0710      	lsls	r0, r2, #28
 80074e6:	460c      	mov	r4, r1
 80074e8:	d458      	bmi.n	800759c <__sflush_r+0xc0>
 80074ea:	684b      	ldr	r3, [r1, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dc05      	bgt.n	80074fc <__sflush_r+0x20>
 80074f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dc02      	bgt.n	80074fc <__sflush_r+0x20>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074fe:	2e00      	cmp	r6, #0
 8007500:	d0f9      	beq.n	80074f6 <__sflush_r+0x1a>
 8007502:	2300      	movs	r3, #0
 8007504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007508:	682f      	ldr	r7, [r5, #0]
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	d032      	beq.n	8007574 <__sflush_r+0x98>
 800750e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	075a      	lsls	r2, r3, #29
 8007514:	d505      	bpl.n	8007522 <__sflush_r+0x46>
 8007516:	6863      	ldr	r3, [r4, #4]
 8007518:	1ac0      	subs	r0, r0, r3
 800751a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800751c:	b10b      	cbz	r3, 8007522 <__sflush_r+0x46>
 800751e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007520:	1ac0      	subs	r0, r0, r3
 8007522:	2300      	movs	r3, #0
 8007524:	4602      	mov	r2, r0
 8007526:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007528:	6a21      	ldr	r1, [r4, #32]
 800752a:	4628      	mov	r0, r5
 800752c:	47b0      	blx	r6
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	d106      	bne.n	8007542 <__sflush_r+0x66>
 8007534:	6829      	ldr	r1, [r5, #0]
 8007536:	291d      	cmp	r1, #29
 8007538:	d82c      	bhi.n	8007594 <__sflush_r+0xb8>
 800753a:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <__sflush_r+0x108>)
 800753c:	40ca      	lsrs	r2, r1
 800753e:	07d6      	lsls	r6, r2, #31
 8007540:	d528      	bpl.n	8007594 <__sflush_r+0xb8>
 8007542:	2200      	movs	r2, #0
 8007544:	6062      	str	r2, [r4, #4]
 8007546:	04d9      	lsls	r1, r3, #19
 8007548:	6922      	ldr	r2, [r4, #16]
 800754a:	6022      	str	r2, [r4, #0]
 800754c:	d504      	bpl.n	8007558 <__sflush_r+0x7c>
 800754e:	1c42      	adds	r2, r0, #1
 8007550:	d101      	bne.n	8007556 <__sflush_r+0x7a>
 8007552:	682b      	ldr	r3, [r5, #0]
 8007554:	b903      	cbnz	r3, 8007558 <__sflush_r+0x7c>
 8007556:	6560      	str	r0, [r4, #84]	; 0x54
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	602f      	str	r7, [r5, #0]
 800755c:	2900      	cmp	r1, #0
 800755e:	d0ca      	beq.n	80074f6 <__sflush_r+0x1a>
 8007560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <__sflush_r+0x92>
 8007568:	4628      	mov	r0, r5
 800756a:	f7ff fd03 	bl	8006f74 <_free_r>
 800756e:	2000      	movs	r0, #0
 8007570:	6360      	str	r0, [r4, #52]	; 0x34
 8007572:	e7c1      	b.n	80074f8 <__sflush_r+0x1c>
 8007574:	6a21      	ldr	r1, [r4, #32]
 8007576:	2301      	movs	r3, #1
 8007578:	4628      	mov	r0, r5
 800757a:	47b0      	blx	r6
 800757c:	1c41      	adds	r1, r0, #1
 800757e:	d1c7      	bne.n	8007510 <__sflush_r+0x34>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0c4      	beq.n	8007510 <__sflush_r+0x34>
 8007586:	2b1d      	cmp	r3, #29
 8007588:	d001      	beq.n	800758e <__sflush_r+0xb2>
 800758a:	2b16      	cmp	r3, #22
 800758c:	d101      	bne.n	8007592 <__sflush_r+0xb6>
 800758e:	602f      	str	r7, [r5, #0]
 8007590:	e7b1      	b.n	80074f6 <__sflush_r+0x1a>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	e7ad      	b.n	80074f8 <__sflush_r+0x1c>
 800759c:	690f      	ldr	r7, [r1, #16]
 800759e:	2f00      	cmp	r7, #0
 80075a0:	d0a9      	beq.n	80074f6 <__sflush_r+0x1a>
 80075a2:	0793      	lsls	r3, r2, #30
 80075a4:	680e      	ldr	r6, [r1, #0]
 80075a6:	bf08      	it	eq
 80075a8:	694b      	ldreq	r3, [r1, #20]
 80075aa:	600f      	str	r7, [r1, #0]
 80075ac:	bf18      	it	ne
 80075ae:	2300      	movne	r3, #0
 80075b0:	eba6 0807 	sub.w	r8, r6, r7
 80075b4:	608b      	str	r3, [r1, #8]
 80075b6:	f1b8 0f00 	cmp.w	r8, #0
 80075ba:	dd9c      	ble.n	80074f6 <__sflush_r+0x1a>
 80075bc:	6a21      	ldr	r1, [r4, #32]
 80075be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075c0:	4643      	mov	r3, r8
 80075c2:	463a      	mov	r2, r7
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b0      	blx	r6
 80075c8:	2800      	cmp	r0, #0
 80075ca:	dc06      	bgt.n	80075da <__sflush_r+0xfe>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	e78e      	b.n	80074f8 <__sflush_r+0x1c>
 80075da:	4407      	add	r7, r0
 80075dc:	eba8 0800 	sub.w	r8, r8, r0
 80075e0:	e7e9      	b.n	80075b6 <__sflush_r+0xda>
 80075e2:	bf00      	nop
 80075e4:	20400001 	.word	0x20400001

080075e8 <_fflush_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	690b      	ldr	r3, [r1, #16]
 80075ec:	4605      	mov	r5, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	b913      	cbnz	r3, 80075f8 <_fflush_r+0x10>
 80075f2:	2500      	movs	r5, #0
 80075f4:	4628      	mov	r0, r5
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	b118      	cbz	r0, 8007602 <_fflush_r+0x1a>
 80075fa:	6983      	ldr	r3, [r0, #24]
 80075fc:	b90b      	cbnz	r3, 8007602 <_fflush_r+0x1a>
 80075fe:	f000 f887 	bl	8007710 <__sinit>
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <_fflush_r+0x6c>)
 8007604:	429c      	cmp	r4, r3
 8007606:	d11b      	bne.n	8007640 <_fflush_r+0x58>
 8007608:	686c      	ldr	r4, [r5, #4]
 800760a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0ef      	beq.n	80075f2 <_fflush_r+0xa>
 8007612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007614:	07d0      	lsls	r0, r2, #31
 8007616:	d404      	bmi.n	8007622 <_fflush_r+0x3a>
 8007618:	0599      	lsls	r1, r3, #22
 800761a:	d402      	bmi.n	8007622 <_fflush_r+0x3a>
 800761c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800761e:	f000 f927 	bl	8007870 <__retarget_lock_acquire_recursive>
 8007622:	4628      	mov	r0, r5
 8007624:	4621      	mov	r1, r4
 8007626:	f7ff ff59 	bl	80074dc <__sflush_r>
 800762a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800762c:	07da      	lsls	r2, r3, #31
 800762e:	4605      	mov	r5, r0
 8007630:	d4e0      	bmi.n	80075f4 <_fflush_r+0xc>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	059b      	lsls	r3, r3, #22
 8007636:	d4dd      	bmi.n	80075f4 <_fflush_r+0xc>
 8007638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800763a:	f000 f91a 	bl	8007872 <__retarget_lock_release_recursive>
 800763e:	e7d9      	b.n	80075f4 <_fflush_r+0xc>
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <_fflush_r+0x70>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d101      	bne.n	800764a <_fflush_r+0x62>
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	e7df      	b.n	800760a <_fflush_r+0x22>
 800764a:	4b04      	ldr	r3, [pc, #16]	; (800765c <_fflush_r+0x74>)
 800764c:	429c      	cmp	r4, r3
 800764e:	bf08      	it	eq
 8007650:	68ec      	ldreq	r4, [r5, #12]
 8007652:	e7da      	b.n	800760a <_fflush_r+0x22>
 8007654:	0800f5c8 	.word	0x0800f5c8
 8007658:	0800f5e8 	.word	0x0800f5e8
 800765c:	0800f5a8 	.word	0x0800f5a8

08007660 <std>:
 8007660:	2300      	movs	r3, #0
 8007662:	b510      	push	{r4, lr}
 8007664:	4604      	mov	r4, r0
 8007666:	e9c0 3300 	strd	r3, r3, [r0]
 800766a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800766e:	6083      	str	r3, [r0, #8]
 8007670:	8181      	strh	r1, [r0, #12]
 8007672:	6643      	str	r3, [r0, #100]	; 0x64
 8007674:	81c2      	strh	r2, [r0, #14]
 8007676:	6183      	str	r3, [r0, #24]
 8007678:	4619      	mov	r1, r3
 800767a:	2208      	movs	r2, #8
 800767c:	305c      	adds	r0, #92	; 0x5c
 800767e:	f7ff fc71 	bl	8006f64 <memset>
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <std+0x38>)
 8007684:	6263      	str	r3, [r4, #36]	; 0x24
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <std+0x3c>)
 8007688:	62a3      	str	r3, [r4, #40]	; 0x28
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <std+0x40>)
 800768c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <std+0x44>)
 8007690:	6224      	str	r4, [r4, #32]
 8007692:	6323      	str	r3, [r4, #48]	; 0x30
 8007694:	bd10      	pop	{r4, pc}
 8007696:	bf00      	nop
 8007698:	08008235 	.word	0x08008235
 800769c:	08008257 	.word	0x08008257
 80076a0:	0800828f 	.word	0x0800828f
 80076a4:	080082b3 	.word	0x080082b3

080076a8 <_cleanup_r>:
 80076a8:	4901      	ldr	r1, [pc, #4]	; (80076b0 <_cleanup_r+0x8>)
 80076aa:	f000 b8c1 	b.w	8007830 <_fwalk_reent>
 80076ae:	bf00      	nop
 80076b0:	080075e9 	.word	0x080075e9

080076b4 <__sfmoreglue>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	1e4a      	subs	r2, r1, #1
 80076b8:	2568      	movs	r5, #104	; 0x68
 80076ba:	4355      	muls	r5, r2
 80076bc:	460e      	mov	r6, r1
 80076be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076c2:	f7ff fca7 	bl	8007014 <_malloc_r>
 80076c6:	4604      	mov	r4, r0
 80076c8:	b140      	cbz	r0, 80076dc <__sfmoreglue+0x28>
 80076ca:	2100      	movs	r1, #0
 80076cc:	e9c0 1600 	strd	r1, r6, [r0]
 80076d0:	300c      	adds	r0, #12
 80076d2:	60a0      	str	r0, [r4, #8]
 80076d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076d8:	f7ff fc44 	bl	8006f64 <memset>
 80076dc:	4620      	mov	r0, r4
 80076de:	bd70      	pop	{r4, r5, r6, pc}

080076e0 <__sfp_lock_acquire>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__sfp_lock_acquire+0x8>)
 80076e2:	f000 b8c5 	b.w	8007870 <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	20000d30 	.word	0x20000d30

080076ec <__sfp_lock_release>:
 80076ec:	4801      	ldr	r0, [pc, #4]	; (80076f4 <__sfp_lock_release+0x8>)
 80076ee:	f000 b8c0 	b.w	8007872 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	20000d30 	.word	0x20000d30

080076f8 <__sinit_lock_acquire>:
 80076f8:	4801      	ldr	r0, [pc, #4]	; (8007700 <__sinit_lock_acquire+0x8>)
 80076fa:	f000 b8b9 	b.w	8007870 <__retarget_lock_acquire_recursive>
 80076fe:	bf00      	nop
 8007700:	20000d2b 	.word	0x20000d2b

08007704 <__sinit_lock_release>:
 8007704:	4801      	ldr	r0, [pc, #4]	; (800770c <__sinit_lock_release+0x8>)
 8007706:	f000 b8b4 	b.w	8007872 <__retarget_lock_release_recursive>
 800770a:	bf00      	nop
 800770c:	20000d2b 	.word	0x20000d2b

08007710 <__sinit>:
 8007710:	b510      	push	{r4, lr}
 8007712:	4604      	mov	r4, r0
 8007714:	f7ff fff0 	bl	80076f8 <__sinit_lock_acquire>
 8007718:	69a3      	ldr	r3, [r4, #24]
 800771a:	b11b      	cbz	r3, 8007724 <__sinit+0x14>
 800771c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007720:	f7ff bff0 	b.w	8007704 <__sinit_lock_release>
 8007724:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007728:	6523      	str	r3, [r4, #80]	; 0x50
 800772a:	4b13      	ldr	r3, [pc, #76]	; (8007778 <__sinit+0x68>)
 800772c:	4a13      	ldr	r2, [pc, #76]	; (800777c <__sinit+0x6c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	62a2      	str	r2, [r4, #40]	; 0x28
 8007732:	42a3      	cmp	r3, r4
 8007734:	bf04      	itt	eq
 8007736:	2301      	moveq	r3, #1
 8007738:	61a3      	streq	r3, [r4, #24]
 800773a:	4620      	mov	r0, r4
 800773c:	f000 f820 	bl	8007780 <__sfp>
 8007740:	6060      	str	r0, [r4, #4]
 8007742:	4620      	mov	r0, r4
 8007744:	f000 f81c 	bl	8007780 <__sfp>
 8007748:	60a0      	str	r0, [r4, #8]
 800774a:	4620      	mov	r0, r4
 800774c:	f000 f818 	bl	8007780 <__sfp>
 8007750:	2200      	movs	r2, #0
 8007752:	60e0      	str	r0, [r4, #12]
 8007754:	2104      	movs	r1, #4
 8007756:	6860      	ldr	r0, [r4, #4]
 8007758:	f7ff ff82 	bl	8007660 <std>
 800775c:	68a0      	ldr	r0, [r4, #8]
 800775e:	2201      	movs	r2, #1
 8007760:	2109      	movs	r1, #9
 8007762:	f7ff ff7d 	bl	8007660 <std>
 8007766:	68e0      	ldr	r0, [r4, #12]
 8007768:	2202      	movs	r2, #2
 800776a:	2112      	movs	r1, #18
 800776c:	f7ff ff78 	bl	8007660 <std>
 8007770:	2301      	movs	r3, #1
 8007772:	61a3      	str	r3, [r4, #24]
 8007774:	e7d2      	b.n	800771c <__sinit+0xc>
 8007776:	bf00      	nop
 8007778:	0800f4f0 	.word	0x0800f4f0
 800777c:	080076a9 	.word	0x080076a9

08007780 <__sfp>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	4607      	mov	r7, r0
 8007784:	f7ff ffac 	bl	80076e0 <__sfp_lock_acquire>
 8007788:	4b1e      	ldr	r3, [pc, #120]	; (8007804 <__sfp+0x84>)
 800778a:	681e      	ldr	r6, [r3, #0]
 800778c:	69b3      	ldr	r3, [r6, #24]
 800778e:	b913      	cbnz	r3, 8007796 <__sfp+0x16>
 8007790:	4630      	mov	r0, r6
 8007792:	f7ff ffbd 	bl	8007710 <__sinit>
 8007796:	3648      	adds	r6, #72	; 0x48
 8007798:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800779c:	3b01      	subs	r3, #1
 800779e:	d503      	bpl.n	80077a8 <__sfp+0x28>
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	b30b      	cbz	r3, 80077e8 <__sfp+0x68>
 80077a4:	6836      	ldr	r6, [r6, #0]
 80077a6:	e7f7      	b.n	8007798 <__sfp+0x18>
 80077a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077ac:	b9d5      	cbnz	r5, 80077e4 <__sfp+0x64>
 80077ae:	4b16      	ldr	r3, [pc, #88]	; (8007808 <__sfp+0x88>)
 80077b0:	60e3      	str	r3, [r4, #12]
 80077b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077b6:	6665      	str	r5, [r4, #100]	; 0x64
 80077b8:	f000 f859 	bl	800786e <__retarget_lock_init_recursive>
 80077bc:	f7ff ff96 	bl	80076ec <__sfp_lock_release>
 80077c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077c8:	6025      	str	r5, [r4, #0]
 80077ca:	61a5      	str	r5, [r4, #24]
 80077cc:	2208      	movs	r2, #8
 80077ce:	4629      	mov	r1, r5
 80077d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077d4:	f7ff fbc6 	bl	8006f64 <memset>
 80077d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077e0:	4620      	mov	r0, r4
 80077e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e4:	3468      	adds	r4, #104	; 0x68
 80077e6:	e7d9      	b.n	800779c <__sfp+0x1c>
 80077e8:	2104      	movs	r1, #4
 80077ea:	4638      	mov	r0, r7
 80077ec:	f7ff ff62 	bl	80076b4 <__sfmoreglue>
 80077f0:	4604      	mov	r4, r0
 80077f2:	6030      	str	r0, [r6, #0]
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d1d5      	bne.n	80077a4 <__sfp+0x24>
 80077f8:	f7ff ff78 	bl	80076ec <__sfp_lock_release>
 80077fc:	230c      	movs	r3, #12
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	e7ee      	b.n	80077e0 <__sfp+0x60>
 8007802:	bf00      	nop
 8007804:	0800f4f0 	.word	0x0800f4f0
 8007808:	ffff0001 	.word	0xffff0001

0800780c <fiprintf>:
 800780c:	b40e      	push	{r1, r2, r3}
 800780e:	b503      	push	{r0, r1, lr}
 8007810:	4601      	mov	r1, r0
 8007812:	ab03      	add	r3, sp, #12
 8007814:	4805      	ldr	r0, [pc, #20]	; (800782c <fiprintf+0x20>)
 8007816:	f853 2b04 	ldr.w	r2, [r3], #4
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f000 fa45 	bl	8007cac <_vfiprintf_r>
 8007822:	b002      	add	sp, #8
 8007824:	f85d eb04 	ldr.w	lr, [sp], #4
 8007828:	b003      	add	sp, #12
 800782a:	4770      	bx	lr
 800782c:	20000768 	.word	0x20000768

08007830 <_fwalk_reent>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4606      	mov	r6, r0
 8007836:	4688      	mov	r8, r1
 8007838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800783c:	2700      	movs	r7, #0
 800783e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007842:	f1b9 0901 	subs.w	r9, r9, #1
 8007846:	d505      	bpl.n	8007854 <_fwalk_reent+0x24>
 8007848:	6824      	ldr	r4, [r4, #0]
 800784a:	2c00      	cmp	r4, #0
 800784c:	d1f7      	bne.n	800783e <_fwalk_reent+0xe>
 800784e:	4638      	mov	r0, r7
 8007850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007854:	89ab      	ldrh	r3, [r5, #12]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d907      	bls.n	800786a <_fwalk_reent+0x3a>
 800785a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800785e:	3301      	adds	r3, #1
 8007860:	d003      	beq.n	800786a <_fwalk_reent+0x3a>
 8007862:	4629      	mov	r1, r5
 8007864:	4630      	mov	r0, r6
 8007866:	47c0      	blx	r8
 8007868:	4307      	orrs	r7, r0
 800786a:	3568      	adds	r5, #104	; 0x68
 800786c:	e7e9      	b.n	8007842 <_fwalk_reent+0x12>

0800786e <__retarget_lock_init_recursive>:
 800786e:	4770      	bx	lr

08007870 <__retarget_lock_acquire_recursive>:
 8007870:	4770      	bx	lr

08007872 <__retarget_lock_release_recursive>:
 8007872:	4770      	bx	lr

08007874 <__swhatbuf_r>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	460e      	mov	r6, r1
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	2900      	cmp	r1, #0
 800787e:	b096      	sub	sp, #88	; 0x58
 8007880:	4614      	mov	r4, r2
 8007882:	461d      	mov	r5, r3
 8007884:	da07      	bge.n	8007896 <__swhatbuf_r+0x22>
 8007886:	2300      	movs	r3, #0
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	89b3      	ldrh	r3, [r6, #12]
 800788c:	061a      	lsls	r2, r3, #24
 800788e:	d410      	bmi.n	80078b2 <__swhatbuf_r+0x3e>
 8007890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007894:	e00e      	b.n	80078b4 <__swhatbuf_r+0x40>
 8007896:	466a      	mov	r2, sp
 8007898:	f000 fd3a 	bl	8008310 <_fstat_r>
 800789c:	2800      	cmp	r0, #0
 800789e:	dbf2      	blt.n	8007886 <__swhatbuf_r+0x12>
 80078a0:	9a01      	ldr	r2, [sp, #4]
 80078a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078aa:	425a      	negs	r2, r3
 80078ac:	415a      	adcs	r2, r3
 80078ae:	602a      	str	r2, [r5, #0]
 80078b0:	e7ee      	b.n	8007890 <__swhatbuf_r+0x1c>
 80078b2:	2340      	movs	r3, #64	; 0x40
 80078b4:	2000      	movs	r0, #0
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	b016      	add	sp, #88	; 0x58
 80078ba:	bd70      	pop	{r4, r5, r6, pc}

080078bc <__smakebuf_r>:
 80078bc:	898b      	ldrh	r3, [r1, #12]
 80078be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078c0:	079d      	lsls	r5, r3, #30
 80078c2:	4606      	mov	r6, r0
 80078c4:	460c      	mov	r4, r1
 80078c6:	d507      	bpl.n	80078d8 <__smakebuf_r+0x1c>
 80078c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	6123      	str	r3, [r4, #16]
 80078d0:	2301      	movs	r3, #1
 80078d2:	6163      	str	r3, [r4, #20]
 80078d4:	b002      	add	sp, #8
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	ab01      	add	r3, sp, #4
 80078da:	466a      	mov	r2, sp
 80078dc:	f7ff ffca 	bl	8007874 <__swhatbuf_r>
 80078e0:	9900      	ldr	r1, [sp, #0]
 80078e2:	4605      	mov	r5, r0
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff fb95 	bl	8007014 <_malloc_r>
 80078ea:	b948      	cbnz	r0, 8007900 <__smakebuf_r+0x44>
 80078ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f0:	059a      	lsls	r2, r3, #22
 80078f2:	d4ef      	bmi.n	80078d4 <__smakebuf_r+0x18>
 80078f4:	f023 0303 	bic.w	r3, r3, #3
 80078f8:	f043 0302 	orr.w	r3, r3, #2
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	e7e3      	b.n	80078c8 <__smakebuf_r+0xc>
 8007900:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <__smakebuf_r+0x7c>)
 8007902:	62b3      	str	r3, [r6, #40]	; 0x28
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	6020      	str	r0, [r4, #0]
 8007908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	9b00      	ldr	r3, [sp, #0]
 8007910:	6163      	str	r3, [r4, #20]
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	6120      	str	r0, [r4, #16]
 8007916:	b15b      	cbz	r3, 8007930 <__smakebuf_r+0x74>
 8007918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800791c:	4630      	mov	r0, r6
 800791e:	f000 fd09 	bl	8008334 <_isatty_r>
 8007922:	b128      	cbz	r0, 8007930 <__smakebuf_r+0x74>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	89a0      	ldrh	r0, [r4, #12]
 8007932:	4305      	orrs	r5, r0
 8007934:	81a5      	strh	r5, [r4, #12]
 8007936:	e7cd      	b.n	80078d4 <__smakebuf_r+0x18>
 8007938:	080076a9 	.word	0x080076a9

0800793c <__malloc_lock>:
 800793c:	4801      	ldr	r0, [pc, #4]	; (8007944 <__malloc_lock+0x8>)
 800793e:	f7ff bf97 	b.w	8007870 <__retarget_lock_acquire_recursive>
 8007942:	bf00      	nop
 8007944:	20000d2c 	.word	0x20000d2c

08007948 <__malloc_unlock>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__malloc_unlock+0x8>)
 800794a:	f7ff bf92 	b.w	8007872 <__retarget_lock_release_recursive>
 800794e:	bf00      	nop
 8007950:	20000d2c 	.word	0x20000d2c

08007954 <_realloc_r>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	4607      	mov	r7, r0
 8007958:	4614      	mov	r4, r2
 800795a:	460e      	mov	r6, r1
 800795c:	b921      	cbnz	r1, 8007968 <_realloc_r+0x14>
 800795e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007962:	4611      	mov	r1, r2
 8007964:	f7ff bb56 	b.w	8007014 <_malloc_r>
 8007968:	b922      	cbnz	r2, 8007974 <_realloc_r+0x20>
 800796a:	f7ff fb03 	bl	8006f74 <_free_r>
 800796e:	4625      	mov	r5, r4
 8007970:	4628      	mov	r0, r5
 8007972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007974:	f000 fd1a 	bl	80083ac <_malloc_usable_size_r>
 8007978:	42a0      	cmp	r0, r4
 800797a:	d20f      	bcs.n	800799c <_realloc_r+0x48>
 800797c:	4621      	mov	r1, r4
 800797e:	4638      	mov	r0, r7
 8007980:	f7ff fb48 	bl	8007014 <_malloc_r>
 8007984:	4605      	mov	r5, r0
 8007986:	2800      	cmp	r0, #0
 8007988:	d0f2      	beq.n	8007970 <_realloc_r+0x1c>
 800798a:	4631      	mov	r1, r6
 800798c:	4622      	mov	r2, r4
 800798e:	f7ff fadb 	bl	8006f48 <memcpy>
 8007992:	4631      	mov	r1, r6
 8007994:	4638      	mov	r0, r7
 8007996:	f7ff faed 	bl	8006f74 <_free_r>
 800799a:	e7e9      	b.n	8007970 <_realloc_r+0x1c>
 800799c:	4635      	mov	r5, r6
 800799e:	e7e7      	b.n	8007970 <_realloc_r+0x1c>

080079a0 <__ssputs_r>:
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	688e      	ldr	r6, [r1, #8]
 80079a6:	429e      	cmp	r6, r3
 80079a8:	4682      	mov	sl, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	4690      	mov	r8, r2
 80079ae:	461f      	mov	r7, r3
 80079b0:	d838      	bhi.n	8007a24 <__ssputs_r+0x84>
 80079b2:	898a      	ldrh	r2, [r1, #12]
 80079b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079b8:	d032      	beq.n	8007a20 <__ssputs_r+0x80>
 80079ba:	6825      	ldr	r5, [r4, #0]
 80079bc:	6909      	ldr	r1, [r1, #16]
 80079be:	eba5 0901 	sub.w	r9, r5, r1
 80079c2:	6965      	ldr	r5, [r4, #20]
 80079c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079cc:	3301      	adds	r3, #1
 80079ce:	444b      	add	r3, r9
 80079d0:	106d      	asrs	r5, r5, #1
 80079d2:	429d      	cmp	r5, r3
 80079d4:	bf38      	it	cc
 80079d6:	461d      	movcc	r5, r3
 80079d8:	0553      	lsls	r3, r2, #21
 80079da:	d531      	bpl.n	8007a40 <__ssputs_r+0xa0>
 80079dc:	4629      	mov	r1, r5
 80079de:	f7ff fb19 	bl	8007014 <_malloc_r>
 80079e2:	4606      	mov	r6, r0
 80079e4:	b950      	cbnz	r0, 80079fc <__ssputs_r+0x5c>
 80079e6:	230c      	movs	r3, #12
 80079e8:	f8ca 3000 	str.w	r3, [sl]
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fc:	6921      	ldr	r1, [r4, #16]
 80079fe:	464a      	mov	r2, r9
 8007a00:	f7ff faa2 	bl	8006f48 <memcpy>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	6126      	str	r6, [r4, #16]
 8007a12:	6165      	str	r5, [r4, #20]
 8007a14:	444e      	add	r6, r9
 8007a16:	eba5 0509 	sub.w	r5, r5, r9
 8007a1a:	6026      	str	r6, [r4, #0]
 8007a1c:	60a5      	str	r5, [r4, #8]
 8007a1e:	463e      	mov	r6, r7
 8007a20:	42be      	cmp	r6, r7
 8007a22:	d900      	bls.n	8007a26 <__ssputs_r+0x86>
 8007a24:	463e      	mov	r6, r7
 8007a26:	4632      	mov	r2, r6
 8007a28:	6820      	ldr	r0, [r4, #0]
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	f000 fca4 	bl	8008378 <memmove>
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	1b9b      	subs	r3, r3, r6
 8007a36:	4432      	add	r2, r6
 8007a38:	60a3      	str	r3, [r4, #8]
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e7db      	b.n	80079f8 <__ssputs_r+0x58>
 8007a40:	462a      	mov	r2, r5
 8007a42:	f7ff ff87 	bl	8007954 <_realloc_r>
 8007a46:	4606      	mov	r6, r0
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d1e1      	bne.n	8007a10 <__ssputs_r+0x70>
 8007a4c:	6921      	ldr	r1, [r4, #16]
 8007a4e:	4650      	mov	r0, sl
 8007a50:	f7ff fa90 	bl	8006f74 <_free_r>
 8007a54:	e7c7      	b.n	80079e6 <__ssputs_r+0x46>
	...

08007a58 <_svfiprintf_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	4698      	mov	r8, r3
 8007a5e:	898b      	ldrh	r3, [r1, #12]
 8007a60:	061b      	lsls	r3, r3, #24
 8007a62:	b09d      	sub	sp, #116	; 0x74
 8007a64:	4607      	mov	r7, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	d50e      	bpl.n	8007a8a <_svfiprintf_r+0x32>
 8007a6c:	690b      	ldr	r3, [r1, #16]
 8007a6e:	b963      	cbnz	r3, 8007a8a <_svfiprintf_r+0x32>
 8007a70:	2140      	movs	r1, #64	; 0x40
 8007a72:	f7ff facf 	bl	8007014 <_malloc_r>
 8007a76:	6028      	str	r0, [r5, #0]
 8007a78:	6128      	str	r0, [r5, #16]
 8007a7a:	b920      	cbnz	r0, 8007a86 <_svfiprintf_r+0x2e>
 8007a7c:	230c      	movs	r3, #12
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	e0d1      	b.n	8007c2a <_svfiprintf_r+0x1d2>
 8007a86:	2340      	movs	r3, #64	; 0x40
 8007a88:	616b      	str	r3, [r5, #20]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8e:	2320      	movs	r3, #32
 8007a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a98:	2330      	movs	r3, #48	; 0x30
 8007a9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c44 <_svfiprintf_r+0x1ec>
 8007a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aa2:	f04f 0901 	mov.w	r9, #1
 8007aa6:	4623      	mov	r3, r4
 8007aa8:	469a      	mov	sl, r3
 8007aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aae:	b10a      	cbz	r2, 8007ab4 <_svfiprintf_r+0x5c>
 8007ab0:	2a25      	cmp	r2, #37	; 0x25
 8007ab2:	d1f9      	bne.n	8007aa8 <_svfiprintf_r+0x50>
 8007ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ab8:	d00b      	beq.n	8007ad2 <_svfiprintf_r+0x7a>
 8007aba:	465b      	mov	r3, fp
 8007abc:	4622      	mov	r2, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff ff6d 	bl	80079a0 <__ssputs_r>
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	f000 80aa 	beq.w	8007c20 <_svfiprintf_r+0x1c8>
 8007acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ace:	445a      	add	r2, fp
 8007ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80a2 	beq.w	8007c20 <_svfiprintf_r+0x1c8>
 8007adc:	2300      	movs	r3, #0
 8007ade:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae6:	f10a 0a01 	add.w	sl, sl, #1
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	9307      	str	r3, [sp, #28]
 8007aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007af2:	931a      	str	r3, [sp, #104]	; 0x68
 8007af4:	4654      	mov	r4, sl
 8007af6:	2205      	movs	r2, #5
 8007af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afc:	4851      	ldr	r0, [pc, #324]	; (8007c44 <_svfiprintf_r+0x1ec>)
 8007afe:	f7f8 fb67 	bl	80001d0 <memchr>
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	b9d8      	cbnz	r0, 8007b3e <_svfiprintf_r+0xe6>
 8007b06:	06d0      	lsls	r0, r2, #27
 8007b08:	bf44      	itt	mi
 8007b0a:	2320      	movmi	r3, #32
 8007b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b10:	0711      	lsls	r1, r2, #28
 8007b12:	bf44      	itt	mi
 8007b14:	232b      	movmi	r3, #43	; 0x2b
 8007b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b20:	d015      	beq.n	8007b4e <_svfiprintf_r+0xf6>
 8007b22:	9a07      	ldr	r2, [sp, #28]
 8007b24:	4654      	mov	r4, sl
 8007b26:	2000      	movs	r0, #0
 8007b28:	f04f 0c0a 	mov.w	ip, #10
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b32:	3b30      	subs	r3, #48	; 0x30
 8007b34:	2b09      	cmp	r3, #9
 8007b36:	d94e      	bls.n	8007bd6 <_svfiprintf_r+0x17e>
 8007b38:	b1b0      	cbz	r0, 8007b68 <_svfiprintf_r+0x110>
 8007b3a:	9207      	str	r2, [sp, #28]
 8007b3c:	e014      	b.n	8007b68 <_svfiprintf_r+0x110>
 8007b3e:	eba0 0308 	sub.w	r3, r0, r8
 8007b42:	fa09 f303 	lsl.w	r3, r9, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	46a2      	mov	sl, r4
 8007b4c:	e7d2      	b.n	8007af4 <_svfiprintf_r+0x9c>
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	1d19      	adds	r1, r3, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	9103      	str	r1, [sp, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	bfbb      	ittet	lt
 8007b5a:	425b      	neglt	r3, r3
 8007b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b60:	9307      	strge	r3, [sp, #28]
 8007b62:	9307      	strlt	r3, [sp, #28]
 8007b64:	bfb8      	it	lt
 8007b66:	9204      	strlt	r2, [sp, #16]
 8007b68:	7823      	ldrb	r3, [r4, #0]
 8007b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b6c:	d10c      	bne.n	8007b88 <_svfiprintf_r+0x130>
 8007b6e:	7863      	ldrb	r3, [r4, #1]
 8007b70:	2b2a      	cmp	r3, #42	; 0x2a
 8007b72:	d135      	bne.n	8007be0 <_svfiprintf_r+0x188>
 8007b74:	9b03      	ldr	r3, [sp, #12]
 8007b76:	1d1a      	adds	r2, r3, #4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	9203      	str	r2, [sp, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bfb8      	it	lt
 8007b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b84:	3402      	adds	r4, #2
 8007b86:	9305      	str	r3, [sp, #20]
 8007b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c54 <_svfiprintf_r+0x1fc>
 8007b8c:	7821      	ldrb	r1, [r4, #0]
 8007b8e:	2203      	movs	r2, #3
 8007b90:	4650      	mov	r0, sl
 8007b92:	f7f8 fb1d 	bl	80001d0 <memchr>
 8007b96:	b140      	cbz	r0, 8007baa <_svfiprintf_r+0x152>
 8007b98:	2340      	movs	r3, #64	; 0x40
 8007b9a:	eba0 000a 	sub.w	r0, r0, sl
 8007b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	4303      	orrs	r3, r0
 8007ba6:	3401      	adds	r4, #1
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bae:	4826      	ldr	r0, [pc, #152]	; (8007c48 <_svfiprintf_r+0x1f0>)
 8007bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bb4:	2206      	movs	r2, #6
 8007bb6:	f7f8 fb0b 	bl	80001d0 <memchr>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d038      	beq.n	8007c30 <_svfiprintf_r+0x1d8>
 8007bbe:	4b23      	ldr	r3, [pc, #140]	; (8007c4c <_svfiprintf_r+0x1f4>)
 8007bc0:	bb1b      	cbnz	r3, 8007c0a <_svfiprintf_r+0x1b2>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	3307      	adds	r3, #7
 8007bc6:	f023 0307 	bic.w	r3, r3, #7
 8007bca:	3308      	adds	r3, #8
 8007bcc:	9303      	str	r3, [sp, #12]
 8007bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd0:	4433      	add	r3, r6
 8007bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd4:	e767      	b.n	8007aa6 <_svfiprintf_r+0x4e>
 8007bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bda:	460c      	mov	r4, r1
 8007bdc:	2001      	movs	r0, #1
 8007bde:	e7a5      	b.n	8007b2c <_svfiprintf_r+0xd4>
 8007be0:	2300      	movs	r3, #0
 8007be2:	3401      	adds	r4, #1
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	4619      	mov	r1, r3
 8007be8:	f04f 0c0a 	mov.w	ip, #10
 8007bec:	4620      	mov	r0, r4
 8007bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf2:	3a30      	subs	r2, #48	; 0x30
 8007bf4:	2a09      	cmp	r2, #9
 8007bf6:	d903      	bls.n	8007c00 <_svfiprintf_r+0x1a8>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0c5      	beq.n	8007b88 <_svfiprintf_r+0x130>
 8007bfc:	9105      	str	r1, [sp, #20]
 8007bfe:	e7c3      	b.n	8007b88 <_svfiprintf_r+0x130>
 8007c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c04:	4604      	mov	r4, r0
 8007c06:	2301      	movs	r3, #1
 8007c08:	e7f0      	b.n	8007bec <_svfiprintf_r+0x194>
 8007c0a:	ab03      	add	r3, sp, #12
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	462a      	mov	r2, r5
 8007c10:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <_svfiprintf_r+0x1f8>)
 8007c12:	a904      	add	r1, sp, #16
 8007c14:	4638      	mov	r0, r7
 8007c16:	f3af 8000 	nop.w
 8007c1a:	1c42      	adds	r2, r0, #1
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	d1d6      	bne.n	8007bce <_svfiprintf_r+0x176>
 8007c20:	89ab      	ldrh	r3, [r5, #12]
 8007c22:	065b      	lsls	r3, r3, #25
 8007c24:	f53f af2c 	bmi.w	8007a80 <_svfiprintf_r+0x28>
 8007c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c2a:	b01d      	add	sp, #116	; 0x74
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	ab03      	add	r3, sp, #12
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	462a      	mov	r2, r5
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <_svfiprintf_r+0x1f8>)
 8007c38:	a904      	add	r1, sp, #16
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f000 f9d4 	bl	8007fe8 <_printf_i>
 8007c40:	e7eb      	b.n	8007c1a <_svfiprintf_r+0x1c2>
 8007c42:	bf00      	nop
 8007c44:	0800f608 	.word	0x0800f608
 8007c48:	0800f612 	.word	0x0800f612
 8007c4c:	00000000 	.word	0x00000000
 8007c50:	080079a1 	.word	0x080079a1
 8007c54:	0800f60e 	.word	0x0800f60e

08007c58 <__sfputc_r>:
 8007c58:	6893      	ldr	r3, [r2, #8]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	b410      	push	{r4}
 8007c60:	6093      	str	r3, [r2, #8]
 8007c62:	da08      	bge.n	8007c76 <__sfputc_r+0x1e>
 8007c64:	6994      	ldr	r4, [r2, #24]
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	db01      	blt.n	8007c6e <__sfputc_r+0x16>
 8007c6a:	290a      	cmp	r1, #10
 8007c6c:	d103      	bne.n	8007c76 <__sfputc_r+0x1e>
 8007c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c72:	f7ff bb55 	b.w	8007320 <__swbuf_r>
 8007c76:	6813      	ldr	r3, [r2, #0]
 8007c78:	1c58      	adds	r0, r3, #1
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	7019      	strb	r1, [r3, #0]
 8007c7e:	4608      	mov	r0, r1
 8007c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <__sfputs_r>:
 8007c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c88:	4606      	mov	r6, r0
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	18d5      	adds	r5, r2, r3
 8007c90:	42ac      	cmp	r4, r5
 8007c92:	d101      	bne.n	8007c98 <__sfputs_r+0x12>
 8007c94:	2000      	movs	r0, #0
 8007c96:	e007      	b.n	8007ca8 <__sfputs_r+0x22>
 8007c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9c:	463a      	mov	r2, r7
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff ffda 	bl	8007c58 <__sfputc_r>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d1f3      	bne.n	8007c90 <__sfputs_r+0xa>
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cac <_vfiprintf_r>:
 8007cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	b09d      	sub	sp, #116	; 0x74
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	4698      	mov	r8, r3
 8007cb8:	4606      	mov	r6, r0
 8007cba:	b118      	cbz	r0, 8007cc4 <_vfiprintf_r+0x18>
 8007cbc:	6983      	ldr	r3, [r0, #24]
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <_vfiprintf_r+0x18>
 8007cc0:	f7ff fd26 	bl	8007710 <__sinit>
 8007cc4:	4b89      	ldr	r3, [pc, #548]	; (8007eec <_vfiprintf_r+0x240>)
 8007cc6:	429d      	cmp	r5, r3
 8007cc8:	d11b      	bne.n	8007d02 <_vfiprintf_r+0x56>
 8007cca:	6875      	ldr	r5, [r6, #4]
 8007ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cce:	07d9      	lsls	r1, r3, #31
 8007cd0:	d405      	bmi.n	8007cde <_vfiprintf_r+0x32>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	059a      	lsls	r2, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_vfiprintf_r+0x32>
 8007cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cda:	f7ff fdc9 	bl	8007870 <__retarget_lock_acquire_recursive>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	071b      	lsls	r3, r3, #28
 8007ce2:	d501      	bpl.n	8007ce8 <_vfiprintf_r+0x3c>
 8007ce4:	692b      	ldr	r3, [r5, #16]
 8007ce6:	b9eb      	cbnz	r3, 8007d24 <_vfiprintf_r+0x78>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7ff fb6a 	bl	80073c4 <__swsetup_r>
 8007cf0:	b1c0      	cbz	r0, 8007d24 <_vfiprintf_r+0x78>
 8007cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cf4:	07dc      	lsls	r4, r3, #31
 8007cf6:	d50e      	bpl.n	8007d16 <_vfiprintf_r+0x6a>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	b01d      	add	sp, #116	; 0x74
 8007cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d02:	4b7b      	ldr	r3, [pc, #492]	; (8007ef0 <_vfiprintf_r+0x244>)
 8007d04:	429d      	cmp	r5, r3
 8007d06:	d101      	bne.n	8007d0c <_vfiprintf_r+0x60>
 8007d08:	68b5      	ldr	r5, [r6, #8]
 8007d0a:	e7df      	b.n	8007ccc <_vfiprintf_r+0x20>
 8007d0c:	4b79      	ldr	r3, [pc, #484]	; (8007ef4 <_vfiprintf_r+0x248>)
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	bf08      	it	eq
 8007d12:	68f5      	ldreq	r5, [r6, #12]
 8007d14:	e7da      	b.n	8007ccc <_vfiprintf_r+0x20>
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	0598      	lsls	r0, r3, #22
 8007d1a:	d4ed      	bmi.n	8007cf8 <_vfiprintf_r+0x4c>
 8007d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1e:	f7ff fda8 	bl	8007872 <__retarget_lock_release_recursive>
 8007d22:	e7e9      	b.n	8007cf8 <_vfiprintf_r+0x4c>
 8007d24:	2300      	movs	r3, #0
 8007d26:	9309      	str	r3, [sp, #36]	; 0x24
 8007d28:	2320      	movs	r3, #32
 8007d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d32:	2330      	movs	r3, #48	; 0x30
 8007d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ef8 <_vfiprintf_r+0x24c>
 8007d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d3c:	f04f 0901 	mov.w	r9, #1
 8007d40:	4623      	mov	r3, r4
 8007d42:	469a      	mov	sl, r3
 8007d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d48:	b10a      	cbz	r2, 8007d4e <_vfiprintf_r+0xa2>
 8007d4a:	2a25      	cmp	r2, #37	; 0x25
 8007d4c:	d1f9      	bne.n	8007d42 <_vfiprintf_r+0x96>
 8007d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d52:	d00b      	beq.n	8007d6c <_vfiprintf_r+0xc0>
 8007d54:	465b      	mov	r3, fp
 8007d56:	4622      	mov	r2, r4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ff93 	bl	8007c86 <__sfputs_r>
 8007d60:	3001      	adds	r0, #1
 8007d62:	f000 80aa 	beq.w	8007eba <_vfiprintf_r+0x20e>
 8007d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d68:	445a      	add	r2, fp
 8007d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 80a2 	beq.w	8007eba <_vfiprintf_r+0x20e>
 8007d76:	2300      	movs	r3, #0
 8007d78:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d80:	f10a 0a01 	add.w	sl, sl, #1
 8007d84:	9304      	str	r3, [sp, #16]
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d8e:	4654      	mov	r4, sl
 8007d90:	2205      	movs	r2, #5
 8007d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d96:	4858      	ldr	r0, [pc, #352]	; (8007ef8 <_vfiprintf_r+0x24c>)
 8007d98:	f7f8 fa1a 	bl	80001d0 <memchr>
 8007d9c:	9a04      	ldr	r2, [sp, #16]
 8007d9e:	b9d8      	cbnz	r0, 8007dd8 <_vfiprintf_r+0x12c>
 8007da0:	06d1      	lsls	r1, r2, #27
 8007da2:	bf44      	itt	mi
 8007da4:	2320      	movmi	r3, #32
 8007da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007daa:	0713      	lsls	r3, r2, #28
 8007dac:	bf44      	itt	mi
 8007dae:	232b      	movmi	r3, #43	; 0x2b
 8007db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db4:	f89a 3000 	ldrb.w	r3, [sl]
 8007db8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dba:	d015      	beq.n	8007de8 <_vfiprintf_r+0x13c>
 8007dbc:	9a07      	ldr	r2, [sp, #28]
 8007dbe:	4654      	mov	r4, sl
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f04f 0c0a 	mov.w	ip, #10
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dcc:	3b30      	subs	r3, #48	; 0x30
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	d94e      	bls.n	8007e70 <_vfiprintf_r+0x1c4>
 8007dd2:	b1b0      	cbz	r0, 8007e02 <_vfiprintf_r+0x156>
 8007dd4:	9207      	str	r2, [sp, #28]
 8007dd6:	e014      	b.n	8007e02 <_vfiprintf_r+0x156>
 8007dd8:	eba0 0308 	sub.w	r3, r0, r8
 8007ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8007de0:	4313      	orrs	r3, r2
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	46a2      	mov	sl, r4
 8007de6:	e7d2      	b.n	8007d8e <_vfiprintf_r+0xe2>
 8007de8:	9b03      	ldr	r3, [sp, #12]
 8007dea:	1d19      	adds	r1, r3, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	9103      	str	r1, [sp, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bfbb      	ittet	lt
 8007df4:	425b      	neglt	r3, r3
 8007df6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dfa:	9307      	strge	r3, [sp, #28]
 8007dfc:	9307      	strlt	r3, [sp, #28]
 8007dfe:	bfb8      	it	lt
 8007e00:	9204      	strlt	r2, [sp, #16]
 8007e02:	7823      	ldrb	r3, [r4, #0]
 8007e04:	2b2e      	cmp	r3, #46	; 0x2e
 8007e06:	d10c      	bne.n	8007e22 <_vfiprintf_r+0x176>
 8007e08:	7863      	ldrb	r3, [r4, #1]
 8007e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0c:	d135      	bne.n	8007e7a <_vfiprintf_r+0x1ce>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	9203      	str	r2, [sp, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	bfb8      	it	lt
 8007e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e1e:	3402      	adds	r4, #2
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f08 <_vfiprintf_r+0x25c>
 8007e26:	7821      	ldrb	r1, [r4, #0]
 8007e28:	2203      	movs	r2, #3
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	f7f8 f9d0 	bl	80001d0 <memchr>
 8007e30:	b140      	cbz	r0, 8007e44 <_vfiprintf_r+0x198>
 8007e32:	2340      	movs	r3, #64	; 0x40
 8007e34:	eba0 000a 	sub.w	r0, r0, sl
 8007e38:	fa03 f000 	lsl.w	r0, r3, r0
 8007e3c:	9b04      	ldr	r3, [sp, #16]
 8007e3e:	4303      	orrs	r3, r0
 8007e40:	3401      	adds	r4, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e48:	482c      	ldr	r0, [pc, #176]	; (8007efc <_vfiprintf_r+0x250>)
 8007e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e4e:	2206      	movs	r2, #6
 8007e50:	f7f8 f9be 	bl	80001d0 <memchr>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d03f      	beq.n	8007ed8 <_vfiprintf_r+0x22c>
 8007e58:	4b29      	ldr	r3, [pc, #164]	; (8007f00 <_vfiprintf_r+0x254>)
 8007e5a:	bb1b      	cbnz	r3, 8007ea4 <_vfiprintf_r+0x1f8>
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	3307      	adds	r3, #7
 8007e60:	f023 0307 	bic.w	r3, r3, #7
 8007e64:	3308      	adds	r3, #8
 8007e66:	9303      	str	r3, [sp, #12]
 8007e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6a:	443b      	add	r3, r7
 8007e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6e:	e767      	b.n	8007d40 <_vfiprintf_r+0x94>
 8007e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e74:	460c      	mov	r4, r1
 8007e76:	2001      	movs	r0, #1
 8007e78:	e7a5      	b.n	8007dc6 <_vfiprintf_r+0x11a>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	3401      	adds	r4, #1
 8007e7e:	9305      	str	r3, [sp, #20]
 8007e80:	4619      	mov	r1, r3
 8007e82:	f04f 0c0a 	mov.w	ip, #10
 8007e86:	4620      	mov	r0, r4
 8007e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e8c:	3a30      	subs	r2, #48	; 0x30
 8007e8e:	2a09      	cmp	r2, #9
 8007e90:	d903      	bls.n	8007e9a <_vfiprintf_r+0x1ee>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0c5      	beq.n	8007e22 <_vfiprintf_r+0x176>
 8007e96:	9105      	str	r1, [sp, #20]
 8007e98:	e7c3      	b.n	8007e22 <_vfiprintf_r+0x176>
 8007e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e7f0      	b.n	8007e86 <_vfiprintf_r+0x1da>
 8007ea4:	ab03      	add	r3, sp, #12
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	462a      	mov	r2, r5
 8007eaa:	4b16      	ldr	r3, [pc, #88]	; (8007f04 <_vfiprintf_r+0x258>)
 8007eac:	a904      	add	r1, sp, #16
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f3af 8000 	nop.w
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	1c78      	adds	r0, r7, #1
 8007eb8:	d1d6      	bne.n	8007e68 <_vfiprintf_r+0x1bc>
 8007eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ebc:	07d9      	lsls	r1, r3, #31
 8007ebe:	d405      	bmi.n	8007ecc <_vfiprintf_r+0x220>
 8007ec0:	89ab      	ldrh	r3, [r5, #12]
 8007ec2:	059a      	lsls	r2, r3, #22
 8007ec4:	d402      	bmi.n	8007ecc <_vfiprintf_r+0x220>
 8007ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ec8:	f7ff fcd3 	bl	8007872 <__retarget_lock_release_recursive>
 8007ecc:	89ab      	ldrh	r3, [r5, #12]
 8007ece:	065b      	lsls	r3, r3, #25
 8007ed0:	f53f af12 	bmi.w	8007cf8 <_vfiprintf_r+0x4c>
 8007ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed6:	e711      	b.n	8007cfc <_vfiprintf_r+0x50>
 8007ed8:	ab03      	add	r3, sp, #12
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	462a      	mov	r2, r5
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <_vfiprintf_r+0x258>)
 8007ee0:	a904      	add	r1, sp, #16
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 f880 	bl	8007fe8 <_printf_i>
 8007ee8:	e7e4      	b.n	8007eb4 <_vfiprintf_r+0x208>
 8007eea:	bf00      	nop
 8007eec:	0800f5c8 	.word	0x0800f5c8
 8007ef0:	0800f5e8 	.word	0x0800f5e8
 8007ef4:	0800f5a8 	.word	0x0800f5a8
 8007ef8:	0800f608 	.word	0x0800f608
 8007efc:	0800f612 	.word	0x0800f612
 8007f00:	00000000 	.word	0x00000000
 8007f04:	08007c87 	.word	0x08007c87
 8007f08:	0800f60e 	.word	0x0800f60e

08007f0c <_printf_common>:
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	4616      	mov	r6, r2
 8007f12:	4699      	mov	r9, r3
 8007f14:	688a      	ldr	r2, [r1, #8]
 8007f16:	690b      	ldr	r3, [r1, #16]
 8007f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	bfb8      	it	lt
 8007f20:	4613      	movlt	r3, r2
 8007f22:	6033      	str	r3, [r6, #0]
 8007f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f28:	4607      	mov	r7, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	b10a      	cbz	r2, 8007f32 <_printf_common+0x26>
 8007f2e:	3301      	adds	r3, #1
 8007f30:	6033      	str	r3, [r6, #0]
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	0699      	lsls	r1, r3, #26
 8007f36:	bf42      	ittt	mi
 8007f38:	6833      	ldrmi	r3, [r6, #0]
 8007f3a:	3302      	addmi	r3, #2
 8007f3c:	6033      	strmi	r3, [r6, #0]
 8007f3e:	6825      	ldr	r5, [r4, #0]
 8007f40:	f015 0506 	ands.w	r5, r5, #6
 8007f44:	d106      	bne.n	8007f54 <_printf_common+0x48>
 8007f46:	f104 0a19 	add.w	sl, r4, #25
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	6832      	ldr	r2, [r6, #0]
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	42ab      	cmp	r3, r5
 8007f52:	dc26      	bgt.n	8007fa2 <_printf_common+0x96>
 8007f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f58:	1e13      	subs	r3, r2, #0
 8007f5a:	6822      	ldr	r2, [r4, #0]
 8007f5c:	bf18      	it	ne
 8007f5e:	2301      	movne	r3, #1
 8007f60:	0692      	lsls	r2, r2, #26
 8007f62:	d42b      	bmi.n	8007fbc <_printf_common+0xb0>
 8007f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f68:	4649      	mov	r1, r9
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	47c0      	blx	r8
 8007f6e:	3001      	adds	r0, #1
 8007f70:	d01e      	beq.n	8007fb0 <_printf_common+0xa4>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	68e5      	ldr	r5, [r4, #12]
 8007f76:	6832      	ldr	r2, [r6, #0]
 8007f78:	f003 0306 	and.w	r3, r3, #6
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	bf08      	it	eq
 8007f80:	1aad      	subeq	r5, r5, r2
 8007f82:	68a3      	ldr	r3, [r4, #8]
 8007f84:	6922      	ldr	r2, [r4, #16]
 8007f86:	bf0c      	ite	eq
 8007f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f8c:	2500      	movne	r5, #0
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	bfc4      	itt	gt
 8007f92:	1a9b      	subgt	r3, r3, r2
 8007f94:	18ed      	addgt	r5, r5, r3
 8007f96:	2600      	movs	r6, #0
 8007f98:	341a      	adds	r4, #26
 8007f9a:	42b5      	cmp	r5, r6
 8007f9c:	d11a      	bne.n	8007fd4 <_printf_common+0xc8>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e008      	b.n	8007fb4 <_printf_common+0xa8>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4652      	mov	r2, sl
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	4638      	mov	r0, r7
 8007faa:	47c0      	blx	r8
 8007fac:	3001      	adds	r0, #1
 8007fae:	d103      	bne.n	8007fb8 <_printf_common+0xac>
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb8:	3501      	adds	r5, #1
 8007fba:	e7c6      	b.n	8007f4a <_printf_common+0x3e>
 8007fbc:	18e1      	adds	r1, r4, r3
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	2030      	movs	r0, #48	; 0x30
 8007fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fc6:	4422      	add	r2, r4
 8007fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fd0:	3302      	adds	r3, #2
 8007fd2:	e7c7      	b.n	8007f64 <_printf_common+0x58>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4649      	mov	r1, r9
 8007fda:	4638      	mov	r0, r7
 8007fdc:	47c0      	blx	r8
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d0e6      	beq.n	8007fb0 <_printf_common+0xa4>
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	e7d9      	b.n	8007f9a <_printf_common+0x8e>
	...

08007fe8 <_printf_i>:
 8007fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fec:	460c      	mov	r4, r1
 8007fee:	4691      	mov	r9, r2
 8007ff0:	7e27      	ldrb	r7, [r4, #24]
 8007ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ff4:	2f78      	cmp	r7, #120	; 0x78
 8007ff6:	4680      	mov	r8, r0
 8007ff8:	469a      	mov	sl, r3
 8007ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ffe:	d807      	bhi.n	8008010 <_printf_i+0x28>
 8008000:	2f62      	cmp	r7, #98	; 0x62
 8008002:	d80a      	bhi.n	800801a <_printf_i+0x32>
 8008004:	2f00      	cmp	r7, #0
 8008006:	f000 80d8 	beq.w	80081ba <_printf_i+0x1d2>
 800800a:	2f58      	cmp	r7, #88	; 0x58
 800800c:	f000 80a3 	beq.w	8008156 <_printf_i+0x16e>
 8008010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008018:	e03a      	b.n	8008090 <_printf_i+0xa8>
 800801a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800801e:	2b15      	cmp	r3, #21
 8008020:	d8f6      	bhi.n	8008010 <_printf_i+0x28>
 8008022:	a001      	add	r0, pc, #4	; (adr r0, 8008028 <_printf_i+0x40>)
 8008024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008028:	08008081 	.word	0x08008081
 800802c:	08008095 	.word	0x08008095
 8008030:	08008011 	.word	0x08008011
 8008034:	08008011 	.word	0x08008011
 8008038:	08008011 	.word	0x08008011
 800803c:	08008011 	.word	0x08008011
 8008040:	08008095 	.word	0x08008095
 8008044:	08008011 	.word	0x08008011
 8008048:	08008011 	.word	0x08008011
 800804c:	08008011 	.word	0x08008011
 8008050:	08008011 	.word	0x08008011
 8008054:	080081a1 	.word	0x080081a1
 8008058:	080080c5 	.word	0x080080c5
 800805c:	08008183 	.word	0x08008183
 8008060:	08008011 	.word	0x08008011
 8008064:	08008011 	.word	0x08008011
 8008068:	080081c3 	.word	0x080081c3
 800806c:	08008011 	.word	0x08008011
 8008070:	080080c5 	.word	0x080080c5
 8008074:	08008011 	.word	0x08008011
 8008078:	08008011 	.word	0x08008011
 800807c:	0800818b 	.word	0x0800818b
 8008080:	680b      	ldr	r3, [r1, #0]
 8008082:	1d1a      	adds	r2, r3, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	600a      	str	r2, [r1, #0]
 8008088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800808c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008090:	2301      	movs	r3, #1
 8008092:	e0a3      	b.n	80081dc <_printf_i+0x1f4>
 8008094:	6825      	ldr	r5, [r4, #0]
 8008096:	6808      	ldr	r0, [r1, #0]
 8008098:	062e      	lsls	r6, r5, #24
 800809a:	f100 0304 	add.w	r3, r0, #4
 800809e:	d50a      	bpl.n	80080b6 <_printf_i+0xce>
 80080a0:	6805      	ldr	r5, [r0, #0]
 80080a2:	600b      	str	r3, [r1, #0]
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	da03      	bge.n	80080b0 <_printf_i+0xc8>
 80080a8:	232d      	movs	r3, #45	; 0x2d
 80080aa:	426d      	negs	r5, r5
 80080ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b0:	485e      	ldr	r0, [pc, #376]	; (800822c <_printf_i+0x244>)
 80080b2:	230a      	movs	r3, #10
 80080b4:	e019      	b.n	80080ea <_printf_i+0x102>
 80080b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080ba:	6805      	ldr	r5, [r0, #0]
 80080bc:	600b      	str	r3, [r1, #0]
 80080be:	bf18      	it	ne
 80080c0:	b22d      	sxthne	r5, r5
 80080c2:	e7ef      	b.n	80080a4 <_printf_i+0xbc>
 80080c4:	680b      	ldr	r3, [r1, #0]
 80080c6:	6825      	ldr	r5, [r4, #0]
 80080c8:	1d18      	adds	r0, r3, #4
 80080ca:	6008      	str	r0, [r1, #0]
 80080cc:	0628      	lsls	r0, r5, #24
 80080ce:	d501      	bpl.n	80080d4 <_printf_i+0xec>
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	e002      	b.n	80080da <_printf_i+0xf2>
 80080d4:	0669      	lsls	r1, r5, #25
 80080d6:	d5fb      	bpl.n	80080d0 <_printf_i+0xe8>
 80080d8:	881d      	ldrh	r5, [r3, #0]
 80080da:	4854      	ldr	r0, [pc, #336]	; (800822c <_printf_i+0x244>)
 80080dc:	2f6f      	cmp	r7, #111	; 0x6f
 80080de:	bf0c      	ite	eq
 80080e0:	2308      	moveq	r3, #8
 80080e2:	230a      	movne	r3, #10
 80080e4:	2100      	movs	r1, #0
 80080e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080ea:	6866      	ldr	r6, [r4, #4]
 80080ec:	60a6      	str	r6, [r4, #8]
 80080ee:	2e00      	cmp	r6, #0
 80080f0:	bfa2      	ittt	ge
 80080f2:	6821      	ldrge	r1, [r4, #0]
 80080f4:	f021 0104 	bicge.w	r1, r1, #4
 80080f8:	6021      	strge	r1, [r4, #0]
 80080fa:	b90d      	cbnz	r5, 8008100 <_printf_i+0x118>
 80080fc:	2e00      	cmp	r6, #0
 80080fe:	d04d      	beq.n	800819c <_printf_i+0x1b4>
 8008100:	4616      	mov	r6, r2
 8008102:	fbb5 f1f3 	udiv	r1, r5, r3
 8008106:	fb03 5711 	mls	r7, r3, r1, r5
 800810a:	5dc7      	ldrb	r7, [r0, r7]
 800810c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008110:	462f      	mov	r7, r5
 8008112:	42bb      	cmp	r3, r7
 8008114:	460d      	mov	r5, r1
 8008116:	d9f4      	bls.n	8008102 <_printf_i+0x11a>
 8008118:	2b08      	cmp	r3, #8
 800811a:	d10b      	bne.n	8008134 <_printf_i+0x14c>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	07df      	lsls	r7, r3, #31
 8008120:	d508      	bpl.n	8008134 <_printf_i+0x14c>
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	6861      	ldr	r1, [r4, #4]
 8008126:	4299      	cmp	r1, r3
 8008128:	bfde      	ittt	le
 800812a:	2330      	movle	r3, #48	; 0x30
 800812c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008130:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008134:	1b92      	subs	r2, r2, r6
 8008136:	6122      	str	r2, [r4, #16]
 8008138:	f8cd a000 	str.w	sl, [sp]
 800813c:	464b      	mov	r3, r9
 800813e:	aa03      	add	r2, sp, #12
 8008140:	4621      	mov	r1, r4
 8008142:	4640      	mov	r0, r8
 8008144:	f7ff fee2 	bl	8007f0c <_printf_common>
 8008148:	3001      	adds	r0, #1
 800814a:	d14c      	bne.n	80081e6 <_printf_i+0x1fe>
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	b004      	add	sp, #16
 8008152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008156:	4835      	ldr	r0, [pc, #212]	; (800822c <_printf_i+0x244>)
 8008158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	680e      	ldr	r6, [r1, #0]
 8008160:	061f      	lsls	r7, r3, #24
 8008162:	f856 5b04 	ldr.w	r5, [r6], #4
 8008166:	600e      	str	r6, [r1, #0]
 8008168:	d514      	bpl.n	8008194 <_printf_i+0x1ac>
 800816a:	07d9      	lsls	r1, r3, #31
 800816c:	bf44      	itt	mi
 800816e:	f043 0320 	orrmi.w	r3, r3, #32
 8008172:	6023      	strmi	r3, [r4, #0]
 8008174:	b91d      	cbnz	r5, 800817e <_printf_i+0x196>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	f023 0320 	bic.w	r3, r3, #32
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	2310      	movs	r3, #16
 8008180:	e7b0      	b.n	80080e4 <_printf_i+0xfc>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	f043 0320 	orr.w	r3, r3, #32
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	2378      	movs	r3, #120	; 0x78
 800818c:	4828      	ldr	r0, [pc, #160]	; (8008230 <_printf_i+0x248>)
 800818e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008192:	e7e3      	b.n	800815c <_printf_i+0x174>
 8008194:	065e      	lsls	r6, r3, #25
 8008196:	bf48      	it	mi
 8008198:	b2ad      	uxthmi	r5, r5
 800819a:	e7e6      	b.n	800816a <_printf_i+0x182>
 800819c:	4616      	mov	r6, r2
 800819e:	e7bb      	b.n	8008118 <_printf_i+0x130>
 80081a0:	680b      	ldr	r3, [r1, #0]
 80081a2:	6826      	ldr	r6, [r4, #0]
 80081a4:	6960      	ldr	r0, [r4, #20]
 80081a6:	1d1d      	adds	r5, r3, #4
 80081a8:	600d      	str	r5, [r1, #0]
 80081aa:	0635      	lsls	r5, r6, #24
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	d501      	bpl.n	80081b4 <_printf_i+0x1cc>
 80081b0:	6018      	str	r0, [r3, #0]
 80081b2:	e002      	b.n	80081ba <_printf_i+0x1d2>
 80081b4:	0671      	lsls	r1, r6, #25
 80081b6:	d5fb      	bpl.n	80081b0 <_printf_i+0x1c8>
 80081b8:	8018      	strh	r0, [r3, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	4616      	mov	r6, r2
 80081c0:	e7ba      	b.n	8008138 <_printf_i+0x150>
 80081c2:	680b      	ldr	r3, [r1, #0]
 80081c4:	1d1a      	adds	r2, r3, #4
 80081c6:	600a      	str	r2, [r1, #0]
 80081c8:	681e      	ldr	r6, [r3, #0]
 80081ca:	6862      	ldr	r2, [r4, #4]
 80081cc:	2100      	movs	r1, #0
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7f7 fffe 	bl	80001d0 <memchr>
 80081d4:	b108      	cbz	r0, 80081da <_printf_i+0x1f2>
 80081d6:	1b80      	subs	r0, r0, r6
 80081d8:	6060      	str	r0, [r4, #4]
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	6123      	str	r3, [r4, #16]
 80081de:	2300      	movs	r3, #0
 80081e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e4:	e7a8      	b.n	8008138 <_printf_i+0x150>
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	4632      	mov	r2, r6
 80081ea:	4649      	mov	r1, r9
 80081ec:	4640      	mov	r0, r8
 80081ee:	47d0      	blx	sl
 80081f0:	3001      	adds	r0, #1
 80081f2:	d0ab      	beq.n	800814c <_printf_i+0x164>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	079b      	lsls	r3, r3, #30
 80081f8:	d413      	bmi.n	8008222 <_printf_i+0x23a>
 80081fa:	68e0      	ldr	r0, [r4, #12]
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	4298      	cmp	r0, r3
 8008200:	bfb8      	it	lt
 8008202:	4618      	movlt	r0, r3
 8008204:	e7a4      	b.n	8008150 <_printf_i+0x168>
 8008206:	2301      	movs	r3, #1
 8008208:	4632      	mov	r2, r6
 800820a:	4649      	mov	r1, r9
 800820c:	4640      	mov	r0, r8
 800820e:	47d0      	blx	sl
 8008210:	3001      	adds	r0, #1
 8008212:	d09b      	beq.n	800814c <_printf_i+0x164>
 8008214:	3501      	adds	r5, #1
 8008216:	68e3      	ldr	r3, [r4, #12]
 8008218:	9903      	ldr	r1, [sp, #12]
 800821a:	1a5b      	subs	r3, r3, r1
 800821c:	42ab      	cmp	r3, r5
 800821e:	dcf2      	bgt.n	8008206 <_printf_i+0x21e>
 8008220:	e7eb      	b.n	80081fa <_printf_i+0x212>
 8008222:	2500      	movs	r5, #0
 8008224:	f104 0619 	add.w	r6, r4, #25
 8008228:	e7f5      	b.n	8008216 <_printf_i+0x22e>
 800822a:	bf00      	nop
 800822c:	0800f619 	.word	0x0800f619
 8008230:	0800f62a 	.word	0x0800f62a

08008234 <__sread>:
 8008234:	b510      	push	{r4, lr}
 8008236:	460c      	mov	r4, r1
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	f000 f8be 	bl	80083bc <_read_r>
 8008240:	2800      	cmp	r0, #0
 8008242:	bfab      	itete	ge
 8008244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008246:	89a3      	ldrhlt	r3, [r4, #12]
 8008248:	181b      	addge	r3, r3, r0
 800824a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800824e:	bfac      	ite	ge
 8008250:	6563      	strge	r3, [r4, #84]	; 0x54
 8008252:	81a3      	strhlt	r3, [r4, #12]
 8008254:	bd10      	pop	{r4, pc}

08008256 <__swrite>:
 8008256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825a:	461f      	mov	r7, r3
 800825c:	898b      	ldrh	r3, [r1, #12]
 800825e:	05db      	lsls	r3, r3, #23
 8008260:	4605      	mov	r5, r0
 8008262:	460c      	mov	r4, r1
 8008264:	4616      	mov	r6, r2
 8008266:	d505      	bpl.n	8008274 <__swrite+0x1e>
 8008268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826c:	2302      	movs	r3, #2
 800826e:	2200      	movs	r2, #0
 8008270:	f000 f870 	bl	8008354 <_lseek_r>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800827a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	4632      	mov	r2, r6
 8008282:	463b      	mov	r3, r7
 8008284:	4628      	mov	r0, r5
 8008286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800828a:	f000 b817 	b.w	80082bc <_write_r>

0800828e <__sseek>:
 800828e:	b510      	push	{r4, lr}
 8008290:	460c      	mov	r4, r1
 8008292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008296:	f000 f85d 	bl	8008354 <_lseek_r>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	bf15      	itete	ne
 80082a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80082a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082aa:	81a3      	strheq	r3, [r4, #12]
 80082ac:	bf18      	it	ne
 80082ae:	81a3      	strhne	r3, [r4, #12]
 80082b0:	bd10      	pop	{r4, pc}

080082b2 <__sclose>:
 80082b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b6:	f000 b81b 	b.w	80082f0 <_close_r>
	...

080082bc <_write_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_write_r+0x20>)
 80082c0:	4604      	mov	r4, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f000 fa24 	bl	8008718 <_write>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_write_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_write_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20000d34 	.word	0x20000d34

080082e0 <abort>:
 80082e0:	b508      	push	{r3, lr}
 80082e2:	2006      	movs	r0, #6
 80082e4:	f000 f8a4 	bl	8008430 <raise>
 80082e8:	2001      	movs	r0, #1
 80082ea:	f000 fa1d 	bl	8008728 <_exit>
	...

080082f0 <_close_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d06      	ldr	r5, [pc, #24]	; (800830c <_close_r+0x1c>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	f000 f9d4 	bl	80086a8 <_close>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_close_r+0x1a>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_close_r+0x1a>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20000d34 	.word	0x20000d34

08008310 <_fstat_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	; (8008330 <_fstat_r+0x20>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	4611      	mov	r1, r2
 800831c:	602b      	str	r3, [r5, #0]
 800831e:	f000 f9cb 	bl	80086b8 <_fstat>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d102      	bne.n	800832c <_fstat_r+0x1c>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	b103      	cbz	r3, 800832c <_fstat_r+0x1c>
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	bf00      	nop
 8008330:	20000d34 	.word	0x20000d34

08008334 <_isatty_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d06      	ldr	r5, [pc, #24]	; (8008350 <_isatty_r+0x1c>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	f000 f9ca 	bl	80086d8 <_isatty>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_isatty_r+0x1a>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_isatty_r+0x1a>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000d34 	.word	0x20000d34

08008354 <_lseek_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_lseek_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f000 f9c8 	bl	80086f8 <_lseek>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_lseek_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_lseek_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20000d34 	.word	0x20000d34

08008378 <memmove>:
 8008378:	4288      	cmp	r0, r1
 800837a:	b510      	push	{r4, lr}
 800837c:	eb01 0402 	add.w	r4, r1, r2
 8008380:	d902      	bls.n	8008388 <memmove+0x10>
 8008382:	4284      	cmp	r4, r0
 8008384:	4623      	mov	r3, r4
 8008386:	d807      	bhi.n	8008398 <memmove+0x20>
 8008388:	1e43      	subs	r3, r0, #1
 800838a:	42a1      	cmp	r1, r4
 800838c:	d008      	beq.n	80083a0 <memmove+0x28>
 800838e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008396:	e7f8      	b.n	800838a <memmove+0x12>
 8008398:	4402      	add	r2, r0
 800839a:	4601      	mov	r1, r0
 800839c:	428a      	cmp	r2, r1
 800839e:	d100      	bne.n	80083a2 <memmove+0x2a>
 80083a0:	bd10      	pop	{r4, pc}
 80083a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083aa:	e7f7      	b.n	800839c <memmove+0x24>

080083ac <_malloc_usable_size_r>:
 80083ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083b0:	1f18      	subs	r0, r3, #4
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bfbc      	itt	lt
 80083b6:	580b      	ldrlt	r3, [r1, r0]
 80083b8:	18c0      	addlt	r0, r0, r3
 80083ba:	4770      	bx	lr

080083bc <_read_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	; (80083dc <_read_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f000 f99c 	bl	8008708 <_read>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_read_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_read_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000d34 	.word	0x20000d34

080083e0 <_raise_r>:
 80083e0:	291f      	cmp	r1, #31
 80083e2:	b538      	push	{r3, r4, r5, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	460d      	mov	r5, r1
 80083e8:	d904      	bls.n	80083f4 <_raise_r+0x14>
 80083ea:	2316      	movs	r3, #22
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083f6:	b112      	cbz	r2, 80083fe <_raise_r+0x1e>
 80083f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083fc:	b94b      	cbnz	r3, 8008412 <_raise_r+0x32>
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 f830 	bl	8008464 <_getpid_r>
 8008404:	462a      	mov	r2, r5
 8008406:	4601      	mov	r1, r0
 8008408:	4620      	mov	r0, r4
 800840a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800840e:	f000 b817 	b.w	8008440 <_kill_r>
 8008412:	2b01      	cmp	r3, #1
 8008414:	d00a      	beq.n	800842c <_raise_r+0x4c>
 8008416:	1c59      	adds	r1, r3, #1
 8008418:	d103      	bne.n	8008422 <_raise_r+0x42>
 800841a:	2316      	movs	r3, #22
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	2001      	movs	r0, #1
 8008420:	e7e7      	b.n	80083f2 <_raise_r+0x12>
 8008422:	2400      	movs	r4, #0
 8008424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008428:	4628      	mov	r0, r5
 800842a:	4798      	blx	r3
 800842c:	2000      	movs	r0, #0
 800842e:	e7e0      	b.n	80083f2 <_raise_r+0x12>

08008430 <raise>:
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <raise+0xc>)
 8008432:	4601      	mov	r1, r0
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f7ff bfd3 	b.w	80083e0 <_raise_r>
 800843a:	bf00      	nop
 800843c:	20000768 	.word	0x20000768

08008440 <_kill_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d07      	ldr	r5, [pc, #28]	; (8008460 <_kill_r+0x20>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	4611      	mov	r1, r2
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	f000 f94b 	bl	80086e8 <_kill>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d102      	bne.n	800845c <_kill_r+0x1c>
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	b103      	cbz	r3, 800845c <_kill_r+0x1c>
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	bd38      	pop	{r3, r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	20000d34 	.word	0x20000d34

08008464 <_getpid_r>:
 8008464:	f000 b930 	b.w	80086c8 <_getpid>

08008468 <expf>:
 8008468:	b508      	push	{r3, lr}
 800846a:	ed2d 8b02 	vpush	{d8}
 800846e:	eef0 8a40 	vmov.f32	s17, s0
 8008472:	f000 f837 	bl	80084e4 <__ieee754_expf>
 8008476:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <expf+0x68>)
 8008478:	f993 3000 	ldrsb.w	r3, [r3]
 800847c:	3301      	adds	r3, #1
 800847e:	eeb0 8a40 	vmov.f32	s16, s0
 8008482:	d011      	beq.n	80084a8 <expf+0x40>
 8008484:	eeb0 0a68 	vmov.f32	s0, s17
 8008488:	f000 f900 	bl	800868c <finitef>
 800848c:	b160      	cbz	r0, 80084a8 <expf+0x40>
 800848e:	eddf 7a11 	vldr	s15, [pc, #68]	; 80084d4 <expf+0x6c>
 8008492:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849a:	dd0a      	ble.n	80084b2 <expf+0x4a>
 800849c:	f7fe fd22 	bl	8006ee4 <__errno>
 80084a0:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80084d8 <expf+0x70>
 80084a4:	2322      	movs	r3, #34	; 0x22
 80084a6:	6003      	str	r3, [r0, #0]
 80084a8:	eeb0 0a48 	vmov.f32	s0, s16
 80084ac:	ecbd 8b02 	vpop	{d8}
 80084b0:	bd08      	pop	{r3, pc}
 80084b2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80084dc <expf+0x74>
 80084b6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80084ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084be:	d5f3      	bpl.n	80084a8 <expf+0x40>
 80084c0:	f7fe fd10 	bl	8006ee4 <__errno>
 80084c4:	2322      	movs	r3, #34	; 0x22
 80084c6:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80084e0 <expf+0x78>
 80084ca:	6003      	str	r3, [r0, #0]
 80084cc:	e7ec      	b.n	80084a8 <expf+0x40>
 80084ce:	bf00      	nop
 80084d0:	200007cc 	.word	0x200007cc
 80084d4:	42b17180 	.word	0x42b17180
 80084d8:	7f800000 	.word	0x7f800000
 80084dc:	c2cff1b5 	.word	0xc2cff1b5
 80084e0:	00000000 	.word	0x00000000

080084e4 <__ieee754_expf>:
 80084e4:	ee10 2a10 	vmov	r2, s0
 80084e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80084ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80084f0:	d902      	bls.n	80084f8 <__ieee754_expf+0x14>
 80084f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80084f6:	4770      	bx	lr
 80084f8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80084fc:	d106      	bne.n	800850c <__ieee754_expf+0x28>
 80084fe:	eddf 7a51 	vldr	s15, [pc, #324]	; 8008644 <__ieee754_expf+0x160>
 8008502:	2b00      	cmp	r3, #0
 8008504:	bf18      	it	ne
 8008506:	eeb0 0a67 	vmovne.f32	s0, s15
 800850a:	4770      	bx	lr
 800850c:	484e      	ldr	r0, [pc, #312]	; (8008648 <__ieee754_expf+0x164>)
 800850e:	4282      	cmp	r2, r0
 8008510:	dd04      	ble.n	800851c <__ieee754_expf+0x38>
 8008512:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800864c <__ieee754_expf+0x168>
 8008516:	ee20 0a00 	vmul.f32	s0, s0, s0
 800851a:	4770      	bx	lr
 800851c:	2a00      	cmp	r2, #0
 800851e:	da03      	bge.n	8008528 <__ieee754_expf+0x44>
 8008520:	4a4b      	ldr	r2, [pc, #300]	; (8008650 <__ieee754_expf+0x16c>)
 8008522:	4291      	cmp	r1, r2
 8008524:	f200 808a 	bhi.w	800863c <__ieee754_expf+0x158>
 8008528:	4a4a      	ldr	r2, [pc, #296]	; (8008654 <__ieee754_expf+0x170>)
 800852a:	4291      	cmp	r1, r2
 800852c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008530:	d954      	bls.n	80085dc <__ieee754_expf+0xf8>
 8008532:	4a49      	ldr	r2, [pc, #292]	; (8008658 <__ieee754_expf+0x174>)
 8008534:	4291      	cmp	r1, r2
 8008536:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800853a:	d836      	bhi.n	80085aa <__ieee754_expf+0xc6>
 800853c:	4947      	ldr	r1, [pc, #284]	; (800865c <__ieee754_expf+0x178>)
 800853e:	4411      	add	r1, r2
 8008540:	ed91 7a00 	vldr	s14, [r1]
 8008544:	4946      	ldr	r1, [pc, #280]	; (8008660 <__ieee754_expf+0x17c>)
 8008546:	440a      	add	r2, r1
 8008548:	edd2 7a00 	vldr	s15, [r2]
 800854c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008550:	f1c3 0201 	rsb	r2, r3, #1
 8008554:	1ad2      	subs	r2, r2, r3
 8008556:	ee37 0a67 	vsub.f32	s0, s14, s15
 800855a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800855e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8008664 <__ieee754_expf+0x180>
 8008562:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8008668 <__ieee754_expf+0x184>
 8008566:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800856a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800866c <__ieee754_expf+0x188>
 800856e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8008572:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8008670 <__ieee754_expf+0x18c>
 8008576:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800857a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008674 <__ieee754_expf+0x190>
 800857e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8008582:	eeb0 5a40 	vmov.f32	s10, s0
 8008586:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800858a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800858e:	eef0 6a45 	vmov.f32	s13, s10
 8008592:	ee20 5a05 	vmul.f32	s10, s0, s10
 8008596:	bb92      	cbnz	r2, 80085fe <__ieee754_expf+0x11a>
 8008598:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800859c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80085a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80085a4:	ee36 0a40 	vsub.f32	s0, s12, s0
 80085a8:	4770      	bx	lr
 80085aa:	4b33      	ldr	r3, [pc, #204]	; (8008678 <__ieee754_expf+0x194>)
 80085ac:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800867c <__ieee754_expf+0x198>
 80085b0:	4413      	add	r3, r2
 80085b2:	edd3 7a00 	vldr	s15, [r3]
 80085b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80085ba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008680 <__ieee754_expf+0x19c>
 80085be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085c2:	ee17 2a90 	vmov	r2, s15
 80085c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80085ce:	eeb0 7a40 	vmov.f32	s14, s0
 80085d2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008684 <__ieee754_expf+0x1a0>
 80085d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085da:	e7bc      	b.n	8008556 <__ieee754_expf+0x72>
 80085dc:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80085e0:	d20b      	bcs.n	80085fa <__ieee754_expf+0x116>
 80085e2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800864c <__ieee754_expf+0x168>
 80085e6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80085ea:	eef4 6ac6 	vcmpe.f32	s13, s12
 80085ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f2:	dd02      	ble.n	80085fa <__ieee754_expf+0x116>
 80085f4:	ee30 0a06 	vadd.f32	s0, s0, s12
 80085f8:	4770      	bx	lr
 80085fa:	2200      	movs	r2, #0
 80085fc:	e7ad      	b.n	800855a <__ieee754_expf+0x76>
 80085fe:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8008602:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8008606:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800860a:	bfb8      	it	lt
 800860c:	3264      	addlt	r2, #100	; 0x64
 800860e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008612:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008616:	ee76 7a40 	vsub.f32	s15, s12, s0
 800861a:	ee17 3a90 	vmov	r3, s15
 800861e:	bfab      	itete	ge
 8008620:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008624:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8008628:	ee00 3a10 	vmovge	s0, r3
 800862c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8008688 <__ieee754_expf+0x1a4>
 8008630:	bfbc      	itt	lt
 8008632:	ee00 3a10 	vmovlt	s0, r3
 8008636:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800863a:	4770      	bx	lr
 800863c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008644 <__ieee754_expf+0x160>
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	00000000 	.word	0x00000000
 8008648:	42b17217 	.word	0x42b17217
 800864c:	7149f2ca 	.word	0x7149f2ca
 8008650:	42cff1b5 	.word	0x42cff1b5
 8008654:	3eb17218 	.word	0x3eb17218
 8008658:	3f851591 	.word	0x3f851591
 800865c:	0800f644 	.word	0x0800f644
 8008660:	0800f64c 	.word	0x0800f64c
 8008664:	3331bb4c 	.word	0x3331bb4c
 8008668:	b5ddea0e 	.word	0xb5ddea0e
 800866c:	388ab355 	.word	0x388ab355
 8008670:	bb360b61 	.word	0xbb360b61
 8008674:	3e2aaaab 	.word	0x3e2aaaab
 8008678:	0800f63c 	.word	0x0800f63c
 800867c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008680:	3f317180 	.word	0x3f317180
 8008684:	3717f7d1 	.word	0x3717f7d1
 8008688:	0d800000 	.word	0x0d800000

0800868c <finitef>:
 800868c:	b082      	sub	sp, #8
 800868e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008692:	9801      	ldr	r0, [sp, #4]
 8008694:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008698:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800869c:	bfac      	ite	ge
 800869e:	2000      	movge	r0, #0
 80086a0:	2001      	movlt	r0, #1
 80086a2:	b002      	add	sp, #8
 80086a4:	4770      	bx	lr
	...

080086a8 <_close>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <_close+0xc>)
 80086aa:	2258      	movs	r2, #88	; 0x58
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	f04f 30ff 	mov.w	r0, #4294967295
 80086b2:	4770      	bx	lr
 80086b4:	20000d34 	.word	0x20000d34

080086b8 <_fstat>:
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <_fstat+0xc>)
 80086ba:	2258      	movs	r2, #88	; 0x58
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	f04f 30ff 	mov.w	r0, #4294967295
 80086c2:	4770      	bx	lr
 80086c4:	20000d34 	.word	0x20000d34

080086c8 <_getpid>:
 80086c8:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <_getpid+0xc>)
 80086ca:	2258      	movs	r2, #88	; 0x58
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	f04f 30ff 	mov.w	r0, #4294967295
 80086d2:	4770      	bx	lr
 80086d4:	20000d34 	.word	0x20000d34

080086d8 <_isatty>:
 80086d8:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <_isatty+0xc>)
 80086da:	2258      	movs	r2, #88	; 0x58
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	2000      	movs	r0, #0
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	20000d34 	.word	0x20000d34

080086e8 <_kill>:
 80086e8:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <_kill+0xc>)
 80086ea:	2258      	movs	r2, #88	; 0x58
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	f04f 30ff 	mov.w	r0, #4294967295
 80086f2:	4770      	bx	lr
 80086f4:	20000d34 	.word	0x20000d34

080086f8 <_lseek>:
 80086f8:	4b02      	ldr	r3, [pc, #8]	; (8008704 <_lseek+0xc>)
 80086fa:	2258      	movs	r2, #88	; 0x58
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008702:	4770      	bx	lr
 8008704:	20000d34 	.word	0x20000d34

08008708 <_read>:
 8008708:	4b02      	ldr	r3, [pc, #8]	; (8008714 <_read+0xc>)
 800870a:	2258      	movs	r2, #88	; 0x58
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	4770      	bx	lr
 8008714:	20000d34 	.word	0x20000d34

08008718 <_write>:
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <_write+0xc>)
 800871a:	2258      	movs	r2, #88	; 0x58
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	f04f 30ff 	mov.w	r0, #4294967295
 8008722:	4770      	bx	lr
 8008724:	20000d34 	.word	0x20000d34

08008728 <_exit>:
 8008728:	e7fe      	b.n	8008728 <_exit>
	...

0800872c <_init>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr

08008738 <_fini>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	bf00      	nop
 800873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873e:	bc08      	pop	{r3}
 8008740:	469e      	mov	lr, r3
 8008742:	4770      	bx	lr
